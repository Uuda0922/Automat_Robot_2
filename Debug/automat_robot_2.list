
automat_robot_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  0800ed08  0800ed08  0001ed08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f450  0800f450  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800f450  0800f450  0001f450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f458  0800f458  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f458  0800f458  0001f458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f460  0800f460  0001f460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800f464  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005cac  20000088  0800f4ec  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005d34  0800f4ec  00025d34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023c60  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000449c  00000000  00000000  00043d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cc0  00000000  00000000  000481f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001686  00000000  00000000  00049eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ab80  00000000  00000000  0004b53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022b75  00000000  00000000  000760be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106179  00000000  00000000  00098c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000083a8  00000000  00000000  0019edac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001a7154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ecec 	.word	0x0800ecec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800ecec 	.word	0x0800ecec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5c:	f000 b970 	b.w	8000e40 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9e08      	ldr	r6, [sp, #32]
 8000b7e:	460d      	mov	r5, r1
 8000b80:	4604      	mov	r4, r0
 8000b82:	460f      	mov	r7, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d14a      	bne.n	8000c1e <__udivmoddi4+0xa6>
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	4694      	mov	ip, r2
 8000b8c:	d965      	bls.n	8000c5a <__udivmoddi4+0xe2>
 8000b8e:	fab2 f382 	clz	r3, r2
 8000b92:	b143      	cbz	r3, 8000ba6 <__udivmoddi4+0x2e>
 8000b94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b98:	f1c3 0220 	rsb	r2, r3, #32
 8000b9c:	409f      	lsls	r7, r3
 8000b9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba2:	4317      	orrs	r7, r2
 8000ba4:	409c      	lsls	r4, r3
 8000ba6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bb2:	0c22      	lsrs	r2, r4, #16
 8000bb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bbc:	fb01 f005 	mul.w	r0, r1, r5
 8000bc0:	4290      	cmp	r0, r2
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x62>
 8000bc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bcc:	f080 811c 	bcs.w	8000e08 <__udivmoddi4+0x290>
 8000bd0:	4290      	cmp	r0, r2
 8000bd2:	f240 8119 	bls.w	8000e08 <__udivmoddi4+0x290>
 8000bd6:	3902      	subs	r1, #2
 8000bd8:	4462      	add	r2, ip
 8000bda:	1a12      	subs	r2, r2, r0
 8000bdc:	b2a4      	uxth	r4, r4
 8000bde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000be2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	fb00 f505 	mul.w	r5, r0, r5
 8000bee:	42a5      	cmp	r5, r4
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x90>
 8000bf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bfa:	f080 8107 	bcs.w	8000e0c <__udivmoddi4+0x294>
 8000bfe:	42a5      	cmp	r5, r4
 8000c00:	f240 8104 	bls.w	8000e0c <__udivmoddi4+0x294>
 8000c04:	4464      	add	r4, ip
 8000c06:	3802      	subs	r0, #2
 8000c08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	2100      	movs	r1, #0
 8000c10:	b11e      	cbz	r6, 8000c1a <__udivmoddi4+0xa2>
 8000c12:	40dc      	lsrs	r4, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	e9c6 4300 	strd	r4, r3, [r6]
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0xbc>
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	f000 80ed 	beq.w	8000e02 <__udivmoddi4+0x28a>
 8000c28:	2100      	movs	r1, #0
 8000c2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2e:	4608      	mov	r0, r1
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	fab3 f183 	clz	r1, r3
 8000c38:	2900      	cmp	r1, #0
 8000c3a:	d149      	bne.n	8000cd0 <__udivmoddi4+0x158>
 8000c3c:	42ab      	cmp	r3, r5
 8000c3e:	d302      	bcc.n	8000c46 <__udivmoddi4+0xce>
 8000c40:	4282      	cmp	r2, r0
 8000c42:	f200 80f8 	bhi.w	8000e36 <__udivmoddi4+0x2be>
 8000c46:	1a84      	subs	r4, r0, r2
 8000c48:	eb65 0203 	sbc.w	r2, r5, r3
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d0e2      	beq.n	8000c1a <__udivmoddi4+0xa2>
 8000c54:	e9c6 4700 	strd	r4, r7, [r6]
 8000c58:	e7df      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000c5a:	b902      	cbnz	r2, 8000c5e <__udivmoddi4+0xe6>
 8000c5c:	deff      	udf	#255	; 0xff
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x210>
 8000c68:	1a8a      	subs	r2, r1, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f fe8c 	uxth.w	lr, ip
 8000c72:	2101      	movs	r1, #1
 8000c74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c78:	fb07 2015 	mls	r0, r7, r5, r2
 8000c7c:	0c22      	lsrs	r2, r4, #16
 8000c7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c82:	fb0e f005 	mul.w	r0, lr, r5
 8000c86:	4290      	cmp	r0, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x124>
 8000c8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x122>
 8000c94:	4290      	cmp	r0, r2
 8000c96:	f200 80cb 	bhi.w	8000e30 <__udivmoddi4+0x2b8>
 8000c9a:	4645      	mov	r5, r8
 8000c9c:	1a12      	subs	r2, r2, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cac:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x14e>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x14c>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f200 80bb 	bhi.w	8000e3a <__udivmoddi4+0x2c2>
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	eba4 040e 	sub.w	r4, r4, lr
 8000cca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cce:	e79f      	b.n	8000c10 <__udivmoddi4+0x98>
 8000cd0:	f1c1 0720 	rsb	r7, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cde:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ce6:	40fd      	lsrs	r5, r7
 8000ce8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cec:	4323      	orrs	r3, r4
 8000cee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cf2:	fa1f fe8c 	uxth.w	lr, ip
 8000cf6:	fb09 5518 	mls	r5, r9, r8, r5
 8000cfa:	0c1c      	lsrs	r4, r3, #16
 8000cfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d00:	fb08 f50e 	mul.w	r5, r8, lr
 8000d04:	42a5      	cmp	r5, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d0e:	d90b      	bls.n	8000d28 <__udivmoddi4+0x1b0>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d18:	f080 8088 	bcs.w	8000e2c <__udivmoddi4+0x2b4>
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	f240 8085 	bls.w	8000e2c <__udivmoddi4+0x2b4>
 8000d22:	f1a8 0802 	sub.w	r8, r8, #2
 8000d26:	4464      	add	r4, ip
 8000d28:	1b64      	subs	r4, r4, r5
 8000d2a:	b29d      	uxth	r5, r3
 8000d2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d30:	fb09 4413 	mls	r4, r9, r3, r4
 8000d34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1da>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d48:	d26c      	bcs.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	d96a      	bls.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d56:	fba3 9502 	umull	r9, r5, r3, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	42ac      	cmp	r4, r5
 8000d60:	46c8      	mov	r8, r9
 8000d62:	46ae      	mov	lr, r5
 8000d64:	d356      	bcc.n	8000e14 <__udivmoddi4+0x29c>
 8000d66:	d053      	beq.n	8000e10 <__udivmoddi4+0x298>
 8000d68:	b156      	cbz	r6, 8000d80 <__udivmoddi4+0x208>
 8000d6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000d72:	fa04 f707 	lsl.w	r7, r4, r7
 8000d76:	40ca      	lsrs	r2, r1
 8000d78:	40cc      	lsrs	r4, r1
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000d80:	4618      	mov	r0, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	f1c3 0120 	rsb	r1, r3, #32
 8000d8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d90:	fa20 f201 	lsr.w	r2, r0, r1
 8000d94:	fa25 f101 	lsr.w	r1, r5, r1
 8000d98:	409d      	lsls	r5, r3
 8000d9a:	432a      	orrs	r2, r5
 8000d9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dac:	0c11      	lsrs	r1, r2, #16
 8000dae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000db2:	fb00 f50e 	mul.w	r5, r0, lr
 8000db6:	428d      	cmp	r5, r1
 8000db8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x258>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dc6:	d22f      	bcs.n	8000e28 <__udivmoddi4+0x2b0>
 8000dc8:	428d      	cmp	r5, r1
 8000dca:	d92d      	bls.n	8000e28 <__udivmoddi4+0x2b0>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1b49      	subs	r1, r1, r5
 8000dd2:	b292      	uxth	r2, r2
 8000dd4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ddc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de0:	fb05 f10e 	mul.w	r1, r5, lr
 8000de4:	4291      	cmp	r1, r2
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x282>
 8000de8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df0:	d216      	bcs.n	8000e20 <__udivmoddi4+0x2a8>
 8000df2:	4291      	cmp	r1, r2
 8000df4:	d914      	bls.n	8000e20 <__udivmoddi4+0x2a8>
 8000df6:	3d02      	subs	r5, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a52      	subs	r2, r2, r1
 8000dfc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e00:	e738      	b.n	8000c74 <__udivmoddi4+0xfc>
 8000e02:	4631      	mov	r1, r6
 8000e04:	4630      	mov	r0, r6
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000e08:	4639      	mov	r1, r7
 8000e0a:	e6e6      	b.n	8000bda <__udivmoddi4+0x62>
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	e6fb      	b.n	8000c08 <__udivmoddi4+0x90>
 8000e10:	4548      	cmp	r0, r9
 8000e12:	d2a9      	bcs.n	8000d68 <__udivmoddi4+0x1f0>
 8000e14:	ebb9 0802 	subs.w	r8, r9, r2
 8000e18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	e7a3      	b.n	8000d68 <__udivmoddi4+0x1f0>
 8000e20:	4645      	mov	r5, r8
 8000e22:	e7ea      	b.n	8000dfa <__udivmoddi4+0x282>
 8000e24:	462b      	mov	r3, r5
 8000e26:	e794      	b.n	8000d52 <__udivmoddi4+0x1da>
 8000e28:	4640      	mov	r0, r8
 8000e2a:	e7d1      	b.n	8000dd0 <__udivmoddi4+0x258>
 8000e2c:	46d0      	mov	r8, sl
 8000e2e:	e77b      	b.n	8000d28 <__udivmoddi4+0x1b0>
 8000e30:	3d02      	subs	r5, #2
 8000e32:	4462      	add	r2, ip
 8000e34:	e732      	b.n	8000c9c <__udivmoddi4+0x124>
 8000e36:	4608      	mov	r0, r1
 8000e38:	e70a      	b.n	8000c50 <__udivmoddi4+0xd8>
 8000e3a:	4464      	add	r4, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e742      	b.n	8000cc6 <__udivmoddi4+0x14e>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <vApplicationGetIdleTaskMemory+0x30>)
 8000e5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200000a4 	.word	0x200000a4
 8000e74:	200000f8 	.word	0x200000f8

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b0a4      	sub	sp, #144	; 0x90
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000e7e:	f005 fe8a 	bl	8006b96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f8af 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 fd4d 	bl	8001924 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e8a:	f000 fd1b 	bl	80018c4 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000e8e:	f000 f917 	bl	80010c0 <MX_CAN1_Init>
  MX_I2C2_Init();
 8000e92:	f000 f94b 	bl	800112c <MX_I2C2_Init>
  MX_I2C4_Init();
 8000e96:	f000 f989 	bl	80011ac <MX_I2C4_Init>
  MX_SPI1_Init();
 8000e9a:	f000 f9c7 	bl	800122c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e9e:	f000 fa03 	bl	80012a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ea2:	f000 fa5b 	bl	800135c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ea6:	f000 faad 	bl	8001404 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000eaa:	f000 fb29 	bl	8001500 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000eae:	f000 fb7d 	bl	80015ac <MX_TIM5_Init>
  MX_TIM8_Init();
 8000eb2:	f000 fbe3 	bl	800167c <MX_TIM8_Init>
  MX_TIM12_Init();
 8000eb6:	f000 fc3b 	bl	8001730 <MX_TIM12_Init>
  MX_USART2_UART_Init();
 8000eba:	f000 fcd3 	bl	8001864 <MX_USART2_UART_Init>
  MX_TIM13_Init();
 8000ebe:	f000 fc89 	bl	80017d4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000ec2:	213c      	movs	r1, #60	; 0x3c
 8000ec4:	4839      	ldr	r0, [pc, #228]	; (8000fac <main+0x134>)
 8000ec6:	f008 fea7 	bl	8009c18 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4838      	ldr	r0, [pc, #224]	; (8000fb0 <main+0x138>)
 8000ece:	f008 fa93 	bl	80093f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	4836      	ldr	r0, [pc, #216]	; (8000fb0 <main+0x138>)
 8000ed6:	f008 fa8f 	bl	80093f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000eda:	210c      	movs	r1, #12
 8000edc:	4835      	ldr	r0, [pc, #212]	; (8000fb4 <main+0x13c>)
 8000ede:	f008 fa8b 	bl	80093f8 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim13, TIM_CHANNEL_1);
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4834      	ldr	r0, [pc, #208]	; (8000fb8 <main+0x140>)
 8000ee6:	f008 fbe3 	bl	80096b0 <HAL_TIM_IC_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Wheelcontrol */
  osThreadDef(Wheelcontrol, Wheeltask, osPriorityNormal, 0, 128);
 8000eea:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <main+0x144>)
 8000eec:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000ef0:	461d      	mov	r5, r3
 8000ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000efa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WheelcontrolHandle = osThreadCreate(osThread(Wheelcontrol), NULL);
 8000efe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f00a ff1b 	bl	800bd40 <osThreadCreate>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a2c      	ldr	r2, [pc, #176]	; (8000fc0 <main+0x148>)
 8000f0e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Joystick */
  osThreadDef(Joystick, task2_joystick, osPriorityNormal, 0, 2048);
 8000f10:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <main+0x14c>)
 8000f12:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f16:	461d      	mov	r5, r3
 8000f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  JoystickHandle = osThreadCreate(osThread(Joystick), NULL);
 8000f24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f00a ff08 	bl	800bd40 <osThreadCreate>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a25      	ldr	r2, [pc, #148]	; (8000fc8 <main+0x150>)
 8000f34:	6013      	str	r3, [r2, #0]

  /* definition and creation of updowncontrol */
  osThreadDef(updowncontrol, dcmotor, osPriorityNormal, 0, 512);
 8000f36:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <main+0x154>)
 8000f38:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f3c:	461d      	mov	r5, r3
 8000f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  updowncontrolHandle = osThreadCreate(osThread(updowncontrol), NULL);
 8000f4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00a fef5 	bl	800bd40 <osThreadCreate>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <main+0x158>)
 8000f5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Target_pos */
  osThreadDef(Target_pos, Colorcheck, osPriorityNormal, 0, 512);
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <main+0x15c>)
 8000f5e:	f107 0420 	add.w	r4, r7, #32
 8000f62:	461d      	mov	r5, r3
 8000f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Target_posHandle = osThreadCreate(osThread(Target_pos), NULL);
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f00a fee2 	bl	800bd40 <osThreadCreate>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <main+0x160>)
 8000f80:	6013      	str	r3, [r2, #0]

  /* definition and creation of Color */
  osThreadDef(Color, StartTask05, osPriorityIdle, 0, 128);
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <main+0x164>)
 8000f84:	1d3c      	adds	r4, r7, #4
 8000f86:	461d      	mov	r5, r3
 8000f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ColorHandle = osThreadCreate(osThread(Color), NULL);
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00a fed1 	bl	800bd40 <osThreadCreate>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <main+0x168>)
 8000fa2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fa4:	f00a fec5 	bl	800bd32 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <main+0x130>
 8000faa:	bf00      	nop
 8000fac:	20000478 	.word	0x20000478
 8000fb0:	200005f4 	.word	0x200005f4
 8000fb4:	200004c4 	.word	0x200004c4
 8000fb8:	20000640 	.word	0x20000640
 8000fbc:	0800ed18 	.word	0x0800ed18
 8000fc0:	2000079c 	.word	0x2000079c
 8000fc4:	0800ed40 	.word	0x0800ed40
 8000fc8:	200007a0 	.word	0x200007a0
 8000fcc:	0800ed6c 	.word	0x0800ed6c
 8000fd0:	200007a4 	.word	0x200007a4
 8000fd4:	0800ed94 	.word	0x0800ed94
 8000fd8:	200007a8 	.word	0x200007a8
 8000fdc:	0800edb8 	.word	0x0800edb8
 8000fe0:	200007ac 	.word	0x200007ac

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b094      	sub	sp, #80	; 0x50
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	2230      	movs	r2, #48	; 0x30
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f00d fd27 	bl	800ea46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001008:	f006 fbe8 	bl	80077dc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <SystemClock_Config+0xd4>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <SystemClock_Config+0xd4>)
 8001012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <SystemClock_Config+0xd4>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <SystemClock_Config+0xd8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a24      	ldr	r2, [pc, #144]	; (80010bc <SystemClock_Config+0xd8>)
 800102a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <SystemClock_Config+0xd8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103c:	2302      	movs	r3, #2
 800103e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001044:	2310      	movs	r3, #16
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001048:	2302      	movs	r3, #2
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104c:	2300      	movs	r3, #0
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001050:	2308      	movs	r3, #8
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001054:	23d8      	movs	r3, #216	; 0xd8
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800105c:	2303      	movs	r3, #3
 800105e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	4618      	mov	r0, r3
 8001066:	f006 fc19 	bl	800789c <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001070:	f002 f830 	bl	80030d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001074:	f006 fbc2 	bl	80077fc <HAL_PWREx_EnableOverDrive>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800107e:	f002 f829 	bl	80030d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001086:	2302      	movs	r3, #2
 8001088:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800108e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001092:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001094:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001098:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	2107      	movs	r1, #7
 80010a0:	4618      	mov	r0, r3
 80010a2:	f006 fe9f 	bl	8007de4 <HAL_RCC_ClockConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80010ac:	f002 f812 	bl	80030d4 <Error_Handler>
  }
}
 80010b0:	bf00      	nop
 80010b2:	3750      	adds	r7, #80	; 0x50
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000

080010c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_CAN1_Init+0x64>)
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <MX_CAN1_Init+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_CAN1_Init+0x64>)
 80010cc:	2203      	movs	r2, #3
 80010ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_CAN1_Init+0x64>)
 80010de:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80010e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_CAN1_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_CAN1_Init+0x64>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_CAN1_Init+0x64>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_CAN1_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_CAN1_Init+0x64>)
 80010fe:	2201      	movs	r2, #1
 8001100:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_CAN1_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_CAN1_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_CAN1_Init+0x64>)
 8001110:	f005 fdc2 	bl	8006c98 <HAL_CAN_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800111a:	f001 ffdb 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200002f8 	.word	0x200002f8
 8001128:	40006400 	.word	0x40006400

0800112c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <MX_I2C2_Init+0x78>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001138:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <MX_I2C2_Init+0x7c>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_I2C2_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001144:	2201      	movs	r2, #1
 8001146:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_I2C2_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_I2C2_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001166:	480e      	ldr	r0, [pc, #56]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001168:	f006 fa10 	bl	800758c <HAL_I2C_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001172:	f001 ffaf 	bl	80030d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	4809      	ldr	r0, [pc, #36]	; (80011a0 <MX_I2C2_Init+0x74>)
 800117a:	f006 fa97 	bl	80076ac <HAL_I2CEx_ConfigAnalogFilter>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001184:	f001 ffa6 	bl	80030d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001188:	2100      	movs	r1, #0
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_I2C2_Init+0x74>)
 800118c:	f006 fad9 	bl	8007742 <HAL_I2CEx_ConfigDigitalFilter>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001196:	f001 ff9d 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000320 	.word	0x20000320
 80011a4:	40005800 	.word	0x40005800
 80011a8:	20404768 	.word	0x20404768

080011ac <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_I2C4_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <MX_I2C4_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_I2C4_Init+0x74>)
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <MX_I2C4_Init+0x7c>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_I2C4_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_I2C4_Init+0x74>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_I2C4_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_I2C4_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_I2C4_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_I2C4_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_I2C4_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80011e6:	480e      	ldr	r0, [pc, #56]	; (8001220 <MX_I2C4_Init+0x74>)
 80011e8:	f006 f9d0 	bl	800758c <HAL_I2C_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80011f2:	f001 ff6f 	bl	80030d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <MX_I2C4_Init+0x74>)
 80011fa:	f006 fa57 	bl	80076ac <HAL_I2CEx_ConfigAnalogFilter>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001204:	f001 ff66 	bl	80030d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_I2C4_Init+0x74>)
 800120c:	f006 fa99 	bl	8007742 <HAL_I2CEx_ConfigDigitalFilter>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001216:	f001 ff5d 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000374 	.word	0x20000374
 8001224:	40006000 	.word	0x40006000
 8001228:	20404768 	.word	0x20404768

0800122c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <MX_SPI1_Init+0x78>)
 8001234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800123c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001246:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800124a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_SPI1_Init+0x74>)
 800124e:	2202      	movs	r2, #2
 8001250:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001254:	2201      	movs	r2, #1
 8001256:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_SPI1_Init+0x74>)
 800125a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800125e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001262:	2238      	movs	r2, #56	; 0x38
 8001264:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_SPI1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_SPI1_Init+0x74>)
 800127a:	2207      	movs	r2, #7
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_SPI1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_SPI1_Init+0x74>)
 800128c:	f007 fbc0 	bl	8008a10 <HAL_SPI_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001296:	f001 ff1d 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200003c8 	.word	0x200003c8
 80012a4:	40013000 	.word	0x40013000

080012a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2224      	movs	r2, #36	; 0x24
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00d fbc5 	bl	800ea46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <MX_TIM1_Init+0xac>)
 80012c8:	4a23      	ldr	r2, [pc, #140]	; (8001358 <MX_TIM1_Init+0xb0>)
 80012ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_TIM1_Init+0xac>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_TIM1_Init+0xac>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_TIM1_Init+0xac>)
 80012da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_TIM1_Init+0xac>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_TIM1_Init+0xac>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_TIM1_Init+0xac>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012f2:	2303      	movs	r3, #3
 80012f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80012f6:	2302      	movs	r3, #2
 80012f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012fa:	2301      	movs	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001306:	2302      	movs	r3, #2
 8001308:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800130a:	2301      	movs	r3, #1
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4619      	mov	r1, r3
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_TIM1_Init+0xac>)
 800131e:	f008 fbd5 	bl	8009acc <HAL_TIM_Encoder_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001328:	f001 fed4 	bl	80030d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_TIM1_Init+0xac>)
 800133e:	f009 fc83 	bl	800ac48 <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001348:	f001 fec4 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	3730      	adds	r7, #48	; 0x30
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	2000042c 	.word	0x2000042c
 8001358:	40010000 	.word	0x40010000

0800135c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f00d fb6b 	bl	800ea46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <MX_TIM2_Init+0xa4>)
 800137c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001380:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <MX_TIM2_Init+0xa4>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <MX_TIM2_Init+0xa4>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_TIM2_Init+0xa4>)
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_TIM2_Init+0xa4>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_TIM2_Init+0xa4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013a2:	2303      	movs	r3, #3
 80013a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80013a6:	2302      	movs	r3, #2
 80013a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013aa:	2301      	movs	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80013b6:	2302      	movs	r3, #2
 80013b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ba:	2301      	movs	r3, #1
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	4619      	mov	r1, r3
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <MX_TIM2_Init+0xa4>)
 80013ce:	f008 fb7d 	bl	8009acc <HAL_TIM_Encoder_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80013d8:	f001 fe7c 	bl	80030d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_TIM2_Init+0xa4>)
 80013ea:	f009 fc2d 	bl	800ac48 <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80013f4:	f001 fe6e 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3730      	adds	r7, #48	; 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000478 	.word	0x20000478

08001404 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001416:	463b      	mov	r3, r7
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	615a      	str	r2, [r3, #20]
 8001426:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001428:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <MX_TIM3_Init+0xf4>)
 800142a:	4a34      	ldr	r2, [pc, #208]	; (80014fc <MX_TIM3_Init+0xf8>)
 800142c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 21385;
 800142e:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <MX_TIM3_Init+0xf4>)
 8001430:	f245 3289 	movw	r2, #21385	; 0x5389
 8001434:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <MX_TIM3_Init+0xf4>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800143c:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <MX_TIM3_Init+0xf4>)
 800143e:	2264      	movs	r2, #100	; 0x64
 8001440:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <MX_TIM3_Init+0xf4>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <MX_TIM3_Init+0xf4>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800144e:	482a      	ldr	r0, [pc, #168]	; (80014f8 <MX_TIM3_Init+0xf4>)
 8001450:	f007 ff7b 	bl	800934a <HAL_TIM_PWM_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800145a:	f001 fe3b 	bl	80030d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	4822      	ldr	r0, [pc, #136]	; (80014f8 <MX_TIM3_Init+0xf4>)
 800146e:	f009 fbeb 	bl	800ac48 <HAL_TIMEx_MasterConfigSynchronization>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001478:	f001 fe2c 	bl	80030d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147c:	2360      	movs	r3, #96	; 0x60
 800147e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	2200      	movs	r2, #0
 8001490:	4619      	mov	r1, r3
 8001492:	4819      	ldr	r0, [pc, #100]	; (80014f8 <MX_TIM3_Init+0xf4>)
 8001494:	f008 fe0a 	bl	800a0ac <HAL_TIM_PWM_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800149e:	f001 fe19 	bl	80030d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	2204      	movs	r2, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4813      	ldr	r0, [pc, #76]	; (80014f8 <MX_TIM3_Init+0xf4>)
 80014aa:	f008 fdff 	bl	800a0ac <HAL_TIM_PWM_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80014b4:	f001 fe0e 	bl	80030d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014b8:	463b      	mov	r3, r7
 80014ba:	2208      	movs	r2, #8
 80014bc:	4619      	mov	r1, r3
 80014be:	480e      	ldr	r0, [pc, #56]	; (80014f8 <MX_TIM3_Init+0xf4>)
 80014c0:	f008 fdf4 	bl	800a0ac <HAL_TIM_PWM_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80014ca:	f001 fe03 	bl	80030d4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80014ce:	2302      	movs	r3, #2
 80014d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014d2:	463b      	mov	r3, r7
 80014d4:	220c      	movs	r2, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <MX_TIM3_Init+0xf4>)
 80014da:	f008 fde7 	bl	800a0ac <HAL_TIM_PWM_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80014e4:	f001 fdf6 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <MX_TIM3_Init+0xf4>)
 80014ea:	f005 f937 	bl	800675c <HAL_TIM_MspPostInit>

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200004c4 	.word	0x200004c4
 80014fc:	40000400 	.word	0x40000400

08001500 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	2224      	movs	r2, #36	; 0x24
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f00d fa99 	bl	800ea46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	463b      	mov	r3, r7
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <MX_TIM4_Init+0xa4>)
 8001520:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <MX_TIM4_Init+0xa8>)
 8001522:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <MX_TIM4_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <MX_TIM4_Init+0xa4>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_TIM4_Init+0xa4>)
 8001532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001536:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_TIM4_Init+0xa4>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_TIM4_Init+0xa4>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001544:	2303      	movs	r3, #3
 8001546:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001548:	2302      	movs	r3, #2
 800154a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800154c:	2301      	movs	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001558:	2302      	movs	r3, #2
 800155a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800155c:	2301      	movs	r3, #1
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_TIM4_Init+0xa4>)
 8001570:	f008 faac 	bl	8009acc <HAL_TIM_Encoder_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800157a:	f001 fdab 	bl	80030d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001586:	463b      	mov	r3, r7
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_TIM4_Init+0xa4>)
 800158c:	f009 fb5c 	bl	800ac48 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001596:	f001 fd9d 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	3730      	adds	r7, #48	; 0x30
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000510 	.word	0x20000510
 80015a8:	40000800 	.word	0x40000800

080015ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015be:	463b      	mov	r3, r7
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
 80015cc:	615a      	str	r2, [r3, #20]
 80015ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <MX_TIM5_Init+0xc8>)
 80015d2:	4a29      	ldr	r2, [pc, #164]	; (8001678 <MX_TIM5_Init+0xcc>)
 80015d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7;
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <MX_TIM5_Init+0xc8>)
 80015d8:	2207      	movs	r2, #7
 80015da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b25      	ldr	r3, [pc, #148]	; (8001674 <MX_TIM5_Init+0xc8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 25000;
 80015e2:	4b24      	ldr	r3, [pc, #144]	; (8001674 <MX_TIM5_Init+0xc8>)
 80015e4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80015e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <MX_TIM5_Init+0xc8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <MX_TIM5_Init+0xc8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80015f6:	481f      	ldr	r0, [pc, #124]	; (8001674 <MX_TIM5_Init+0xc8>)
 80015f8:	f007 fea7 	bl	800934a <HAL_TIM_PWM_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001602:	f001 fd67 	bl	80030d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	4817      	ldr	r0, [pc, #92]	; (8001674 <MX_TIM5_Init+0xc8>)
 8001616:	f009 fb17 	bl	800ac48 <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001620:	f001 fd58 	bl	80030d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001624:	2360      	movs	r3, #96	; 0x60
 8001626:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800162c:	2302      	movs	r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	2208      	movs	r2, #8
 8001638:	4619      	mov	r1, r3
 800163a:	480e      	ldr	r0, [pc, #56]	; (8001674 <MX_TIM5_Init+0xc8>)
 800163c:	f008 fd36 	bl	800a0ac <HAL_TIM_PWM_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001646:	f001 fd45 	bl	80030d4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800164e:	463b      	mov	r3, r7
 8001650:	220c      	movs	r2, #12
 8001652:	4619      	mov	r1, r3
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <MX_TIM5_Init+0xc8>)
 8001656:	f008 fd29 	bl	800a0ac <HAL_TIM_PWM_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 8001660:	f001 fd38 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <MX_TIM5_Init+0xc8>)
 8001666:	f005 f879 	bl	800675c <HAL_TIM_MspPostInit>

}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000055c 	.word	0x2000055c
 8001678:	40000c00 	.word	0x40000c00

0800167c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08c      	sub	sp, #48	; 0x30
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	2224      	movs	r2, #36	; 0x24
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f00d f9db 	bl	800ea46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001690:	463b      	mov	r3, r7
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800169a:	4b23      	ldr	r3, [pc, #140]	; (8001728 <MX_TIM8_Init+0xac>)
 800169c:	4a23      	ldr	r2, [pc, #140]	; (800172c <MX_TIM8_Init+0xb0>)
 800169e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016a0:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_TIM8_Init+0xac>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <MX_TIM8_Init+0xac>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_TIM8_Init+0xac>)
 80016ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_TIM8_Init+0xac>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <MX_TIM8_Init+0xac>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_TIM8_Init+0xac>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016c6:	2303      	movs	r3, #3
 80016c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80016ca:	2302      	movs	r3, #2
 80016cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016ce:	2301      	movs	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80016da:	2302      	movs	r3, #2
 80016dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016de:	2301      	movs	r3, #1
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	4619      	mov	r1, r3
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_TIM8_Init+0xac>)
 80016f2:	f008 f9eb 	bl	8009acc <HAL_TIM_Encoder_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80016fc:	f001 fcea 	bl	80030d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_TIM8_Init+0xac>)
 8001712:	f009 fa99 	bl	800ac48 <HAL_TIMEx_MasterConfigSynchronization>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800171c:	f001 fcda 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	3730      	adds	r7, #48	; 0x30
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200005a8 	.word	0x200005a8
 800172c:	40010400 	.word	0x40010400

08001730 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
 8001744:	615a      	str	r2, [r3, #20]
 8001746:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001748:	4b20      	ldr	r3, [pc, #128]	; (80017cc <MX_TIM12_Init+0x9c>)
 800174a:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <MX_TIM12_Init+0xa0>)
 800174c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2156;
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <MX_TIM12_Init+0x9c>)
 8001750:	f640 026c 	movw	r2, #2156	; 0x86c
 8001754:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <MX_TIM12_Init+0x9c>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <MX_TIM12_Init+0x9c>)
 800175e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001762:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <MX_TIM12_Init+0x9c>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <MX_TIM12_Init+0x9c>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001770:	4816      	ldr	r0, [pc, #88]	; (80017cc <MX_TIM12_Init+0x9c>)
 8001772:	f007 fdea 	bl	800934a <HAL_TIM_PWM_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM12_Init+0x50>
  {
    Error_Handler();
 800177c:	f001 fcaa 	bl	80030d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001780:	2360      	movs	r3, #96	; 0x60
 8001782:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001788:	2302      	movs	r3, #2
 800178a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	2200      	movs	r2, #0
 8001794:	4619      	mov	r1, r3
 8001796:	480d      	ldr	r0, [pc, #52]	; (80017cc <MX_TIM12_Init+0x9c>)
 8001798:	f008 fc88 	bl	800a0ac <HAL_TIM_PWM_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 80017a2:	f001 fc97 	bl	80030d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2204      	movs	r2, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	4807      	ldr	r0, [pc, #28]	; (80017cc <MX_TIM12_Init+0x9c>)
 80017ae:	f008 fc7d 	bl	800a0ac <HAL_TIM_PWM_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 80017b8:	f001 fc8c 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80017bc:	4803      	ldr	r0, [pc, #12]	; (80017cc <MX_TIM12_Init+0x9c>)
 80017be:	f004 ffcd 	bl	800675c <HAL_TIM_MspPostInit>

}
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200005f4 	.word	0x200005f4
 80017d0:	40001800 	.word	0x40001800

080017d4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80017da:	463b      	mov	r3, r7
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_TIM13_Init+0x88>)
 80017e8:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <MX_TIM13_Init+0x8c>)
 80017ea:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_TIM13_Init+0x88>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_TIM13_Init+0x88>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_TIM13_Init+0x88>)
 80017fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017fe:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_TIM13_Init+0x88>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_TIM13_Init+0x88>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800180c:	4813      	ldr	r0, [pc, #76]	; (800185c <MX_TIM13_Init+0x88>)
 800180e:	f007 fd45 	bl	800929c <HAL_TIM_Base_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 8001818:	f001 fc5c 	bl	80030d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 800181c:	480f      	ldr	r0, [pc, #60]	; (800185c <MX_TIM13_Init+0x88>)
 800181e:	f007 fee5 	bl	80095ec <HAL_TIM_IC_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 8001828:	f001 fc54 	bl	80030d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800182c:	2300      	movs	r3, #0
 800182e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001830:	2301      	movs	r3, #1
 8001832:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	4619      	mov	r1, r3
 8001842:	4806      	ldr	r0, [pc, #24]	; (800185c <MX_TIM13_Init+0x88>)
 8001844:	f008 fb95 	bl	8009f72 <HAL_TIM_IC_ConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 800184e:	f001 fc41 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000640 	.word	0x20000640
 8001860:	40001c00 	.word	0x40001c00

08001864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_USART2_UART_Init+0x58>)
 800186a:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <MX_USART2_UART_Init+0x5c>)
 800186c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <MX_USART2_UART_Init+0x58>)
 8001870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_USART2_UART_Init+0x58>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_USART2_UART_Init+0x58>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_USART2_UART_Init+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_USART2_UART_Init+0x58>)
 800188a:	220c      	movs	r2, #12
 800188c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_USART2_UART_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_USART2_UART_Init+0x58>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <MX_USART2_UART_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_USART2_UART_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_USART2_UART_Init+0x58>)
 80018a8:	f009 fa7a 	bl	800ada0 <HAL_UART_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018b2:	f001 fc0f 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000068c 	.word	0x2000068c
 80018c0:	40004400 	.word	0x40004400

080018c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <MX_USART3_UART_Init+0x5c>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_USART3_UART_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_USART3_UART_Init+0x58>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_USART3_UART_Init+0x58>)
 8001908:	f009 fa4a 	bl	800ada0 <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001912:	f001 fbdf 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000714 	.word	0x20000714
 8001920:	40004800 	.word	0x40004800

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	4b7a      	ldr	r3, [pc, #488]	; (8001b24 <MX_GPIO_Init+0x200>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a79      	ldr	r2, [pc, #484]	; (8001b24 <MX_GPIO_Init+0x200>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b77      	ldr	r3, [pc, #476]	; (8001b24 <MX_GPIO_Init+0x200>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001952:	4b74      	ldr	r3, [pc, #464]	; (8001b24 <MX_GPIO_Init+0x200>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a73      	ldr	r2, [pc, #460]	; (8001b24 <MX_GPIO_Init+0x200>)
 8001958:	f043 0320 	orr.w	r3, r3, #32
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b71      	ldr	r3, [pc, #452]	; (8001b24 <MX_GPIO_Init+0x200>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0320 	and.w	r3, r3, #32
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800196a:	4b6e      	ldr	r3, [pc, #440]	; (8001b24 <MX_GPIO_Init+0x200>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a6d      	ldr	r2, [pc, #436]	; (8001b24 <MX_GPIO_Init+0x200>)
 8001970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b6b      	ldr	r3, [pc, #428]	; (8001b24 <MX_GPIO_Init+0x200>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b68      	ldr	r3, [pc, #416]	; (8001b24 <MX_GPIO_Init+0x200>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a67      	ldr	r2, [pc, #412]	; (8001b24 <MX_GPIO_Init+0x200>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b65      	ldr	r3, [pc, #404]	; (8001b24 <MX_GPIO_Init+0x200>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	4b62      	ldr	r3, [pc, #392]	; (8001b24 <MX_GPIO_Init+0x200>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a61      	ldr	r2, [pc, #388]	; (8001b24 <MX_GPIO_Init+0x200>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <MX_GPIO_Init+0x200>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b2:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <MX_GPIO_Init+0x200>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a5b      	ldr	r2, [pc, #364]	; (8001b24 <MX_GPIO_Init+0x200>)
 80019b8:	f043 0308 	orr.w	r3, r3, #8
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <MX_GPIO_Init+0x200>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ca:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <MX_GPIO_Init+0x200>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a55      	ldr	r2, [pc, #340]	; (8001b24 <MX_GPIO_Init+0x200>)
 80019d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <MX_GPIO_Init+0x200>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2108      	movs	r1, #8
 80019e6:	4850      	ldr	r0, [pc, #320]	; (8001b28 <MX_GPIO_Init+0x204>)
 80019e8:	f005 fdb6 	bl	8007558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_2A_GPIO_Port, MOTOR_2A_Pin, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f2:	484e      	ldr	r0, [pc, #312]	; (8001b2c <MX_GPIO_Init+0x208>)
 80019f4:	f005 fdb0 	bl	8007558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|MOTOR_1_B_Pin|MOTOR_1_A_Pin|S2_Pin, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	f44f 411c 	mov.w	r1, #39936	; 0x9c00
 80019fe:	484c      	ldr	r0, [pc, #304]	; (8001b30 <MX_GPIO_Init+0x20c>)
 8001a00:	f005 fdaa 	bl	8007558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2110      	movs	r1, #16
 8001a08:	484a      	ldr	r0, [pc, #296]	; (8001b34 <MX_GPIO_Init+0x210>)
 8001a0a:	f005 fda5 	bl	8007558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	4619      	mov	r1, r3
 8001a24:	4844      	ldr	r0, [pc, #272]	; (8001b38 <MX_GPIO_Init+0x214>)
 8001a26:	f005 fbd3 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4839      	ldr	r0, [pc, #228]	; (8001b28 <MX_GPIO_Init+0x204>)
 8001a42:	f005 fbc5 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH_2_Pin SWITCH_3_Pin SWITCH_6_Pin */
  GPIO_InitStruct.Pin = SWITCH_2_Pin|SWITCH_3_Pin|SWITCH_6_Pin;
 8001a46:	f640 0303 	movw	r3, #2051	; 0x803
 8001a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4837      	ldr	r0, [pc, #220]	; (8001b38 <MX_GPIO_Init+0x214>)
 8001a5c:	f005 fbb8 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_4_Pin */
  GPIO_InitStruct.Pin = SWITCH_4_Pin;
 8001a60:	2310      	movs	r3, #16
 8001a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SWITCH_4_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	482f      	ldr	r0, [pc, #188]	; (8001b30 <MX_GPIO_Init+0x20c>)
 8001a74:	f005 fbac 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_2B_Pin */
  GPIO_InitStruct.Pin = MOTOR_2B_Pin;
 8001a78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MOTOR_2B_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4827      	ldr	r0, [pc, #156]	; (8001b2c <MX_GPIO_Init+0x208>)
 8001a8e:	f005 fb9f 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_2A_Pin */
  GPIO_InitStruct.Pin = MOTOR_2A_Pin;
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MOTOR_2A_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4820      	ldr	r0, [pc, #128]	; (8001b2c <MX_GPIO_Init+0x208>)
 8001aac:	f005 fb90 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Pin */
  GPIO_InitStruct.Pin = IR_Pin;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	481e      	ldr	r0, [pc, #120]	; (8001b3c <MX_GPIO_Init+0x218>)
 8001ac4:	f005 fb84 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin MOTOR_1_B_Pin MOTOR_1_A_Pin S2_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|MOTOR_1_B_Pin|MOTOR_1_A_Pin|S2_Pin;
 8001ac8:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4813      	ldr	r0, [pc, #76]	; (8001b30 <MX_GPIO_Init+0x20c>)
 8001ae2:	f005 fb75 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH_5_Pin SWITCH_1_Pin */
  GPIO_InitStruct.Pin = SWITCH_5_Pin|SWITCH_1_Pin;
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4619      	mov	r1, r3
 8001af8:	480e      	ldr	r0, [pc, #56]	; (8001b34 <MX_GPIO_Init+0x210>)
 8001afa:	f005 fb69 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 8001afe:	2310      	movs	r3, #16
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	4619      	mov	r1, r3
 8001b14:	4807      	ldr	r0, [pc, #28]	; (8001b34 <MX_GPIO_Init+0x210>)
 8001b16:	f005 fb5b 	bl	80071d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b1a:	bf00      	nop
 8001b1c:	3730      	adds	r7, #48	; 0x30
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40021400 	.word	0x40021400
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020c00 	.word	0x40020c00
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40021800 	.word	0x40021800

08001b40 <MotorUp>:

/* USER CODE BEGIN 4 */
void MotorUp(void){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_1_A_GPIO_Port, MOTOR_1_A_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4a:	4807      	ldr	r0, [pc, #28]	; (8001b68 <MotorUp+0x28>)
 8001b4c:	f005 fd04 	bl	8007558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_1_B_GPIO_Port, MOTOR_1_B_Pin, GPIO_PIN_SET);
 8001b50:	2201      	movs	r2, #1
 8001b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b56:	4804      	ldr	r0, [pc, #16]	; (8001b68 <MotorUp+0x28>)
 8001b58:	f005 fcfe 	bl	8007558 <HAL_GPIO_WritePin>
	TIM3 ->CCR4 = 40;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <MotorUp+0x2c>)
 8001b5e:	2228      	movs	r2, #40	; 0x28
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40000400 	.word	0x40000400

08001b70 <MotorDown>:
void MotorDown(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(MOTOR_1_A_GPIO_Port, MOTOR_1_A_Pin, GPIO_PIN_SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b7a:	4807      	ldr	r0, [pc, #28]	; (8001b98 <MotorDown+0x28>)
 8001b7c:	f005 fcec 	bl	8007558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_1_B_GPIO_Port, MOTOR_1_B_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b86:	4804      	ldr	r0, [pc, #16]	; (8001b98 <MotorDown+0x28>)
 8001b88:	f005 fce6 	bl	8007558 <HAL_GPIO_WritePin>
	TIM3 ->CCR4 = 65;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <MotorDown+0x2c>)
 8001b8e:	2241      	movs	r2, #65	; 0x41
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40000400 	.word	0x40000400

08001ba0 <MotorStop>:
void MotorStop(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	TIM3 -> CCR4 = 1;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MotorStop+0x28>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(MOTOR_1_A_GPIO_Port, MOTOR_1_A_Pin, GPIO_PIN_SET);
 8001baa:	2201      	movs	r2, #1
 8001bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb0:	4806      	ldr	r0, [pc, #24]	; (8001bcc <MotorStop+0x2c>)
 8001bb2:	f005 fcd1 	bl	8007558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_1_B_GPIO_Port, MOTOR_1_B_Pin, GPIO_PIN_SET);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MotorStop+0x2c>)
 8001bbe:	f005 fccb 	bl	8007558 <HAL_GPIO_WritePin>
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
//	if(htim->Instance==TIM5){
//		Motor.my_pos = ((int32_t)__HAL_TIM_GET_COUNTER(htim)) / 100;
//	}
	if(htim-> Instance == TIM13){
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d145      	bne.n	8001c6e <HAL_TIM_IC_CaptureCallback+0x9e>
		  if(is_first == 0){
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0xac>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10b      	bne.n	8001c02 <HAL_TIM_IC_CaptureCallback+0x32>
			  ic1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001bea:	2100      	movs	r1, #0
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f008 fb71 	bl	800a2d4 <HAL_TIM_ReadCapturedValue>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001bf8:	601a      	str	r2, [r3, #0]
			  is_first = 1;
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0xac>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
			  freq = dif;
			  is_first = 0;
		  }

	}
}
 8001c00:	e035      	b.n	8001c6e <HAL_TIM_IC_CaptureCallback+0x9e>
			  ic2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001c02:	2100      	movs	r1, #0
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f008 fb65 	bl	800a2d4 <HAL_TIM_ReadCapturedValue>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001c10:	601a      	str	r2, [r3, #0]
			  if(ic2>ic1)
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dd0c      	ble.n	8001c38 <HAL_TIM_IC_CaptureCallback+0x68>
				  dif = ic2 - ic1;
 8001c1e:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001c32:	edc3 7a00 	vstr	s15, [r3]
 8001c36:	e013      	b.n	8001c60 <HAL_TIM_IC_CaptureCallback+0x90>
			  else if(ic1>ic2){
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dd0d      	ble.n	8001c60 <HAL_TIM_IC_CaptureCallback+0x90>
				  dif = (0xffffffff-ic1) + ic2;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001c5c:	edc3 7a00 	vstr	s15, [r3]
			  freq = dif;
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001c66:	6013      	str	r3, [r2, #0]
			  is_first = 0;
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0xac>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40001c00 	.word	0x40001c00
 8001c7c:	200007e4 	.word	0x200007e4
 8001c80:	200007e8 	.word	0x200007e8
 8001c84:	200007ec 	.word	0x200007ec
 8001c88:	200007dc 	.word	0x200007dc
 8001c8c:	200007d0 	.word	0x200007d0

08001c90 <Color_Sensor>:
//	}else{
//		MotorStop();
//	}
//}

int Color_Sensor(){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	2110      	movs	r1, #16
 8001c98:	483f      	ldr	r0, [pc, #252]	; (8001d98 <Color_Sensor+0x108>)
 8001c9a:	f005 fc5d 	bl	8007558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ca4:	483d      	ldr	r0, [pc, #244]	; (8001d9c <Color_Sensor+0x10c>)
 8001ca6:	f005 fc57 	bl	8007558 <HAL_GPIO_WritePin>
	// blue check
//	color_flag=1;
	HAL_TIM_IC_Start_IT(&htim13, TIM_CHANNEL_1);
 8001caa:	2100      	movs	r1, #0
 8001cac:	483c      	ldr	r0, [pc, #240]	; (8001da0 <Color_Sensor+0x110>)
 8001cae:	f007 fcff 	bl	80096b0 <HAL_TIM_IC_Start_IT>
	HAL_Delay(10);
 8001cb2:	200a      	movs	r0, #10
 8001cb4:	f004 ffcc 	bl	8006c50 <HAL_Delay>
	red_freq=freq;
 8001cb8:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <Color_Sensor+0x114>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a3a      	ldr	r2, [pc, #232]	; (8001da8 <Color_Sensor+0x118>)
 8001cbe:	6013      	str	r3, [r2, #0]
//	color_flag=0;
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2110      	movs	r1, #16
 8001cc4:	4834      	ldr	r0, [pc, #208]	; (8001d98 <Color_Sensor+0x108>)
 8001cc6:	f005 fc47 	bl	8007558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cd0:	4832      	ldr	r0, [pc, #200]	; (8001d9c <Color_Sensor+0x10c>)
 8001cd2:	f005 fc41 	bl	8007558 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001cd6:	200a      	movs	r0, #10
 8001cd8:	f004 ffba 	bl	8006c50 <HAL_Delay>
	blue_freq=freq;
 8001cdc:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <Color_Sensor+0x114>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a32      	ldr	r2, [pc, #200]	; (8001dac <Color_Sensor+0x11c>)
 8001ce2:	6013      	str	r3, [r2, #0]
	HAL_TIM_IC_Stop_IT(&htim13, TIM_CHANNEL_1);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	482e      	ldr	r0, [pc, #184]	; (8001da0 <Color_Sensor+0x110>)
 8001ce8:	f007 fe32 	bl	8009950 <HAL_TIM_IC_Stop_IT>
	if(blue_freq>=17000 && red_freq<=7200){
 8001cec:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <Color_Sensor+0x11c>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001db0 <Color_Sensor+0x120>
 8001cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	db0d      	blt.n	8001d1c <Color_Sensor+0x8c>
 8001d00:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <Color_Sensor+0x118>)
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001db4 <Color_Sensor+0x124>
 8001d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d12:	d803      	bhi.n	8001d1c <Color_Sensor+0x8c>
		//blue ball
		color_flag=-1;
 8001d14:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <Color_Sensor+0x128>)
 8001d16:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1a:	601a      	str	r2, [r3, #0]
	}
	if(red_freq>=14000 && blue_freq<=5500){
 8001d1c:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <Color_Sensor+0x118>)
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001dbc <Color_Sensor+0x12c>
 8001d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2e:	db0c      	blt.n	8001d4a <Color_Sensor+0xba>
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <Color_Sensor+0x11c>)
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001dc0 <Color_Sensor+0x130>
 8001d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	d802      	bhi.n	8001d4a <Color_Sensor+0xba>
		//red ball
		color_flag=1;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <Color_Sensor+0x128>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
	}
//	if(red_freq<=5000 && blue_freq<=5100){
//		// purple ball
//		color_flag=0;
//	}
	if(abs(red_freq-blue_freq)<=2500){
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <Color_Sensor+0x118>)
 8001d4c:	ed93 7a00 	vldr	s14, [r3]
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <Color_Sensor+0x11c>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d5e:	ee17 2a90 	vmov	r2, s15
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <Color_Sensor+0x134>)
 8001d64:	429a      	cmp	r2, r3
 8001d66:	db12      	blt.n	8001d8e <Color_Sensor+0xfe>
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <Color_Sensor+0x118>)
 8001d6a:	ed93 7a00 	vldr	s14, [r3]
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <Color_Sensor+0x11c>)
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d7c:	ee17 2a90 	vmov	r2, s15
 8001d80:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001d84:	429a      	cmp	r2, r3
 8001d86:	dc02      	bgt.n	8001d8e <Color_Sensor+0xfe>
		color_flag=0;
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <Color_Sensor+0x128>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
	}
	return color_flag;
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <Color_Sensor+0x128>)
 8001d90:	681b      	ldr	r3, [r3, #0]

}
 8001d92:	4618      	mov	r0, r3
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	20000640 	.word	0x20000640
 8001da4:	200007d0 	.word	0x200007d0
 8001da8:	200007d8 	.word	0x200007d8
 8001dac:	200007d4 	.word	0x200007d4
 8001db0:	4684d000 	.word	0x4684d000
 8001db4:	45e10000 	.word	0x45e10000
 8001db8:	200007fc 	.word	0x200007fc
 8001dbc:	465ac000 	.word	0x465ac000
 8001dc0:	45abe000 	.word	0x45abe000
 8001dc4:	fffff63c 	.word	0xfffff63c

08001dc8 <Wheeltask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Wheeltask */
void Wheeltask(void const * argument)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f00a f801 	bl	800bdd8 <osDelay>
 8001dd6:	e7fb      	b.n	8001dd0 <Wheeltask+0x8>

08001dd8 <task2_joystick>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_joystick */
void task2_joystick(void const * argument)
{
 8001dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ddc:	b0a0      	sub	sp, #128	; 0x80
 8001dde:	af02      	add	r7, sp, #8
 8001de0:	6778      	str	r0, [r7, #116]	; 0x74
  /* USER CODE BEGIN task2_joystick */
  /* Infinite loop */
  for(;;)
  {
	  count = TIM2->CNT;
 8001de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b8d      	ldr	r3, [pc, #564]	; (8002020 <task2_joystick+0x248>)
 8001dec:	601a      	str	r2, [r3, #0]
		  spi_enable;
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df4:	488b      	ldr	r0, [pc, #556]	; (8002024 <task2_joystick+0x24c>)
 8001df6:	f005 fbaf 	bl	8007558 <HAL_GPIO_WritePin>
		  HAL_SPI_TransmitReceive(&hspi1, HC_PS2_TX, HC_PS2_RX, 9, 10);
 8001dfa:	230a      	movs	r3, #10
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2309      	movs	r3, #9
 8001e00:	4a89      	ldr	r2, [pc, #548]	; (8002028 <task2_joystick+0x250>)
 8001e02:	498a      	ldr	r1, [pc, #552]	; (800202c <task2_joystick+0x254>)
 8001e04:	488a      	ldr	r0, [pc, #552]	; (8002030 <task2_joystick+0x258>)
 8001e06:	f006 feae 	bl	8008b66 <HAL_SPI_TransmitReceive>
		  spi_disable;
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e10:	4884      	ldr	r0, [pc, #528]	; (8002024 <task2_joystick+0x24c>)
 8001e12:	f005 fba1 	bl	8007558 <HAL_GPIO_WritePin>
		  PS2.LY=-(HC_PS2_RX[8]-127);  //left_y;
 8001e16:	4b84      	ldr	r3, [pc, #528]	; (8002028 <task2_joystick+0x250>)
 8001e18:	7a1b      	ldrb	r3, [r3, #8]
 8001e1a:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 8001e1e:	4b85      	ldr	r3, [pc, #532]	; (8002034 <task2_joystick+0x25c>)
 8001e20:	601a      	str	r2, [r3, #0]
		  PS2.LX=(HC_PS2_RX[7]-127);  //left_joy
 8001e22:	4b81      	ldr	r3, [pc, #516]	; (8002028 <task2_joystick+0x250>)
 8001e24:	79db      	ldrb	r3, [r3, #7]
 8001e26:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8001e2a:	4b82      	ldr	r3, [pc, #520]	; (8002034 <task2_joystick+0x25c>)
 8001e2c:	605a      	str	r2, [r3, #4]
		  PS2.RY=HC_PS2_RX[6]-128;
 8001e2e:	4b7e      	ldr	r3, [pc, #504]	; (8002028 <task2_joystick+0x250>)
 8001e30:	799b      	ldrb	r3, [r3, #6]
 8001e32:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 8001e36:	4b7f      	ldr	r3, [pc, #508]	; (8002034 <task2_joystick+0x25c>)
 8001e38:	609a      	str	r2, [r3, #8]
		  PS2.RX=HC_PS2_RX[5]-128;
 8001e3a:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <task2_joystick+0x250>)
 8001e3c:	795b      	ldrb	r3, [r3, #5]
 8001e3e:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 8001e42:	4b7c      	ldr	r3, [pc, #496]	; (8002034 <task2_joystick+0x25c>)
 8001e44:	60da      	str	r2, [r3, #12]
		  PS2.RX = right_joy;
 8001e46:	4b7c      	ldr	r3, [pc, #496]	; (8002038 <task2_joystick+0x260>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b7a      	ldr	r3, [pc, #488]	; (8002034 <task2_joystick+0x25c>)
 8001e4c:	60da      	str	r2, [r3, #12]
		  PS2.X=PS2.LX/(float)128;
 8001e4e:	4b79      	ldr	r3, [pc, #484]	; (8002034 <task2_joystick+0x25c>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800203c <task2_joystick+0x264>
 8001e5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e62:	ee16 0a90 	vmov	r0, s13
 8001e66:	f7fe fb3f 	bl	80004e8 <__aeabi_f2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4971      	ldr	r1, [pc, #452]	; (8002034 <task2_joystick+0x25c>)
 8001e70:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  PS2.Y=PS2.LY/(float)128;
 8001e74:	4b6f      	ldr	r3, [pc, #444]	; (8002034 <task2_joystick+0x25c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e80:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800203c <task2_joystick+0x264>
 8001e84:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e88:	ee16 0a90 	vmov	r0, s13
 8001e8c:	f7fe fb2c 	bl	80004e8 <__aeabi_f2d>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4967      	ldr	r1, [pc, #412]	; (8002034 <task2_joystick+0x25c>)
 8001e96:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  	  speed=sqrt(PS2.X*PS2.X+PS2.Y*PS2.Y);
 8001e9a:	4b66      	ldr	r3, [pc, #408]	; (8002034 <task2_joystick+0x25c>)
 8001e9c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <task2_joystick+0x25c>)
 8001ea2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ea6:	f7fe fb77 	bl	8000598 <__aeabi_dmul>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4614      	mov	r4, r2
 8001eb0:	461d      	mov	r5, r3
 8001eb2:	4b60      	ldr	r3, [pc, #384]	; (8002034 <task2_joystick+0x25c>)
 8001eb4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001eb8:	4b5e      	ldr	r3, [pc, #376]	; (8002034 <task2_joystick+0x25c>)
 8001eba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ebe:	f7fe fb6b 	bl	8000598 <__aeabi_dmul>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	4629      	mov	r1, r5
 8001eca:	f7fe f9af 	bl	800022c <__adddf3>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	ec43 2b17 	vmov	d7, r2, r3
 8001ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8001eda:	eef0 0a67 	vmov.f32	s1, s15
 8001ede:	f00b f973 	bl	800d1c8 <sqrt>
 8001ee2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ee6:	eef0 7a60 	vmov.f32	s15, s1
 8001eea:	4b55      	ldr	r3, [pc, #340]	; (8002040 <task2_joystick+0x268>)
 8001eec:	ed83 7b00 	vstr	d7, [r3]
	  	  degree_a=atan2(PS2.Y,PS2.X);
 8001ef0:	4b50      	ldr	r3, [pc, #320]	; (8002034 <task2_joystick+0x25c>)
 8001ef2:	ed93 7b06 	vldr	d7, [r3, #24]
 8001ef6:	4b4f      	ldr	r3, [pc, #316]	; (8002034 <task2_joystick+0x25c>)
 8001ef8:	ed93 6b04 	vldr	d6, [r3, #16]
 8001efc:	eeb0 1a46 	vmov.f32	s2, s12
 8001f00:	eef0 1a66 	vmov.f32	s3, s13
 8001f04:	eeb0 0a47 	vmov.f32	s0, s14
 8001f08:	eef0 0a67 	vmov.f32	s1, s15
 8001f0c:	f00b f95a 	bl	800d1c4 <atan2>
 8001f10:	eeb0 7a40 	vmov.f32	s14, s0
 8001f14:	eef0 7a60 	vmov.f32	s15, s1
 8001f18:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <task2_joystick+0x26c>)
 8001f1a:	ed83 7b00 	vstr	d7, [r3]
	  	  ML=sin(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 8001f1e:	4b49      	ldr	r3, [pc, #292]	; (8002044 <task2_joystick+0x26c>)
 8001f20:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f24:	4b48      	ldr	r3, [pc, #288]	; (8002048 <task2_joystick+0x270>)
 8001f26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <task2_joystick+0x274>)
 8001f30:	f7fe fc5c 	bl	80007ec <__aeabi_ddiv>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4620      	mov	r0, r4
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	f7fe f974 	bl	8000228 <__aeabi_dsub>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	ec43 2b17 	vmov	d7, r2, r3
 8001f48:	eeb0 0a47 	vmov.f32	s0, s14
 8001f4c:	eef0 0a67 	vmov.f32	s1, s15
 8001f50:	f00b f9ba 	bl	800d2c8 <sin>
 8001f54:	ec51 0b10 	vmov	r0, r1, d0
 8001f58:	4b39      	ldr	r3, [pc, #228]	; (8002040 <task2_joystick+0x268>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe fb1b 	bl	8000598 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	4b38      	ldr	r3, [pc, #224]	; (8002050 <task2_joystick+0x278>)
 8001f70:	f7fe fb12 	bl	8000598 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4b35      	ldr	r3, [pc, #212]	; (8002054 <task2_joystick+0x27c>)
 8001f7e:	e9c3 0100 	strd	r0, r1, [r3]
	  	  MR=cos(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 8001f82:	4b30      	ldr	r3, [pc, #192]	; (8002044 <task2_joystick+0x26c>)
 8001f84:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f88:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <task2_joystick+0x270>)
 8001f8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <task2_joystick+0x274>)
 8001f94:	f7fe fc2a 	bl	80007ec <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	f7fe f942 	bl	8000228 <__aeabi_dsub>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	ec43 2b17 	vmov	d7, r2, r3
 8001fac:	eeb0 0a47 	vmov.f32	s0, s14
 8001fb0:	eef0 0a67 	vmov.f32	s1, s15
 8001fb4:	f00b f934 	bl	800d220 <cos>
 8001fb8:	ec51 0b10 	vmov	r0, r1, d0
 8001fbc:	4b20      	ldr	r3, [pc, #128]	; (8002040 <task2_joystick+0x268>)
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	f7fe fae9 	bl	8000598 <__aeabi_dmul>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <task2_joystick+0x278>)
 8001fd4:	f7fe fae0 	bl	8000598 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <task2_joystick+0x280>)
 8001fe2:	e9c3 0100 	strd	r0, r1, [r3]
	  	  if(HC_PS2_RX[4]==251){
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <task2_joystick+0x250>)
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	2bfb      	cmp	r3, #251	; 0xfb
 8001fec:	d103      	bne.n	8001ff6 <task2_joystick+0x21e>
	  		  BLDC = 1;
 8001fee:	4a1b      	ldr	r2, [pc, #108]	; (800205c <task2_joystick+0x284>)
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	e042      	b.n	800207c <task2_joystick+0x2a4>
	  	  }else if(HC_PS2_RX[4]==254){
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <task2_joystick+0x250>)
 8001ff8:	791b      	ldrb	r3, [r3, #4]
 8001ffa:	2bfe      	cmp	r3, #254	; 0xfe
 8001ffc:	d103      	bne.n	8002006 <task2_joystick+0x22e>
	  		  BLDC = 2;
 8001ffe:	4a17      	ldr	r2, [pc, #92]	; (800205c <task2_joystick+0x284>)
 8002000:	2302      	movs	r3, #2
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	e03a      	b.n	800207c <task2_joystick+0x2a4>
	  	  }else if(HC_PS2_RX[4]==247){
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <task2_joystick+0x250>)
 8002008:	791b      	ldrb	r3, [r3, #4]
 800200a:	2bf7      	cmp	r3, #247	; 0xf7
 800200c:	d12c      	bne.n	8002068 <task2_joystick+0x290>
	  		  yellow=1;
 800200e:	4a14      	ldr	r2, [pc, #80]	; (8002060 <task2_joystick+0x288>)
 8002010:	2301      	movs	r3, #1
 8002012:	6013      	str	r3, [r2, #0]
	  		  target_pos = 1820;
 8002014:	4a13      	ldr	r2, [pc, #76]	; (8002064 <task2_joystick+0x28c>)
 8002016:	f240 731c 	movw	r3, #1820	; 0x71c
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	e02e      	b.n	800207c <task2_joystick+0x2a4>
 800201e:	bf00      	nop
 8002020:	20000828 	.word	0x20000828
 8002024:	40020000 	.word	0x40020000
 8002028:	2000082c 	.word	0x2000082c
 800202c:	20000008 	.word	0x20000008
 8002030:	200003c8 	.word	0x200003c8
 8002034:	20000868 	.word	0x20000868
 8002038:	20001dfc 	.word	0x20001dfc
 800203c:	43000000 	.word	0x43000000
 8002040:	200007c0 	.word	0x200007c0
 8002044:	200007c8 	.word	0x200007c8
 8002048:	20000000 	.word	0x20000000
 800204c:	40100000 	.word	0x40100000
 8002050:	40d00000 	.word	0x40d00000
 8002054:	200007b0 	.word	0x200007b0
 8002058:	200007b8 	.word	0x200007b8
 800205c:	200007f8 	.word	0x200007f8
 8002060:	200007f0 	.word	0x200007f0
 8002064:	2000081c 	.word	0x2000081c
	  	  }else if(HC_PS2_RX[4]==253){
 8002068:	4b9d      	ldr	r3, [pc, #628]	; (80022e0 <task2_joystick+0x508>)
 800206a:	791b      	ldrb	r3, [r3, #4]
 800206c:	2bfd      	cmp	r3, #253	; 0xfd
 800206e:	d105      	bne.n	800207c <task2_joystick+0x2a4>
	  		  yellow=2;
 8002070:	4a9c      	ldr	r2, [pc, #624]	; (80022e4 <task2_joystick+0x50c>)
 8002072:	2302      	movs	r3, #2
 8002074:	6013      	str	r3, [r2, #0]
	  		  target_pos = 0;
 8002076:	4a9c      	ldr	r2, [pc, #624]	; (80022e8 <task2_joystick+0x510>)
 8002078:	2300      	movs	r3, #0
 800207a:	6013      	str	r3, [r2, #0]
	  	  }
	  	  if((abs(PS2.LY) > 5 || abs(PS2.LX)>5 )&& abs(PS2.RX)<=5){
 800207c:	4b9b      	ldr	r3, [pc, #620]	; (80022ec <task2_joystick+0x514>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	bfb8      	it	lt
 8002084:	425b      	neglt	r3, r3
 8002086:	2b05      	cmp	r3, #5
 8002088:	dc07      	bgt.n	800209a <task2_joystick+0x2c2>
 800208a:	4b98      	ldr	r3, [pc, #608]	; (80022ec <task2_joystick+0x514>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	bfb8      	it	lt
 8002092:	425b      	neglt	r3, r3
 8002094:	2b05      	cmp	r3, #5
 8002096:	f340 81f2 	ble.w	800247e <task2_joystick+0x6a6>
 800209a:	4b94      	ldr	r3, [pc, #592]	; (80022ec <task2_joystick+0x514>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f113 0f05 	cmn.w	r3, #5
 80020a2:	f2c0 81ec 	blt.w	800247e <task2_joystick+0x6a6>
 80020a6:	4b91      	ldr	r3, [pc, #580]	; (80022ec <task2_joystick+0x514>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	f300 81e7 	bgt.w	800247e <task2_joystick+0x6a6>
	  		  if(ML>12000 || MR>12000){
 80020b0:	4b8f      	ldr	r3, [pc, #572]	; (80022f0 <task2_joystick+0x518>)
 80020b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020b6:	a386      	add	r3, pc, #536	; (adr r3, 80022d0 <task2_joystick+0x4f8>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe fcfc 	bl	8000ab8 <__aeabi_dcmpgt>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10a      	bne.n	80020dc <task2_joystick+0x304>
 80020c6:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <task2_joystick+0x51c>)
 80020c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020cc:	a380      	add	r3, pc, #512	; (adr r3, 80022d0 <task2_joystick+0x4f8>)
 80020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d2:	f7fe fcf1 	bl	8000ab8 <__aeabi_dcmpgt>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d048      	beq.n	800216e <task2_joystick+0x396>
	  			  if(ML > MR){
 80020dc:	4b84      	ldr	r3, [pc, #528]	; (80022f0 <task2_joystick+0x518>)
 80020de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e2:	4b84      	ldr	r3, [pc, #528]	; (80022f4 <task2_joystick+0x51c>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe fce6 	bl	8000ab8 <__aeabi_dcmpgt>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01e      	beq.n	8002130 <task2_joystick+0x358>
	  				  MR=MR/ML*12000;
 80020f2:	4b80      	ldr	r3, [pc, #512]	; (80022f4 <task2_joystick+0x51c>)
 80020f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f8:	4b7d      	ldr	r3, [pc, #500]	; (80022f0 <task2_joystick+0x518>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fb75 	bl	80007ec <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	a371      	add	r3, pc, #452	; (adr r3, 80022d0 <task2_joystick+0x4f8>)
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	f7fe fa42 	bl	8000598 <__aeabi_dmul>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	4b75      	ldr	r3, [pc, #468]	; (80022f4 <task2_joystick+0x51c>)
 800211e:	e9c3 0100 	strd	r0, r1, [r3]
	  				  ML=12000;
 8002122:	4973      	ldr	r1, [pc, #460]	; (80022f0 <task2_joystick+0x518>)
 8002124:	a36a      	add	r3, pc, #424	; (adr r3, 80022d0 <task2_joystick+0x4f8>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	e9c1 2300 	strd	r2, r3, [r1]
	  			  if(ML > MR){
 800212e:	e171      	b.n	8002414 <task2_joystick+0x63c>

	  			  }
	  			  else{
	  				  ML=(ML/MR)*12000;
 8002130:	4b6f      	ldr	r3, [pc, #444]	; (80022f0 <task2_joystick+0x518>)
 8002132:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002136:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <task2_joystick+0x51c>)
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	f7fe fb56 	bl	80007ec <__aeabi_ddiv>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	a361      	add	r3, pc, #388	; (adr r3, 80022d0 <task2_joystick+0x4f8>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	f7fe fa23 	bl	8000598 <__aeabi_dmul>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	4b65      	ldr	r3, [pc, #404]	; (80022f0 <task2_joystick+0x518>)
 800215c:	e9c3 0100 	strd	r0, r1, [r3]
	  				  MR=12000;
 8002160:	4964      	ldr	r1, [pc, #400]	; (80022f4 <task2_joystick+0x51c>)
 8002162:	a35b      	add	r3, pc, #364	; (adr r3, 80022d0 <task2_joystick+0x4f8>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	e9c1 2300 	strd	r2, r3, [r1]
	  			  if(ML > MR){
 800216c:	e152      	b.n	8002414 <task2_joystick+0x63c>
	  			  }
	  		  }
	  		  else if(ML<-12000 || MR<-12000){
 800216e:	4b60      	ldr	r3, [pc, #384]	; (80022f0 <task2_joystick+0x518>)
 8002170:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002174:	a358      	add	r3, pc, #352	; (adr r3, 80022d8 <task2_joystick+0x500>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	f7fe fc7f 	bl	8000a7c <__aeabi_dcmplt>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <task2_joystick+0x3c2>
 8002184:	4b5b      	ldr	r3, [pc, #364]	; (80022f4 <task2_joystick+0x51c>)
 8002186:	e9d3 0100 	ldrd	r0, r1, [r3]
 800218a:	a353      	add	r3, pc, #332	; (adr r3, 80022d8 <task2_joystick+0x500>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe fc74 	bl	8000a7c <__aeabi_dcmplt>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d054      	beq.n	8002244 <task2_joystick+0x46c>
	  			  if(ML < MR){
 800219a:	4b55      	ldr	r3, [pc, #340]	; (80022f0 <task2_joystick+0x518>)
 800219c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a0:	4b54      	ldr	r3, [pc, #336]	; (80022f4 <task2_joystick+0x51c>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a6:	f7fe fc69 	bl	8000a7c <__aeabi_dcmplt>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d024      	beq.n	80021fa <task2_joystick+0x422>
	  				  MR=-MR/ML*12000;
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <task2_joystick+0x51c>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80021b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80021bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021be:	4b4c      	ldr	r3, [pc, #304]	; (80022f0 <task2_joystick+0x518>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80021c8:	f7fe fb10 	bl	80007ec <__aeabi_ddiv>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	a33e      	add	r3, pc, #248	; (adr r3, 80022d0 <task2_joystick+0x4f8>)
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	f7fe f9dd 	bl	8000598 <__aeabi_dmul>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <task2_joystick+0x51c>)
 80021e8:	e9c3 0100 	strd	r0, r1, [r3]
	  				  ML=-12000;
 80021ec:	4940      	ldr	r1, [pc, #256]	; (80022f0 <task2_joystick+0x518>)
 80021ee:	a33a      	add	r3, pc, #232	; (adr r3, 80022d8 <task2_joystick+0x500>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	e9c1 2300 	strd	r2, r3, [r1]
	  			  if(ML < MR){
 80021f8:	e10c      	b.n	8002414 <task2_joystick+0x63c>

	  			  }
	  			  else{
	  				  ML=-ML/MR*12000;
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <task2_joystick+0x518>)
 80021fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002200:	663a      	str	r2, [r7, #96]	; 0x60
 8002202:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002206:	667b      	str	r3, [r7, #100]	; 0x64
 8002208:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <task2_joystick+0x51c>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002212:	f7fe faeb 	bl	80007ec <__aeabi_ddiv>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	a32c      	add	r3, pc, #176	; (adr r3, 80022d0 <task2_joystick+0x4f8>)
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	f7fe f9b8 	bl	8000598 <__aeabi_dmul>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <task2_joystick+0x518>)
 8002232:	e9c3 0100 	strd	r0, r1, [r3]
	  				  MR=-12000;
 8002236:	492f      	ldr	r1, [pc, #188]	; (80022f4 <task2_joystick+0x51c>)
 8002238:	a327      	add	r3, pc, #156	; (adr r3, 80022d8 <task2_joystick+0x500>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	e9c1 2300 	strd	r2, r3, [r1]
	  			  if(ML < MR){
 8002242:	e0e7      	b.n	8002414 <task2_joystick+0x63c>
	  			  }
	  		  }
	  		  else if(ML>12000 || MR<-12000){
 8002244:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <task2_joystick+0x518>)
 8002246:	e9d3 0100 	ldrd	r0, r1, [r3]
 800224a:	a321      	add	r3, pc, #132	; (adr r3, 80022d0 <task2_joystick+0x4f8>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	f7fe fc32 	bl	8000ab8 <__aeabi_dcmpgt>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10a      	bne.n	8002270 <task2_joystick+0x498>
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <task2_joystick+0x51c>)
 800225c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002260:	a31d      	add	r3, pc, #116	; (adr r3, 80022d8 <task2_joystick+0x500>)
 8002262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002266:	f7fe fc09 	bl	8000a7c <__aeabi_dcmplt>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d068      	beq.n	8002342 <task2_joystick+0x56a>
	  			  if(ML > -MR){
 8002270:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <task2_joystick+0x51c>)
 8002272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002276:	4690      	mov	r8, r2
 8002278:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800227c:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <task2_joystick+0x518>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	4640      	mov	r0, r8
 8002284:	4649      	mov	r1, r9
 8002286:	f7fe fbf9 	bl	8000a7c <__aeabi_dcmplt>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d033      	beq.n	80022f8 <task2_joystick+0x520>
	  				  MR=MR/ML*12000;
 8002290:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <task2_joystick+0x51c>)
 8002292:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002296:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <task2_joystick+0x518>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fe faa6 	bl	80007ec <__aeabi_ddiv>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	a309      	add	r3, pc, #36	; (adr r3, 80022d0 <task2_joystick+0x4f8>)
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	f7fe f973 	bl	8000598 <__aeabi_dmul>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <task2_joystick+0x51c>)
 80022bc:	e9c3 0100 	strd	r0, r1, [r3]
	  				  ML=12000;
 80022c0:	490b      	ldr	r1, [pc, #44]	; (80022f0 <task2_joystick+0x518>)
 80022c2:	a303      	add	r3, pc, #12	; (adr r3, 80022d0 <task2_joystick+0x4f8>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	e9c1 2300 	strd	r2, r3, [r1]
	  			  if(ML > -MR){
 80022cc:	e0a2      	b.n	8002414 <task2_joystick+0x63c>
 80022ce:	bf00      	nop
 80022d0:	00000000 	.word	0x00000000
 80022d4:	40c77000 	.word	0x40c77000
 80022d8:	00000000 	.word	0x00000000
 80022dc:	c0c77000 	.word	0xc0c77000
 80022e0:	2000082c 	.word	0x2000082c
 80022e4:	200007f0 	.word	0x200007f0
 80022e8:	2000081c 	.word	0x2000081c
 80022ec:	20000868 	.word	0x20000868
 80022f0:	200007b0 	.word	0x200007b0
 80022f4:	200007b8 	.word	0x200007b8

	  			  }
	  			  else{
	  				  ML=-ML/MR*12000;
 80022f8:	4b93      	ldr	r3, [pc, #588]	; (8002548 <task2_joystick+0x770>)
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002300:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002304:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002306:	4b91      	ldr	r3, [pc, #580]	; (800254c <task2_joystick+0x774>)
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002310:	f7fe fa6c 	bl	80007ec <__aeabi_ddiv>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	a386      	add	r3, pc, #536	; (adr r3, 8002538 <task2_joystick+0x760>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fe f939 	bl	8000598 <__aeabi_dmul>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	4b86      	ldr	r3, [pc, #536]	; (8002548 <task2_joystick+0x770>)
 8002330:	e9c3 0100 	strd	r0, r1, [r3]
	  				  MR=-12000;
 8002334:	4985      	ldr	r1, [pc, #532]	; (800254c <task2_joystick+0x774>)
 8002336:	a382      	add	r3, pc, #520	; (adr r3, 8002540 <task2_joystick+0x768>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	e9c1 2300 	strd	r2, r3, [r1]
	  			  if(ML > -MR){
 8002340:	e068      	b.n	8002414 <task2_joystick+0x63c>
	  			  }
	  		  }
	  		  else if(MR>12000 || ML<-12000){
 8002342:	4b82      	ldr	r3, [pc, #520]	; (800254c <task2_joystick+0x774>)
 8002344:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002348:	a37b      	add	r3, pc, #492	; (adr r3, 8002538 <task2_joystick+0x760>)
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	f7fe fbb3 	bl	8000ab8 <__aeabi_dcmpgt>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <task2_joystick+0x596>
 8002358:	4b7b      	ldr	r3, [pc, #492]	; (8002548 <task2_joystick+0x770>)
 800235a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800235e:	a378      	add	r3, pc, #480	; (adr r3, 8002540 <task2_joystick+0x768>)
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	f7fe fb8a 	bl	8000a7c <__aeabi_dcmplt>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d052      	beq.n	8002414 <task2_joystick+0x63c>
	  			  if(MR > -ML){
 800236e:	4b76      	ldr	r3, [pc, #472]	; (8002548 <task2_joystick+0x770>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	4692      	mov	sl, r2
 8002376:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800237a:	4b74      	ldr	r3, [pc, #464]	; (800254c <task2_joystick+0x774>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	4650      	mov	r0, sl
 8002382:	4659      	mov	r1, fp
 8002384:	f7fe fb7a 	bl	8000a7c <__aeabi_dcmplt>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d01e      	beq.n	80023cc <task2_joystick+0x5f4>
	  				  ML=ML/MR*12000;
 800238e:	4b6e      	ldr	r3, [pc, #440]	; (8002548 <task2_joystick+0x770>)
 8002390:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002394:	4b6d      	ldr	r3, [pc, #436]	; (800254c <task2_joystick+0x774>)
 8002396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239a:	f7fe fa27 	bl	80007ec <__aeabi_ddiv>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	a364      	add	r3, pc, #400	; (adr r3, 8002538 <task2_joystick+0x760>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f8f4 	bl	8000598 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	4b63      	ldr	r3, [pc, #396]	; (8002548 <task2_joystick+0x770>)
 80023ba:	e9c3 0100 	strd	r0, r1, [r3]
	  				  MR=12000;
 80023be:	4963      	ldr	r1, [pc, #396]	; (800254c <task2_joystick+0x774>)
 80023c0:	a35d      	add	r3, pc, #372	; (adr r3, 8002538 <task2_joystick+0x760>)
 80023c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c6:	e9c1 2300 	strd	r2, r3, [r1]
 80023ca:	e023      	b.n	8002414 <task2_joystick+0x63c>

	  			  }
	  			  else{
	  				  MR=-MR/ML*12000;
 80023cc:	4b5f      	ldr	r3, [pc, #380]	; (800254c <task2_joystick+0x774>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	653a      	str	r2, [r7, #80]	; 0x50
 80023d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023d8:	657b      	str	r3, [r7, #84]	; 0x54
 80023da:	4b5b      	ldr	r3, [pc, #364]	; (8002548 <task2_joystick+0x770>)
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80023e4:	f7fe fa02 	bl	80007ec <__aeabi_ddiv>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	a351      	add	r3, pc, #324	; (adr r3, 8002538 <task2_joystick+0x760>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	f7fe f8cf 	bl	8000598 <__aeabi_dmul>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	4b52      	ldr	r3, [pc, #328]	; (800254c <task2_joystick+0x774>)
 8002404:	e9c3 0100 	strd	r0, r1, [r3]
	  				  ML=-12000;
 8002408:	494f      	ldr	r1, [pc, #316]	; (8002548 <task2_joystick+0x770>)
 800240a:	a34d      	add	r3, pc, #308	; (adr r3, 8002540 <task2_joystick+0x768>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	e9c1 2300 	strd	r2, r3, [r1]
	  			  }
	  		  }
	  		  M1.setpoint=-MR;
 8002414:	4b4d      	ldr	r3, [pc, #308]	; (800254c <task2_joystick+0x774>)
 8002416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241a:	64ba      	str	r2, [r7, #72]	; 0x48
 800241c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002420:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002422:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002426:	f7fe fb67 	bl	8000af8 <__aeabi_d2iz>
 800242a:	4603      	mov	r3, r0
 800242c:	b21b      	sxth	r3, r3
 800242e:	4a48      	ldr	r2, [pc, #288]	; (8002550 <task2_joystick+0x778>)
 8002430:	8013      	strh	r3, [r2, #0]
	  		  M2.setpoint=ML;
 8002432:	4b45      	ldr	r3, [pc, #276]	; (8002548 <task2_joystick+0x770>)
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe fb5c 	bl	8000af8 <__aeabi_d2iz>
 8002440:	4603      	mov	r3, r0
 8002442:	b21b      	sxth	r3, r3
 8002444:	4a43      	ldr	r2, [pc, #268]	; (8002554 <task2_joystick+0x77c>)
 8002446:	8013      	strh	r3, [r2, #0]
	  		  M4.setpoint=-ML;
 8002448:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <task2_joystick+0x770>)
 800244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244e:	643a      	str	r2, [r7, #64]	; 0x40
 8002450:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002454:	647b      	str	r3, [r7, #68]	; 0x44
 8002456:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800245a:	f7fe fb4d 	bl	8000af8 <__aeabi_d2iz>
 800245e:	4603      	mov	r3, r0
 8002460:	b21b      	sxth	r3, r3
 8002462:	4a3d      	ldr	r2, [pc, #244]	; (8002558 <task2_joystick+0x780>)
 8002464:	8013      	strh	r3, [r2, #0]
	  		  M3.setpoint=MR;
 8002466:	4b39      	ldr	r3, [pc, #228]	; (800254c <task2_joystick+0x774>)
 8002468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	f7fe fb42 	bl	8000af8 <__aeabi_d2iz>
 8002474:	4603      	mov	r3, r0
 8002476:	b21b      	sxth	r3, r3
 8002478:	4a38      	ldr	r2, [pc, #224]	; (800255c <task2_joystick+0x784>)
 800247a:	8013      	strh	r3, [r2, #0]
 800247c:	e3a9      	b.n	8002bd2 <task2_joystick+0xdfa>
	  	  }
	  	  else if(abs(PS2.LY)<=5 && abs(PS2.LX)<=5 && abs(PS2.RX)>5){
 800247e:	4b38      	ldr	r3, [pc, #224]	; (8002560 <task2_joystick+0x788>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f113 0f05 	cmn.w	r3, #5
 8002486:	db6f      	blt.n	8002568 <task2_joystick+0x790>
 8002488:	4b35      	ldr	r3, [pc, #212]	; (8002560 <task2_joystick+0x788>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b05      	cmp	r3, #5
 800248e:	dc6b      	bgt.n	8002568 <task2_joystick+0x790>
 8002490:	4b33      	ldr	r3, [pc, #204]	; (8002560 <task2_joystick+0x788>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f113 0f05 	cmn.w	r3, #5
 8002498:	db66      	blt.n	8002568 <task2_joystick+0x790>
 800249a:	4b31      	ldr	r3, [pc, #196]	; (8002560 <task2_joystick+0x788>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b05      	cmp	r3, #5
 80024a0:	dc62      	bgt.n	8002568 <task2_joystick+0x790>
 80024a2:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <task2_joystick+0x788>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bfb8      	it	lt
 80024aa:	425b      	neglt	r3, r3
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	dd5b      	ble.n	8002568 <task2_joystick+0x790>
	  		  M1.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 80024b0:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <task2_joystick+0x788>)
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	4613      	mov	r3, r2
 80024b6:	049b      	lsls	r3, r3, #18
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	039b      	lsls	r3, r3, #14
 80024bc:	4619      	mov	r1, r3
 80024be:	4b29      	ldr	r3, [pc, #164]	; (8002564 <task2_joystick+0x78c>)
 80024c0:	fb83 2301 	smull	r2, r3, r3, r1
 80024c4:	115a      	asrs	r2, r3, #5
 80024c6:	17cb      	asrs	r3, r1, #31
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	4a20      	ldr	r2, [pc, #128]	; (8002550 <task2_joystick+0x778>)
 80024ce:	8013      	strh	r3, [r2, #0]
	  		  M2.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 80024d0:	4b23      	ldr	r3, [pc, #140]	; (8002560 <task2_joystick+0x788>)
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	4613      	mov	r3, r2
 80024d6:	049b      	lsls	r3, r3, #18
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	039b      	lsls	r3, r3, #14
 80024dc:	4619      	mov	r1, r3
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <task2_joystick+0x78c>)
 80024e0:	fb83 2301 	smull	r2, r3, r3, r1
 80024e4:	115a      	asrs	r2, r3, #5
 80024e6:	17cb      	asrs	r3, r1, #31
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	4a19      	ldr	r2, [pc, #100]	; (8002554 <task2_joystick+0x77c>)
 80024ee:	8013      	strh	r3, [r2, #0]
	  		  M3.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <task2_joystick+0x788>)
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	4613      	mov	r3, r2
 80024f6:	049b      	lsls	r3, r3, #18
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	039b      	lsls	r3, r3, #14
 80024fc:	4619      	mov	r1, r3
 80024fe:	4b19      	ldr	r3, [pc, #100]	; (8002564 <task2_joystick+0x78c>)
 8002500:	fb83 2301 	smull	r2, r3, r3, r1
 8002504:	115a      	asrs	r2, r3, #5
 8002506:	17cb      	asrs	r3, r1, #31
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	b21b      	sxth	r3, r3
 800250c:	4a13      	ldr	r2, [pc, #76]	; (800255c <task2_joystick+0x784>)
 800250e:	8013      	strh	r3, [r2, #0]
	  		  M4.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <task2_joystick+0x788>)
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	4613      	mov	r3, r2
 8002516:	049b      	lsls	r3, r3, #18
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	039b      	lsls	r3, r3, #14
 800251c:	4619      	mov	r1, r3
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <task2_joystick+0x78c>)
 8002520:	fb83 2301 	smull	r2, r3, r3, r1
 8002524:	115a      	asrs	r2, r3, #5
 8002526:	17cb      	asrs	r3, r1, #31
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	b21b      	sxth	r3, r3
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <task2_joystick+0x780>)
 800252e:	8013      	strh	r3, [r2, #0]
 8002530:	e34f      	b.n	8002bd2 <task2_joystick+0xdfa>
 8002532:	bf00      	nop
 8002534:	f3af 8000 	nop.w
 8002538:	00000000 	.word	0x00000000
 800253c:	40c77000 	.word	0x40c77000
 8002540:	00000000 	.word	0x00000000
 8002544:	c0c77000 	.word	0xc0c77000
 8002548:	200007b0 	.word	0x200007b0
 800254c:	200007b8 	.word	0x200007b8
 8002550:	20000844 	.word	0x20000844
 8002554:	2000084c 	.word	0x2000084c
 8002558:	2000085c 	.word	0x2000085c
 800255c:	20000854 	.word	0x20000854
 8002560:	20000868 	.word	0x20000868
 8002564:	10624dd3 	.word	0x10624dd3
	  	  }
	  	  else if((abs(PS2.LY)>5 || abs(PS2.LX)>5) && abs(PS2.RX)>5){
 8002568:	4ba3      	ldr	r3, [pc, #652]	; (80027f8 <task2_joystick+0xa20>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	bfb8      	it	lt
 8002570:	425b      	neglt	r3, r3
 8002572:	2b05      	cmp	r3, #5
 8002574:	dc07      	bgt.n	8002586 <task2_joystick+0x7ae>
 8002576:	4ba0      	ldr	r3, [pc, #640]	; (80027f8 <task2_joystick+0xa20>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	bfb8      	it	lt
 800257e:	425b      	neglt	r3, r3
 8002580:	2b05      	cmp	r3, #5
 8002582:	f340 831a 	ble.w	8002bba <task2_joystick+0xde2>
 8002586:	4b9c      	ldr	r3, [pc, #624]	; (80027f8 <task2_joystick+0xa20>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	bfb8      	it	lt
 800258e:	425b      	neglt	r3, r3
 8002590:	2b05      	cmp	r3, #5
 8002592:	f340 8312 	ble.w	8002bba <task2_joystick+0xde2>
	  		  PS2.X=PS2.LX/(float)128;
 8002596:	4b98      	ldr	r3, [pc, #608]	; (80027f8 <task2_joystick+0xa20>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a2:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80027fc <task2_joystick+0xa24>
 80025a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025aa:	ee16 0a90 	vmov	r0, s13
 80025ae:	f7fd ff9b 	bl	80004e8 <__aeabi_f2d>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4990      	ldr	r1, [pc, #576]	; (80027f8 <task2_joystick+0xa20>)
 80025b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  		  PS2.Y=PS2.LY/(float)128;
 80025bc:	4b8e      	ldr	r3, [pc, #568]	; (80027f8 <task2_joystick+0xa20>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	ee07 3a90 	vmov	s15, r3
 80025c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c8:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80027fc <task2_joystick+0xa24>
 80025cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025d0:	ee16 0a90 	vmov	r0, s13
 80025d4:	f7fd ff88 	bl	80004e8 <__aeabi_f2d>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4986      	ldr	r1, [pc, #536]	; (80027f8 <task2_joystick+0xa20>)
 80025de:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  		  speed=sqrt(PS2.X*PS2.X+PS2.Y*PS2.Y);
 80025e2:	4b85      	ldr	r3, [pc, #532]	; (80027f8 <task2_joystick+0xa20>)
 80025e4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80025e8:	4b83      	ldr	r3, [pc, #524]	; (80027f8 <task2_joystick+0xa20>)
 80025ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025ee:	f7fd ffd3 	bl	8000598 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4614      	mov	r4, r2
 80025f8:	461d      	mov	r5, r3
 80025fa:	4b7f      	ldr	r3, [pc, #508]	; (80027f8 <task2_joystick+0xa20>)
 80025fc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002600:	4b7d      	ldr	r3, [pc, #500]	; (80027f8 <task2_joystick+0xa20>)
 8002602:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002606:	f7fd ffc7 	bl	8000598 <__aeabi_dmul>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4620      	mov	r0, r4
 8002610:	4629      	mov	r1, r5
 8002612:	f7fd fe0b 	bl	800022c <__adddf3>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	ec43 2b17 	vmov	d7, r2, r3
 800261e:	eeb0 0a47 	vmov.f32	s0, s14
 8002622:	eef0 0a67 	vmov.f32	s1, s15
 8002626:	f00a fdcf 	bl	800d1c8 <sqrt>
 800262a:	eeb0 7a40 	vmov.f32	s14, s0
 800262e:	eef0 7a60 	vmov.f32	s15, s1
 8002632:	4b73      	ldr	r3, [pc, #460]	; (8002800 <task2_joystick+0xa28>)
 8002634:	ed83 7b00 	vstr	d7, [r3]
	  //				  speed=1;
	  //			  }
	  //			  if(speed<=-1){
	  //				  speed=-1;
	  //			  }
	  		  degree_a=atan2(PS2.Y,PS2.X);
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <task2_joystick+0xa20>)
 800263a:	ed93 7b06 	vldr	d7, [r3, #24]
 800263e:	4b6e      	ldr	r3, [pc, #440]	; (80027f8 <task2_joystick+0xa20>)
 8002640:	ed93 6b04 	vldr	d6, [r3, #16]
 8002644:	eeb0 1a46 	vmov.f32	s2, s12
 8002648:	eef0 1a66 	vmov.f32	s3, s13
 800264c:	eeb0 0a47 	vmov.f32	s0, s14
 8002650:	eef0 0a67 	vmov.f32	s1, s15
 8002654:	f00a fdb6 	bl	800d1c4 <atan2>
 8002658:	eeb0 7a40 	vmov.f32	s14, s0
 800265c:	eef0 7a60 	vmov.f32	s15, s1
 8002660:	4b68      	ldr	r3, [pc, #416]	; (8002804 <task2_joystick+0xa2c>)
 8002662:	ed83 7b00 	vstr	d7, [r3]
	  		  ML=sin(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <task2_joystick+0xa2c>)
 8002668:	e9d3 4500 	ldrd	r4, r5, [r3]
 800266c:	4b66      	ldr	r3, [pc, #408]	; (8002808 <task2_joystick+0xa30>)
 800266e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	4b65      	ldr	r3, [pc, #404]	; (800280c <task2_joystick+0xa34>)
 8002678:	f7fe f8b8 	bl	80007ec <__aeabi_ddiv>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4620      	mov	r0, r4
 8002682:	4629      	mov	r1, r5
 8002684:	f7fd fdd0 	bl	8000228 <__aeabi_dsub>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	ec43 2b17 	vmov	d7, r2, r3
 8002690:	eeb0 0a47 	vmov.f32	s0, s14
 8002694:	eef0 0a67 	vmov.f32	s1, s15
 8002698:	f00a fe16 	bl	800d2c8 <sin>
 800269c:	ec51 0b10 	vmov	r0, r1, d0
 80026a0:	4b57      	ldr	r3, [pc, #348]	; (8002800 <task2_joystick+0xa28>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	f7fd ff77 	bl	8000598 <__aeabi_dmul>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	4b56      	ldr	r3, [pc, #344]	; (8002810 <task2_joystick+0xa38>)
 80026b8:	f7fd ff6e 	bl	8000598 <__aeabi_dmul>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	4b53      	ldr	r3, [pc, #332]	; (8002814 <task2_joystick+0xa3c>)
 80026c6:	e9c3 0100 	strd	r0, r1, [r3]
	  		  MR=cos(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 80026ca:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <task2_joystick+0xa2c>)
 80026cc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026d0:	4b4d      	ldr	r3, [pc, #308]	; (8002808 <task2_joystick+0xa30>)
 80026d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	4b4c      	ldr	r3, [pc, #304]	; (800280c <task2_joystick+0xa34>)
 80026dc:	f7fe f886 	bl	80007ec <__aeabi_ddiv>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4620      	mov	r0, r4
 80026e6:	4629      	mov	r1, r5
 80026e8:	f7fd fd9e 	bl	8000228 <__aeabi_dsub>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	ec43 2b17 	vmov	d7, r2, r3
 80026f4:	eeb0 0a47 	vmov.f32	s0, s14
 80026f8:	eef0 0a67 	vmov.f32	s1, s15
 80026fc:	f00a fd90 	bl	800d220 <cos>
 8002700:	ec51 0b10 	vmov	r0, r1, d0
 8002704:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <task2_joystick+0xa28>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	f7fd ff45 	bl	8000598 <__aeabi_dmul>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <task2_joystick+0xa38>)
 800271c:	f7fd ff3c 	bl	8000598 <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <task2_joystick+0xa40>)
 800272a:	e9c3 0100 	strd	r0, r1, [r3]
	  		  if(ML>12000 || MR>12000){
 800272e:	4b39      	ldr	r3, [pc, #228]	; (8002814 <task2_joystick+0xa3c>)
 8002730:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002734:	a32e      	add	r3, pc, #184	; (adr r3, 80027f0 <task2_joystick+0xa18>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fe f9bd 	bl	8000ab8 <__aeabi_dcmpgt>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <task2_joystick+0x982>
 8002744:	4b34      	ldr	r3, [pc, #208]	; (8002818 <task2_joystick+0xa40>)
 8002746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800274a:	a329      	add	r3, pc, #164	; (adr r3, 80027f0 <task2_joystick+0xa18>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	f7fe f9b2 	bl	8000ab8 <__aeabi_dcmpgt>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d060      	beq.n	800281c <task2_joystick+0xa44>
	  			  if(ML > MR){
 800275a:	4b2e      	ldr	r3, [pc, #184]	; (8002814 <task2_joystick+0xa3c>)
 800275c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002760:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <task2_joystick+0xa40>)
 8002762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002766:	f7fe f9a7 	bl	8000ab8 <__aeabi_dcmpgt>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01e      	beq.n	80027ae <task2_joystick+0x9d6>
	  				  MR=MR/ML*12000;
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <task2_joystick+0xa40>)
 8002772:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002776:	4b27      	ldr	r3, [pc, #156]	; (8002814 <task2_joystick+0xa3c>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	f7fe f836 	bl	80007ec <__aeabi_ddiv>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	a319      	add	r3, pc, #100	; (adr r3, 80027f0 <task2_joystick+0xa18>)
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	f7fd ff03 	bl	8000598 <__aeabi_dmul>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <task2_joystick+0xa40>)
 800279c:	e9c3 0100 	strd	r0, r1, [r3]
	  				  ML=12000;
 80027a0:	491c      	ldr	r1, [pc, #112]	; (8002814 <task2_joystick+0xa3c>)
 80027a2:	a313      	add	r3, pc, #76	; (adr r3, 80027f0 <task2_joystick+0xa18>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	e9c1 2300 	strd	r2, r3, [r1]
	  			  if(ML > MR){
 80027ac:	e184      	b.n	8002ab8 <task2_joystick+0xce0>

	  			  }
	  			  else{
	  				  ML=ML/MR*12000;
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <task2_joystick+0xa3c>)
 80027b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027b4:	4b18      	ldr	r3, [pc, #96]	; (8002818 <task2_joystick+0xa40>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fe f817 	bl	80007ec <__aeabi_ddiv>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	a30a      	add	r3, pc, #40	; (adr r3, 80027f0 <task2_joystick+0xa18>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	f7fd fee4 	bl	8000598 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <task2_joystick+0xa3c>)
 80027da:	e9c3 0100 	strd	r0, r1, [r3]
	  				  MR=12000;
 80027de:	490e      	ldr	r1, [pc, #56]	; (8002818 <task2_joystick+0xa40>)
 80027e0:	a303      	add	r3, pc, #12	; (adr r3, 80027f0 <task2_joystick+0xa18>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	e9c1 2300 	strd	r2, r3, [r1]
	  			  if(ML > MR){
 80027ea:	e165      	b.n	8002ab8 <task2_joystick+0xce0>
 80027ec:	f3af 8000 	nop.w
 80027f0:	00000000 	.word	0x00000000
 80027f4:	40c77000 	.word	0x40c77000
 80027f8:	20000868 	.word	0x20000868
 80027fc:	43000000 	.word	0x43000000
 8002800:	200007c0 	.word	0x200007c0
 8002804:	200007c8 	.word	0x200007c8
 8002808:	20000000 	.word	0x20000000
 800280c:	40100000 	.word	0x40100000
 8002810:	40d00000 	.word	0x40d00000
 8002814:	200007b0 	.word	0x200007b0
 8002818:	200007b8 	.word	0x200007b8
	  			  }
	  		  }
	  		  else if(ML<-12000 || MR<-12000){
 800281c:	4b92      	ldr	r3, [pc, #584]	; (8002a68 <task2_joystick+0xc90>)
 800281e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002822:	a38d      	add	r3, pc, #564	; (adr r3, 8002a58 <task2_joystick+0xc80>)
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	f7fe f928 	bl	8000a7c <__aeabi_dcmplt>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <task2_joystick+0xa70>
 8002832:	4b8e      	ldr	r3, [pc, #568]	; (8002a6c <task2_joystick+0xc94>)
 8002834:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002838:	a387      	add	r3, pc, #540	; (adr r3, 8002a58 <task2_joystick+0xc80>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	f7fe f91d 	bl	8000a7c <__aeabi_dcmplt>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d054      	beq.n	80028f2 <task2_joystick+0xb1a>
	  			  if(ML < MR){
 8002848:	4b87      	ldr	r3, [pc, #540]	; (8002a68 <task2_joystick+0xc90>)
 800284a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800284e:	4b87      	ldr	r3, [pc, #540]	; (8002a6c <task2_joystick+0xc94>)
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	f7fe f912 	bl	8000a7c <__aeabi_dcmplt>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d024      	beq.n	80028a8 <task2_joystick+0xad0>
	  				  MR=-MR/ML*12000;
 800285e:	4b83      	ldr	r3, [pc, #524]	; (8002a6c <task2_joystick+0xc94>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	63ba      	str	r2, [r7, #56]	; 0x38
 8002866:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800286a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286c:	4b7e      	ldr	r3, [pc, #504]	; (8002a68 <task2_joystick+0xc90>)
 800286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002872:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002876:	f7fd ffb9 	bl	80007ec <__aeabi_ddiv>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	a377      	add	r3, pc, #476	; (adr r3, 8002a60 <task2_joystick+0xc88>)
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f7fd fe86 	bl	8000598 <__aeabi_dmul>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	4b75      	ldr	r3, [pc, #468]	; (8002a6c <task2_joystick+0xc94>)
 8002896:	e9c3 0100 	strd	r0, r1, [r3]
	  				  ML=-12000;
 800289a:	4973      	ldr	r1, [pc, #460]	; (8002a68 <task2_joystick+0xc90>)
 800289c:	a36e      	add	r3, pc, #440	; (adr r3, 8002a58 <task2_joystick+0xc80>)
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	e9c1 2300 	strd	r2, r3, [r1]
	  			  if(ML < MR){
 80028a6:	e107      	b.n	8002ab8 <task2_joystick+0xce0>

	  			  }
	  			  else{
	  				  ML=-ML/MR*12000;
 80028a8:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <task2_joystick+0xc90>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	633a      	str	r2, [r7, #48]	; 0x30
 80028b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
 80028b6:	4b6d      	ldr	r3, [pc, #436]	; (8002a6c <task2_joystick+0xc94>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80028c0:	f7fd ff94 	bl	80007ec <__aeabi_ddiv>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	a364      	add	r3, pc, #400	; (adr r3, 8002a60 <task2_joystick+0xc88>)
 80028ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d2:	f7fd fe61 	bl	8000598 <__aeabi_dmul>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	4b62      	ldr	r3, [pc, #392]	; (8002a68 <task2_joystick+0xc90>)
 80028e0:	e9c3 0100 	strd	r0, r1, [r3]
	  				  MR=-12000;
 80028e4:	4961      	ldr	r1, [pc, #388]	; (8002a6c <task2_joystick+0xc94>)
 80028e6:	a35c      	add	r3, pc, #368	; (adr r3, 8002a58 <task2_joystick+0xc80>)
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	e9c1 2300 	strd	r2, r3, [r1]
	  			  if(ML < MR){
 80028f0:	e0e2      	b.n	8002ab8 <task2_joystick+0xce0>
	  			  }
	  		  }
	  		  else if(ML>12000 || MR<-12000){
 80028f2:	4b5d      	ldr	r3, [pc, #372]	; (8002a68 <task2_joystick+0xc90>)
 80028f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028f8:	a359      	add	r3, pc, #356	; (adr r3, 8002a60 <task2_joystick+0xc88>)
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f7fe f8db 	bl	8000ab8 <__aeabi_dcmpgt>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <task2_joystick+0xb46>
 8002908:	4b58      	ldr	r3, [pc, #352]	; (8002a6c <task2_joystick+0xc94>)
 800290a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800290e:	a352      	add	r3, pc, #328	; (adr r3, 8002a58 <task2_joystick+0xc80>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f7fe f8b2 	bl	8000a7c <__aeabi_dcmplt>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d054      	beq.n	80029c8 <task2_joystick+0xbf0>
	  			  if(ML > -MR){
 800291e:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <task2_joystick+0xc94>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	62ba      	str	r2, [r7, #40]	; 0x28
 8002926:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292c:	4b4e      	ldr	r3, [pc, #312]	; (8002a68 <task2_joystick+0xc90>)
 800292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002932:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002936:	f7fe f8a1 	bl	8000a7c <__aeabi_dcmplt>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01e      	beq.n	800297e <task2_joystick+0xba6>
	  				  MR=MR/ML*12000;
 8002940:	4b4a      	ldr	r3, [pc, #296]	; (8002a6c <task2_joystick+0xc94>)
 8002942:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002946:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <task2_joystick+0xc90>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fd ff4e 	bl	80007ec <__aeabi_ddiv>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	a341      	add	r3, pc, #260	; (adr r3, 8002a60 <task2_joystick+0xc88>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	f7fd fe1b 	bl	8000598 <__aeabi_dmul>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	4b40      	ldr	r3, [pc, #256]	; (8002a6c <task2_joystick+0xc94>)
 800296c:	e9c3 0100 	strd	r0, r1, [r3]
	  				  ML=12000;
 8002970:	493d      	ldr	r1, [pc, #244]	; (8002a68 <task2_joystick+0xc90>)
 8002972:	a33b      	add	r3, pc, #236	; (adr r3, 8002a60 <task2_joystick+0xc88>)
 8002974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002978:	e9c1 2300 	strd	r2, r3, [r1]
	  			  if(ML > -MR){
 800297c:	e09c      	b.n	8002ab8 <task2_joystick+0xce0>

	  			  }
	  			  else{
	  				  ML=-ML/MR*12000;
 800297e:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <task2_joystick+0xc90>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	623a      	str	r2, [r7, #32]
 8002986:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
 800298c:	4b37      	ldr	r3, [pc, #220]	; (8002a6c <task2_joystick+0xc94>)
 800298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002992:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002996:	f7fd ff29 	bl	80007ec <__aeabi_ddiv>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	a32f      	add	r3, pc, #188	; (adr r3, 8002a60 <task2_joystick+0xc88>)
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	f7fd fdf6 	bl	8000598 <__aeabi_dmul>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <task2_joystick+0xc90>)
 80029b6:	e9c3 0100 	strd	r0, r1, [r3]
	  				  MR=-12000;
 80029ba:	492c      	ldr	r1, [pc, #176]	; (8002a6c <task2_joystick+0xc94>)
 80029bc:	a326      	add	r3, pc, #152	; (adr r3, 8002a58 <task2_joystick+0xc80>)
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	e9c1 2300 	strd	r2, r3, [r1]
	  			  if(ML > -MR){
 80029c6:	e077      	b.n	8002ab8 <task2_joystick+0xce0>
	  			  }
	  		  }
	  		  else if(MR>12000 || ML<-12000){
 80029c8:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <task2_joystick+0xc94>)
 80029ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ce:	a324      	add	r3, pc, #144	; (adr r3, 8002a60 <task2_joystick+0xc88>)
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	f7fe f870 	bl	8000ab8 <__aeabi_dcmpgt>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <task2_joystick+0xc1c>
 80029de:	4b22      	ldr	r3, [pc, #136]	; (8002a68 <task2_joystick+0xc90>)
 80029e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029e4:	a31c      	add	r3, pc, #112	; (adr r3, 8002a58 <task2_joystick+0xc80>)
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f7fe f847 	bl	8000a7c <__aeabi_dcmplt>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d061      	beq.n	8002ab8 <task2_joystick+0xce0>
	  			  if(MR > -ML){
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <task2_joystick+0xc90>)
 80029f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fa:	61ba      	str	r2, [r7, #24]
 80029fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <task2_joystick+0xc94>)
 8002a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a0c:	f7fe f836 	bl	8000a7c <__aeabi_dcmplt>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d02c      	beq.n	8002a70 <task2_joystick+0xc98>
	  				  ML=ML/MR*12000;
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <task2_joystick+0xc90>)
 8002a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <task2_joystick+0xc94>)
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f7fd fee3 	bl	80007ec <__aeabi_ddiv>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	a30c      	add	r3, pc, #48	; (adr r3, 8002a60 <task2_joystick+0xc88>)
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f7fd fdb0 	bl	8000598 <__aeabi_dmul>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <task2_joystick+0xc90>)
 8002a42:	e9c3 0100 	strd	r0, r1, [r3]
	  				  MR=12000;
 8002a46:	4909      	ldr	r1, [pc, #36]	; (8002a6c <task2_joystick+0xc94>)
 8002a48:	a305      	add	r3, pc, #20	; (adr r3, 8002a60 <task2_joystick+0xc88>)
 8002a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4e:	e9c1 2300 	strd	r2, r3, [r1]
 8002a52:	e031      	b.n	8002ab8 <task2_joystick+0xce0>
 8002a54:	f3af 8000 	nop.w
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	c0c77000 	.word	0xc0c77000
 8002a60:	00000000 	.word	0x00000000
 8002a64:	40c77000 	.word	0x40c77000
 8002a68:	200007b0 	.word	0x200007b0
 8002a6c:	200007b8 	.word	0x200007b8

	  			  }
	  			  else{
	  				  MR=-MR/ML*12000;
 8002a70:	4b5f      	ldr	r3, [pc, #380]	; (8002bf0 <task2_joystick+0xe18>)
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	613a      	str	r2, [r7, #16]
 8002a78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	4b5d      	ldr	r3, [pc, #372]	; (8002bf4 <task2_joystick+0xe1c>)
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a88:	f7fd feb0 	bl	80007ec <__aeabi_ddiv>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	a352      	add	r3, pc, #328	; (adr r3, 8002be0 <task2_joystick+0xe08>)
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f7fd fd7d 	bl	8000598 <__aeabi_dmul>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4b52      	ldr	r3, [pc, #328]	; (8002bf0 <task2_joystick+0xe18>)
 8002aa8:	e9c3 0100 	strd	r0, r1, [r3]
	  				  ML=-12000;
 8002aac:	4951      	ldr	r1, [pc, #324]	; (8002bf4 <task2_joystick+0xe1c>)
 8002aae:	a34e      	add	r3, pc, #312	; (adr r3, 8002be8 <task2_joystick+0xe10>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	e9c1 2300 	strd	r2, r3, [r1]
	  			  }
	  		  }
	  		  M1.setpoint=-MR;
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <task2_joystick+0xe18>)
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	60ba      	str	r2, [r7, #8]
 8002ac0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aca:	f7fe f815 	bl	8000af8 <__aeabi_d2iz>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	b21b      	sxth	r3, r3
 8002ad2:	4a49      	ldr	r2, [pc, #292]	; (8002bf8 <task2_joystick+0xe20>)
 8002ad4:	8013      	strh	r3, [r2, #0]
	  		  M2.setpoint=ML;
 8002ad6:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <task2_joystick+0xe1c>)
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7fe f80a 	bl	8000af8 <__aeabi_d2iz>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	b21b      	sxth	r3, r3
 8002ae8:	4a44      	ldr	r2, [pc, #272]	; (8002bfc <task2_joystick+0xe24>)
 8002aea:	8013      	strh	r3, [r2, #0]
	  		  M4.setpoint=-ML;
 8002aec:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <task2_joystick+0xe1c>)
 8002aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af2:	603a      	str	r2, [r7, #0]
 8002af4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002af8:	607b      	str	r3, [r7, #4]
 8002afa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002afe:	f7fd fffb 	bl	8000af8 <__aeabi_d2iz>
 8002b02:	4603      	mov	r3, r0
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	4a3e      	ldr	r2, [pc, #248]	; (8002c00 <task2_joystick+0xe28>)
 8002b08:	8013      	strh	r3, [r2, #0]
	  		  M3.setpoint=MR;
 8002b0a:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <task2_joystick+0xe18>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7fd fff0 	bl	8000af8 <__aeabi_d2iz>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	b21b      	sxth	r3, r3
 8002b1c:	4a39      	ldr	r2, [pc, #228]	; (8002c04 <task2_joystick+0xe2c>)
 8002b1e:	8013      	strh	r3, [r2, #0]
	  		  M1.setpoint=M1.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002b20:	4b35      	ldr	r3, [pc, #212]	; (8002bf8 <task2_joystick+0xe20>)
 8002b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b26:	b298      	uxth	r0, r3
 8002b28:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <task2_joystick+0xe30>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0399      	lsls	r1, r3, #14
 8002b2e:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <task2_joystick+0xe34>)
 8002b30:	fb83 2301 	smull	r2, r3, r3, r1
 8002b34:	121a      	asrs	r2, r3, #8
 8002b36:	17cb      	asrs	r3, r1, #31
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4403      	add	r3, r0
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	b21b      	sxth	r3, r3
 8002b42:	4a2d      	ldr	r2, [pc, #180]	; (8002bf8 <task2_joystick+0xe20>)
 8002b44:	8013      	strh	r3, [r2, #0]
	  		  M2.setpoint=M2.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002b46:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <task2_joystick+0xe24>)
 8002b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b4c:	b298      	uxth	r0, r3
 8002b4e:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <task2_joystick+0xe30>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	0399      	lsls	r1, r3, #14
 8002b54:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <task2_joystick+0xe34>)
 8002b56:	fb83 2301 	smull	r2, r3, r3, r1
 8002b5a:	121a      	asrs	r2, r3, #8
 8002b5c:	17cb      	asrs	r3, r1, #31
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	4403      	add	r3, r0
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	b21b      	sxth	r3, r3
 8002b68:	4a24      	ldr	r2, [pc, #144]	; (8002bfc <task2_joystick+0xe24>)
 8002b6a:	8013      	strh	r3, [r2, #0]
	  		  M3.setpoint=M3.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002b6c:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <task2_joystick+0xe2c>)
 8002b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b72:	b298      	uxth	r0, r3
 8002b74:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <task2_joystick+0xe30>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	0399      	lsls	r1, r3, #14
 8002b7a:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <task2_joystick+0xe34>)
 8002b7c:	fb83 2301 	smull	r2, r3, r3, r1
 8002b80:	121a      	asrs	r2, r3, #8
 8002b82:	17cb      	asrs	r3, r1, #31
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4403      	add	r3, r0
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	b21b      	sxth	r3, r3
 8002b8e:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <task2_joystick+0xe2c>)
 8002b90:	8013      	strh	r3, [r2, #0]
	  		  M4.setpoint=M4.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <task2_joystick+0xe28>)
 8002b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b98:	b298      	uxth	r0, r3
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <task2_joystick+0xe30>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	0399      	lsls	r1, r3, #14
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <task2_joystick+0xe34>)
 8002ba2:	fb83 2301 	smull	r2, r3, r3, r1
 8002ba6:	121a      	asrs	r2, r3, #8
 8002ba8:	17cb      	asrs	r3, r1, #31
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	4403      	add	r3, r0
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <task2_joystick+0xe28>)
 8002bb6:	8013      	strh	r3, [r2, #0]
 8002bb8:	e00b      	b.n	8002bd2 <task2_joystick+0xdfa>
	  	  }
	  	  else{
	  		  M1.setpoint=0;
 8002bba:	4a0f      	ldr	r2, [pc, #60]	; (8002bf8 <task2_joystick+0xe20>)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	8013      	strh	r3, [r2, #0]
	  		  M2.setpoint=0;
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <task2_joystick+0xe24>)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	8013      	strh	r3, [r2, #0]
	  		  M3.setpoint=0;
 8002bc6:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <task2_joystick+0xe2c>)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	8013      	strh	r3, [r2, #0]
	  		  M4.setpoint=0;
 8002bcc:	4a0c      	ldr	r2, [pc, #48]	; (8002c00 <task2_joystick+0xe28>)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	8013      	strh	r3, [r2, #0]
	  	  }
    osDelay(10);
 8002bd2:	200a      	movs	r0, #10
 8002bd4:	f009 f900 	bl	800bdd8 <osDelay>
	  count = TIM2->CNT;
 8002bd8:	f7ff b903 	b.w	8001de2 <task2_joystick+0xa>
 8002bdc:	f3af 8000 	nop.w
 8002be0:	00000000 	.word	0x00000000
 8002be4:	40c77000 	.word	0x40c77000
 8002be8:	00000000 	.word	0x00000000
 8002bec:	c0c77000 	.word	0xc0c77000
 8002bf0:	200007b8 	.word	0x200007b8
 8002bf4:	200007b0 	.word	0x200007b0
 8002bf8:	20000844 	.word	0x20000844
 8002bfc:	2000084c 	.word	0x2000084c
 8002c00:	2000085c 	.word	0x2000085c
 8002c04:	20000854 	.word	0x20000854
 8002c08:	20000868 	.word	0x20000868
 8002c0c:	51eb851f 	.word	0x51eb851f

08002c10 <dcmotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dcmotor */
void dcmotor(void const * argument)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dcmotor */
//	DC_pid.error = 0;
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c1e:	485a      	ldr	r0, [pc, #360]	; (8002d88 <dcmotor+0x178>)
 8002c20:	f004 fc9a 	bl	8007558 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_SET);
 8002c24:	2201      	movs	r2, #1
 8002c26:	2110      	movs	r1, #16
 8002c28:	4858      	ldr	r0, [pc, #352]	; (8002d8c <dcmotor+0x17c>)
 8002c2a:	f004 fc95 	bl	8007558 <HAL_GPIO_WritePin>
		TIM12->CCR1=924;
 8002c2e:	4b58      	ldr	r3, [pc, #352]	; (8002d90 <dcmotor+0x180>)
 8002c30:	f44f 7267 	mov.w	r2, #924	; 0x39c
 8002c34:	635a      	str	r2, [r3, #52]	; 0x34
		TIM12->CCR2=924;
 8002c36:	4b56      	ldr	r3, [pc, #344]	; (8002d90 <dcmotor+0x180>)
 8002c38:	f44f 7267 	mov.w	r2, #924	; 0x39c
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Infinite loop */
  for(;;)
  {
//	  Color_Sensor();
	  switch_5 = HAL_GPIO_ReadPin(SWITCH_5_GPIO_Port, SWITCH_5_Pin);
 8002c3e:	2104      	movs	r1, #4
 8002c40:	4852      	ldr	r0, [pc, #328]	; (8002d8c <dcmotor+0x17c>)
 8002c42:	f004 fc71 	bl	8007528 <HAL_GPIO_ReadPin>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b52      	ldr	r3, [pc, #328]	; (8002d94 <dcmotor+0x184>)
 8002c4c:	601a      	str	r2, [r3, #0]
	  switch_6 = HAL_GPIO_ReadPin(SWITCH_6_GPIO_Port, SWITCH_6_Pin);
 8002c4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c52:	4851      	ldr	r0, [pc, #324]	; (8002d98 <dcmotor+0x188>)
 8002c54:	f004 fc68 	bl	8007528 <HAL_GPIO_ReadPin>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <dcmotor+0x18c>)
 8002c5e:	601a      	str	r2, [r3, #0]
	  IR=HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin);
 8002c60:	2104      	movs	r1, #4
 8002c62:	484f      	ldr	r0, [pc, #316]	; (8002da0 <dcmotor+0x190>)
 8002c64:	f004 fc60 	bl	8007528 <HAL_GPIO_ReadPin>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b4d      	ldr	r3, [pc, #308]	; (8002da4 <dcmotor+0x194>)
 8002c6e:	601a      	str	r2, [r3, #0]
	  if(BLDC==1 || flag==1){
 8002c70:	4b4d      	ldr	r3, [pc, #308]	; (8002da8 <dcmotor+0x198>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d003      	beq.n	8002c80 <dcmotor+0x70>
 8002c78:	4b4c      	ldr	r3, [pc, #304]	; (8002dac <dcmotor+0x19c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d14d      	bne.n	8002d1c <dcmotor+0x10c>
	  			TIM12->CCR1 = 935;
 8002c80:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <dcmotor+0x180>)
 8002c82:	f240 32a7 	movw	r2, #935	; 0x3a7
 8002c86:	635a      	str	r2, [r3, #52]	; 0x34
	  			TIM12->CCR2 = 918;
 8002c88:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <dcmotor+0x180>)
 8002c8a:	f240 3296 	movw	r2, #918	; 0x396
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38
	  			flag = 1;
 8002c90:	4b46      	ldr	r3, [pc, #280]	; (8002dac <dcmotor+0x19c>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
	  			//HAL_Delay(500);
	  			if((HAL_GPIO_ReadPin(SWITCH_5_GPIO_Port, SWITCH_5_Pin)==0) || (HAL_GPIO_ReadPin(SWITCH_6_GPIO_Port, SWITCH_6_Pin)==0)){
 8002c96:	2104      	movs	r1, #4
 8002c98:	483c      	ldr	r0, [pc, #240]	; (8002d8c <dcmotor+0x17c>)
 8002c9a:	f004 fc45 	bl	8007528 <HAL_GPIO_ReadPin>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <dcmotor+0xa4>
 8002ca4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ca8:	483b      	ldr	r0, [pc, #236]	; (8002d98 <dcmotor+0x188>)
 8002caa:	f004 fc3d 	bl	8007528 <HAL_GPIO_ReadPin>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d164      	bne.n	8002d7e <dcmotor+0x16e>
	  				TIM12->CCR1 = 924;
 8002cb4:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <dcmotor+0x180>)
 8002cb6:	f44f 7267 	mov.w	r2, #924	; 0x39c
 8002cba:	635a      	str	r2, [r3, #52]	; 0x34
	  				TIM12->CCR2 = 924;
 8002cbc:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <dcmotor+0x180>)
 8002cbe:	f44f 7267 	mov.w	r2, #924	; 0x39c
 8002cc2:	639a      	str	r2, [r3, #56]	; 0x38
	  //				HAL_Delay(2000);
	  				flag = 0;
 8002cc4:	4b39      	ldr	r3, [pc, #228]	; (8002dac <dcmotor+0x19c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
	  				BLDC = 0;
 8002cca:	4b37      	ldr	r3, [pc, #220]	; (8002da8 <dcmotor+0x198>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
//					color_value=0;
//					osDelay(200);
					color_value=Color_Sensor();
 8002cd0:	f7fe ffde 	bl	8001c90 <Color_Sensor>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4a36      	ldr	r2, [pc, #216]	; (8002db0 <dcmotor+0x1a0>)
 8002cd8:	6013      	str	r3, [r2, #0]
//					color_value=color_value + Color_Sensor();
//					osDelay(300);
//					TIM12->CCR1 = 924;
//					TIM12->CCR2 = 924;
//					color_value=color_value + Color_Sensor();
					if(color_value !=0){
 8002cda:	4b35      	ldr	r3, [pc, #212]	; (8002db0 <dcmotor+0x1a0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <dcmotor+0xe2>
						  yellow=1;
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <dcmotor+0x1a4>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
						  target_pos = 1820;
 8002ce8:	4b33      	ldr	r3, [pc, #204]	; (8002db8 <dcmotor+0x1a8>)
 8002cea:	f240 721c 	movw	r2, #1820	; 0x71c
 8002cee:	601a      	str	r2, [r3, #0]
	  			if((HAL_GPIO_ReadPin(SWITCH_5_GPIO_Port, SWITCH_5_Pin)==0) || (HAL_GPIO_ReadPin(SWITCH_6_GPIO_Port, SWITCH_6_Pin)==0)){
 8002cf0:	e045      	b.n	8002d7e <dcmotor+0x16e>
						  //shalgaj_duusah=1;
					}
					else{
						//shalgaj_duusah=0;
						TIM12->CCR1 = 918;
 8002cf2:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <dcmotor+0x180>)
 8002cf4:	f240 3296 	movw	r2, #918	; 0x396
 8002cf8:	635a      	str	r2, [r3, #52]	; 0x34
						TIM12->CCR2 = 935;
 8002cfa:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <dcmotor+0x180>)
 8002cfc:	f240 32a7 	movw	r2, #935	; 0x3a7
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
						osDelay(500);
 8002d02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d06:	f009 f867 	bl	800bdd8 <osDelay>
						TIM12->CCR1 = 924;
 8002d0a:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <dcmotor+0x180>)
 8002d0c:	f44f 7267 	mov.w	r2, #924	; 0x39c
 8002d10:	635a      	str	r2, [r3, #52]	; 0x34
						TIM12->CCR2 = 924;
 8002d12:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <dcmotor+0x180>)
 8002d14:	f44f 7267 	mov.w	r2, #924	; 0x39c
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
	  			if((HAL_GPIO_ReadPin(SWITCH_5_GPIO_Port, SWITCH_5_Pin)==0) || (HAL_GPIO_ReadPin(SWITCH_6_GPIO_Port, SWITCH_6_Pin)==0)){
 8002d1a:	e030      	b.n	8002d7e <dcmotor+0x16e>
						}

	  			}
	  		}
	  		else if(BLDC==2 && flag==0){
 8002d1c:	4b22      	ldr	r3, [pc, #136]	; (8002da8 <dcmotor+0x198>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d12d      	bne.n	8002d80 <dcmotor+0x170>
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <dcmotor+0x19c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d129      	bne.n	8002d80 <dcmotor+0x170>
	  			//HAL_Delay(200);
	  			if((HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin)) == 1){
 8002d2c:	2104      	movs	r1, #4
 8002d2e:	481c      	ldr	r0, [pc, #112]	; (8002da0 <dcmotor+0x190>)
 8002d30:	f004 fbfa 	bl	8007528 <HAL_GPIO_ReadPin>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d118      	bne.n	8002d6c <dcmotor+0x15c>
					TIM12->CCR1 = 924;
 8002d3a:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <dcmotor+0x180>)
 8002d3c:	f44f 7267 	mov.w	r2, #924	; 0x39c
 8002d40:	635a      	str	r2, [r3, #52]	; 0x34
					TIM12->CCR2 = 924;
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <dcmotor+0x180>)
 8002d44:	f44f 7267 	mov.w	r2, #924	; 0x39c
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
					osDelay(2000);
 8002d4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d4e:	f009 f843 	bl	800bdd8 <osDelay>
					take_ball = false;
 8002d52:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <dcmotor+0x1ac>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
					BLDC = 0;
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <dcmotor+0x198>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
					yellow=2;
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <dcmotor+0x1a4>)
 8002d60:	2202      	movs	r2, #2
 8002d62:	601a      	str	r2, [r3, #0]
					target_pos = 0;
 8002d64:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <dcmotor+0x1a8>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e009      	b.n	8002d80 <dcmotor+0x170>
				}else{
					TIM12->CCR1 = 918;
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <dcmotor+0x180>)
 8002d6e:	f240 3296 	movw	r2, #918	; 0x396
 8002d72:	635a      	str	r2, [r3, #52]	; 0x34
					TIM12->CCR2 = 935;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <dcmotor+0x180>)
 8002d76:	f240 32a7 	movw	r2, #935	; 0x3a7
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d7c:	e000      	b.n	8002d80 <dcmotor+0x170>
	  			if((HAL_GPIO_ReadPin(SWITCH_5_GPIO_Port, SWITCH_5_Pin)==0) || (HAL_GPIO_ReadPin(SWITCH_6_GPIO_Port, SWITCH_6_Pin)==0)){
 8002d7e:	bf00      	nop
//					osDelay(1000);
//					harah = 1;
					//break;
				}
	  		}
    osDelay(5);
 8002d80:	2005      	movs	r0, #5
 8002d82:	f009 f829 	bl	800bdd8 <osDelay>
	  switch_5 = HAL_GPIO_ReadPin(SWITCH_5_GPIO_Port, SWITCH_5_Pin);
 8002d86:	e75a      	b.n	8002c3e <dcmotor+0x2e>
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40020c00 	.word	0x40020c00
 8002d90:	40001800 	.word	0x40001800
 8002d94:	20000814 	.word	0x20000814
 8002d98:	40020800 	.word	0x40020800
 8002d9c:	20000818 	.word	0x20000818
 8002da0:	40021800 	.word	0x40021800
 8002da4:	200007e0 	.word	0x200007e0
 8002da8:	200007f8 	.word	0x200007f8
 8002dac:	200007f4 	.word	0x200007f4
 8002db0:	20000800 	.word	0x20000800
 8002db4:	200007f0 	.word	0x200007f0
 8002db8:	2000081c 	.word	0x2000081c
 8002dbc:	20000824 	.word	0x20000824

08002dc0 <Colorcheck>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Colorcheck */
void Colorcheck(void const * argument)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
//	Motor.my_pos = TIM2->CNT=0;
//	DC_pid.KP = 0.7;
//	DC_pid.KI = 0.0005;
//	DC_pid.KD = 0.00003;
//	Motor.target_pos=0;
	switch_3 = HAL_GPIO_ReadPin(SWITCH_3_GPIO_Port, SWITCH_3_Pin);
 8002dc8:	2102      	movs	r1, #2
 8002dca:	484b      	ldr	r0, [pc, #300]	; (8002ef8 <Colorcheck+0x138>)
 8002dcc:	f004 fbac 	bl	8007528 <HAL_GPIO_ReadPin>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b49      	ldr	r3, [pc, #292]	; (8002efc <Colorcheck+0x13c>)
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	  switch_1 = HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port, SWITCH_1_Pin);
 8002dd8:	2108      	movs	r1, #8
 8002dda:	4849      	ldr	r0, [pc, #292]	; (8002f00 <Colorcheck+0x140>)
 8002ddc:	f004 fba4 	bl	8007528 <HAL_GPIO_ReadPin>
 8002de0:	4603      	mov	r3, r0
 8002de2:	461a      	mov	r2, r3
 8002de4:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <Colorcheck+0x144>)
 8002de6:	601a      	str	r2, [r3, #0]
	  switch_2 = HAL_GPIO_ReadPin(SWITCH_2_GPIO_Port, SWITCH_2_Pin);
 8002de8:	2101      	movs	r1, #1
 8002dea:	4843      	ldr	r0, [pc, #268]	; (8002ef8 <Colorcheck+0x138>)
 8002dec:	f004 fb9c 	bl	8007528 <HAL_GPIO_ReadPin>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461a      	mov	r2, r3
 8002df4:	4b44      	ldr	r3, [pc, #272]	; (8002f08 <Colorcheck+0x148>)
 8002df6:	601a      	str	r2, [r3, #0]
	  switch_3 = HAL_GPIO_ReadPin(SWITCH_3_GPIO_Port, SWITCH_3_Pin);
 8002df8:	2102      	movs	r1, #2
 8002dfa:	483f      	ldr	r0, [pc, #252]	; (8002ef8 <Colorcheck+0x138>)
 8002dfc:	f004 fb94 	bl	8007528 <HAL_GPIO_ReadPin>
 8002e00:	4603      	mov	r3, r0
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <Colorcheck+0x13c>)
 8002e06:	601a      	str	r2, [r3, #0]
	  switch_4 = HAL_GPIO_ReadPin(SWITCH_4_GPIO_Port, SWITCH_4_Pin);
 8002e08:	2110      	movs	r1, #16
 8002e0a:	4840      	ldr	r0, [pc, #256]	; (8002f0c <Colorcheck+0x14c>)
 8002e0c:	f004 fb8c 	bl	8007528 <HAL_GPIO_ReadPin>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b3e      	ldr	r3, [pc, #248]	; (8002f10 <Colorcheck+0x150>)
 8002e16:	601a      	str	r2, [r3, #0]
	  if(yellow==2 && target_pos == 0){//target pos = 0
 8002e18:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <Colorcheck+0x154>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d128      	bne.n	8002e72 <Colorcheck+0xb2>
 8002e20:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <Colorcheck+0x158>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d124      	bne.n	8002e72 <Colorcheck+0xb2>
	  		 if(((HAL_GPIO_ReadPin(SWITCH_3_GPIO_Port, SWITCH_3_Pin))==0 || (HAL_GPIO_ReadPin(SWITCH_4_GPIO_Port, SWITCH_4_Pin))==0)){
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4833      	ldr	r0, [pc, #204]	; (8002ef8 <Colorcheck+0x138>)
 8002e2c:	f004 fb7c 	bl	8007528 <HAL_GPIO_ReadPin>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <Colorcheck+0x84>
 8002e36:	2110      	movs	r1, #16
 8002e38:	4834      	ldr	r0, [pc, #208]	; (8002f0c <Colorcheck+0x14c>)
 8002e3a:	f004 fb75 	bl	8007528 <HAL_GPIO_ReadPin>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d108      	bne.n	8002e56 <Colorcheck+0x96>
	  			 MotorStop();
 8002e44:	f7fe feac 	bl	8001ba0 <MotorStop>
	  //			 Motor.target_pos=0;
//	  			 TIM2->CNT=0;
	  			 My_pos=0;
 8002e48:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <Colorcheck+0x15c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
	  			 yellow=0;
 8002e4e:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <Colorcheck+0x154>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
	  		 if(((HAL_GPIO_ReadPin(SWITCH_3_GPIO_Port, SWITCH_3_Pin))==0 || (HAL_GPIO_ReadPin(SWITCH_4_GPIO_Port, SWITCH_4_Pin))==0)){
 8002e54:	e04c      	b.n	8002ef0 <Colorcheck+0x130>
	  //			 break;
	  		 }else{
	  		 	 target_pos= 0;
 8002e56:	4b30      	ldr	r3, [pc, #192]	; (8002f18 <Colorcheck+0x158>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
//	  			 calculatePID();
	  			 MotorDown();
 8002e5c:	f7fe fe88 	bl	8001b70 <MotorDown>
	  			 TIM12->CCR1 =924;
 8002e60:	4b2f      	ldr	r3, [pc, #188]	; (8002f20 <Colorcheck+0x160>)
 8002e62:	f44f 7267 	mov.w	r2, #924	; 0x39c
 8002e66:	635a      	str	r2, [r3, #52]	; 0x34
	  			TIM12->CCR2 =924;
 8002e68:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <Colorcheck+0x160>)
 8002e6a:	f44f 7267 	mov.w	r2, #924	; 0x39c
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38
	  		 if(((HAL_GPIO_ReadPin(SWITCH_3_GPIO_Port, SWITCH_3_Pin))==0 || (HAL_GPIO_ReadPin(SWITCH_4_GPIO_Port, SWITCH_4_Pin))==0)){
 8002e70:	e03e      	b.n	8002ef0 <Colorcheck+0x130>
	  		 }
	  	}else if(yellow==1 && target_pos == 1820){//target pos = 1800
 8002e72:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <Colorcheck+0x154>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d127      	bne.n	8002eca <Colorcheck+0x10a>
 8002e7a:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <Colorcheck+0x158>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f240 721c 	movw	r2, #1820	; 0x71c
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d121      	bne.n	8002eca <Colorcheck+0x10a>
	  		 if(((HAL_GPIO_ReadPin(SWITCH_2_GPIO_Port, SWITCH_2_Pin))==0 || (HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port, SWITCH_1_Pin))==0)){
 8002e86:	2101      	movs	r1, #1
 8002e88:	481b      	ldr	r0, [pc, #108]	; (8002ef8 <Colorcheck+0x138>)
 8002e8a:	f004 fb4d 	bl	8007528 <HAL_GPIO_ReadPin>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <Colorcheck+0xe2>
 8002e94:	2108      	movs	r1, #8
 8002e96:	481a      	ldr	r0, [pc, #104]	; (8002f00 <Colorcheck+0x140>)
 8002e98:	f004 fb46 	bl	8007528 <HAL_GPIO_ReadPin>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <Colorcheck+0xfc>
	  			 MotorStop();
 8002ea2:	f7fe fe7d 	bl	8001ba0 <MotorStop>
	  			 My_pos = 1820;
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <Colorcheck+0x15c>)
 8002ea8:	f240 721c 	movw	r2, #1820	; 0x71c
 8002eac:	601a      	str	r2, [r3, #0]
	  			 target_pos = 0;
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <Colorcheck+0x158>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
//	  			 TIM2->CNT = 182000;
	  			 yellow=0;
 8002eb4:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <Colorcheck+0x154>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
	  		 if(((HAL_GPIO_ReadPin(SWITCH_2_GPIO_Port, SWITCH_2_Pin))==0 || (HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port, SWITCH_1_Pin))==0)){
 8002eba:	e019      	b.n	8002ef0 <Colorcheck+0x130>
	  //			 break;
	  		 }else{
	  		 	 target_pos = 1820;
 8002ebc:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <Colorcheck+0x158>)
 8002ebe:	f240 721c 	movw	r2, #1820	; 0x71c
 8002ec2:	601a      	str	r2, [r3, #0]
//	  			 calculatePID();
	  			 MotorUp();
 8002ec4:	f7fe fe3c 	bl	8001b40 <MotorUp>
	  		 if(((HAL_GPIO_ReadPin(SWITCH_2_GPIO_Port, SWITCH_2_Pin))==0 || (HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port, SWITCH_1_Pin))==0)){
 8002ec8:	e012      	b.n	8002ef0 <Colorcheck+0x130>
	  		 }
	  	}else{
	  		if((HAL_GPIO_ReadPin(SWITCH_3_GPIO_Port, SWITCH_3_Pin) == 0) || (HAL_GPIO_ReadPin(SWITCH_4_GPIO_Port, SWITCH_4_Pin) == 0)){
 8002eca:	2102      	movs	r1, #2
 8002ecc:	480a      	ldr	r0, [pc, #40]	; (8002ef8 <Colorcheck+0x138>)
 8002ece:	f004 fb2b 	bl	8007528 <HAL_GPIO_ReadPin>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d006      	beq.n	8002ee6 <Colorcheck+0x126>
 8002ed8:	2110      	movs	r1, #16
 8002eda:	480c      	ldr	r0, [pc, #48]	; (8002f0c <Colorcheck+0x14c>)
 8002edc:	f004 fb24 	bl	8007528 <HAL_GPIO_ReadPin>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d104      	bne.n	8002ef0 <Colorcheck+0x130>
	  			MotorStop();
 8002ee6:	f7fe fe5b 	bl	8001ba0 <MotorStop>
	  			yellow = 0;
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <Colorcheck+0x154>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
	  		}
	  	 }
    osDelay(2);
 8002ef0:	2002      	movs	r0, #2
 8002ef2:	f008 ff71 	bl	800bdd8 <osDelay>
	  switch_1 = HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port, SWITCH_1_Pin);
 8002ef6:	e76f      	b.n	8002dd8 <Colorcheck+0x18>
 8002ef8:	40020800 	.word	0x40020800
 8002efc:	2000080c 	.word	0x2000080c
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	20000804 	.word	0x20000804
 8002f08:	20000808 	.word	0x20000808
 8002f0c:	40020000 	.word	0x40020000
 8002f10:	20000810 	.word	0x20000810
 8002f14:	200007f0 	.word	0x200007f0
 8002f18:	2000081c 	.word	0x2000081c
 8002f1c:	20000820 	.word	0x20000820
 8002f20:	40001800 	.word	0x40001800

08002f24 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	setup();
 8002f2c:	f002 fb48 	bl	80055c0 <setup>
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port, SWITCH_1_Pin)==1){
 8002f30:	2108      	movs	r1, #8
 8002f32:	4860      	ldr	r0, [pc, #384]	; (80030b4 <StartTask05+0x190>)
 8002f34:	f004 faf8 	bl	8007528 <HAL_GPIO_ReadPin>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d108      	bne.n	8002f50 <StartTask05+0x2c>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000001;
 8002f3e:	4b5e      	ldr	r3, [pc, #376]	; (80030b8 <StartTask05+0x194>)
 8002f40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	b21a      	sxth	r2, r3
 8002f4a:	4b5b      	ldr	r3, [pc, #364]	; (80030b8 <StartTask05+0x194>)
 8002f4c:	811a      	strh	r2, [r3, #8]
 8002f4e:	e007      	b.n	8002f60 <StartTask05+0x3c>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111110;
 8002f50:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <StartTask05+0x194>)
 8002f52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f56:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f5a:	b21a      	sxth	r2, r3
 8002f5c:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <StartTask05+0x194>)
 8002f5e:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port, SWITCH_1_Pin)==1){
 8002f60:	2108      	movs	r1, #8
 8002f62:	4854      	ldr	r0, [pc, #336]	; (80030b4 <StartTask05+0x190>)
 8002f64:	f004 fae0 	bl	8007528 <HAL_GPIO_ReadPin>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d108      	bne.n	8002f80 <StartTask05+0x5c>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000010;
 8002f6e:	4b52      	ldr	r3, [pc, #328]	; (80030b8 <StartTask05+0x194>)
 8002f70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f74:	f043 0302 	orr.w	r3, r3, #2
 8002f78:	b21a      	sxth	r2, r3
 8002f7a:	4b4f      	ldr	r3, [pc, #316]	; (80030b8 <StartTask05+0x194>)
 8002f7c:	811a      	strh	r2, [r3, #8]
 8002f7e:	e007      	b.n	8002f90 <StartTask05+0x6c>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111101;
 8002f80:	4b4d      	ldr	r3, [pc, #308]	; (80030b8 <StartTask05+0x194>)
 8002f82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f86:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002f8a:	b21a      	sxth	r2, r3
 8002f8c:	4b4a      	ldr	r3, [pc, #296]	; (80030b8 <StartTask05+0x194>)
 8002f8e:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(SWITCH_3_GPIO_Port, SWITCH_3_Pin)==1){
 8002f90:	2102      	movs	r1, #2
 8002f92:	484a      	ldr	r0, [pc, #296]	; (80030bc <StartTask05+0x198>)
 8002f94:	f004 fac8 	bl	8007528 <HAL_GPIO_ReadPin>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d108      	bne.n	8002fb0 <StartTask05+0x8c>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000100;
 8002f9e:	4b46      	ldr	r3, [pc, #280]	; (80030b8 <StartTask05+0x194>)
 8002fa0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fa4:	f043 0304 	orr.w	r3, r3, #4
 8002fa8:	b21a      	sxth	r2, r3
 8002faa:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <StartTask05+0x194>)
 8002fac:	811a      	strh	r2, [r3, #8]
 8002fae:	e007      	b.n	8002fc0 <StartTask05+0x9c>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111011;
 8002fb0:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <StartTask05+0x194>)
 8002fb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fb6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8002fba:	b21a      	sxth	r2, r3
 8002fbc:	4b3e      	ldr	r3, [pc, #248]	; (80030b8 <StartTask05+0x194>)
 8002fbe:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(SWITCH_3_GPIO_Port, SWITCH_3_Pin)==1){
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	483e      	ldr	r0, [pc, #248]	; (80030bc <StartTask05+0x198>)
 8002fc4:	f004 fab0 	bl	8007528 <HAL_GPIO_ReadPin>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d108      	bne.n	8002fe0 <StartTask05+0xbc>
	  		  sensor_buff[4]=sensor_buff[4]|0b00001000;
 8002fce:	4b3a      	ldr	r3, [pc, #232]	; (80030b8 <StartTask05+0x194>)
 8002fd0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fd4:	f043 0308 	orr.w	r3, r3, #8
 8002fd8:	b21a      	sxth	r2, r3
 8002fda:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <StartTask05+0x194>)
 8002fdc:	811a      	strh	r2, [r3, #8]
 8002fde:	e007      	b.n	8002ff0 <StartTask05+0xcc>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11110111;
 8002fe0:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <StartTask05+0x194>)
 8002fe2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fe6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8002fea:	b21a      	sxth	r2, r3
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <StartTask05+0x194>)
 8002fee:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(SWITCH_5_GPIO_Port, SWITCH_5_Pin)==1){
 8002ff0:	2104      	movs	r1, #4
 8002ff2:	4830      	ldr	r0, [pc, #192]	; (80030b4 <StartTask05+0x190>)
 8002ff4:	f004 fa98 	bl	8007528 <HAL_GPIO_ReadPin>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d108      	bne.n	8003010 <StartTask05+0xec>
	  		  sensor_buff[4]=sensor_buff[4]|0b00010000;
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <StartTask05+0x194>)
 8003000:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003004:	f043 0310 	orr.w	r3, r3, #16
 8003008:	b21a      	sxth	r2, r3
 800300a:	4b2b      	ldr	r3, [pc, #172]	; (80030b8 <StartTask05+0x194>)
 800300c:	811a      	strh	r2, [r3, #8]
 800300e:	e007      	b.n	8003020 <StartTask05+0xfc>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11101111;
 8003010:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <StartTask05+0x194>)
 8003012:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003016:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800301a:	b21a      	sxth	r2, r3
 800301c:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <StartTask05+0x194>)
 800301e:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(SWITCH_5_GPIO_Port, SWITCH_5_Pin)==1){
 8003020:	2104      	movs	r1, #4
 8003022:	4824      	ldr	r0, [pc, #144]	; (80030b4 <StartTask05+0x190>)
 8003024:	f004 fa80 	bl	8007528 <HAL_GPIO_ReadPin>
 8003028:	4603      	mov	r3, r0
 800302a:	2b01      	cmp	r3, #1
 800302c:	d108      	bne.n	8003040 <StartTask05+0x11c>
	  		  sensor_buff[4]=sensor_buff[4]|0b00100000;
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <StartTask05+0x194>)
 8003030:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003034:	f043 0320 	orr.w	r3, r3, #32
 8003038:	b21a      	sxth	r2, r3
 800303a:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <StartTask05+0x194>)
 800303c:	811a      	strh	r2, [r3, #8]
 800303e:	e007      	b.n	8003050 <StartTask05+0x12c>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11011111;
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <StartTask05+0x194>)
 8003042:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003046:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800304a:	b21a      	sxth	r2, r3
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <StartTask05+0x194>)
 800304e:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin)==1){
 8003050:	2104      	movs	r1, #4
 8003052:	481b      	ldr	r0, [pc, #108]	; (80030c0 <StartTask05+0x19c>)
 8003054:	f004 fa68 	bl	8007528 <HAL_GPIO_ReadPin>
 8003058:	4603      	mov	r3, r0
 800305a:	2b01      	cmp	r3, #1
 800305c:	d108      	bne.n	8003070 <StartTask05+0x14c>
	  		  sensor_buff[4]=sensor_buff[4]|0b01000000;
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <StartTask05+0x194>)
 8003060:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003068:	b21a      	sxth	r2, r3
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <StartTask05+0x194>)
 800306c:	811a      	strh	r2, [r3, #8]
 800306e:	e007      	b.n	8003080 <StartTask05+0x15c>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b10111111;
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <StartTask05+0x194>)
 8003072:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003076:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800307a:	b21a      	sxth	r2, r3
 800307c:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <StartTask05+0x194>)
 800307e:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  sensor_buff[0]=M1.en_speed;
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <StartTask05+0x1a0>)
 8003082:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <StartTask05+0x194>)
 8003088:	801a      	strh	r2, [r3, #0]
	  	  sensor_buff[1]=M2.en_speed;
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <StartTask05+0x1a4>)
 800308c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <StartTask05+0x194>)
 8003092:	805a      	strh	r2, [r3, #2]
	  	  sensor_buff[2]=M3.en_speed;
 8003094:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <StartTask05+0x1a8>)
 8003096:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <StartTask05+0x194>)
 800309c:	809a      	strh	r2, [r3, #4]
	  	  sensor_buff[3]=M4.en_speed;
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <StartTask05+0x1ac>)
 80030a0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <StartTask05+0x194>)
 80030a6:	80da      	strh	r2, [r3, #6]
	  	  loop();
 80030a8:	f002 faa0 	bl	80055ec <loop>
    osDelay(10);
 80030ac:	200a      	movs	r0, #10
 80030ae:	f008 fe93 	bl	800bdd8 <osDelay>
	  if(HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port, SWITCH_1_Pin)==1){
 80030b2:	e73d      	b.n	8002f30 <StartTask05+0xc>
 80030b4:	40020c00 	.word	0x40020c00
 80030b8:	20000838 	.word	0x20000838
 80030bc:	40020800 	.word	0x40020800
 80030c0:	40021800 	.word	0x40021800
 80030c4:	20000844 	.word	0x20000844
 80030c8:	2000084c 	.word	0x2000084c
 80030cc:	20000854 	.word	0x20000854
 80030d0:	2000085c 	.word	0x2000085c

080030d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030d8:	b672      	cpsid	i
}
 80030da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030dc:	e7fe      	b.n	80030dc <Error_Handler+0x8>

080030de <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	4a04      	ldr	r2, [pc, #16]	; (800311c <_ZN3ros3MsgC1Ev+0x1c>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	0800f1dc 	.word	0x0800f1dc

08003120 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
      data()
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ffe8 	bl	8003100 <_ZN3ros3MsgC1Ev>
 8003130:	4a06      	ldr	r2, [pc, #24]	; (800314c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ffcf 	bl	80030de <_ZN3ros4TimeC1Ev>
    {
    }
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	0800f1c4 	.word	0x0800f1c4

08003150 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6859      	ldr	r1, [r3, #4]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	4413      	add	r3, r2
 8003168:	b2ca      	uxtb	r2, r1
 800316a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	0a19      	lsrs	r1, r3, #8
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3301      	adds	r3, #1
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	4413      	add	r3, r2
 800317a:	b2ca      	uxtb	r2, r1
 800317c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	0c19      	lsrs	r1, r3, #16
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3302      	adds	r3, #2
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	4413      	add	r3, r2
 800318c:	b2ca      	uxtb	r2, r1
 800318e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	0e19      	lsrs	r1, r3, #24
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3303      	adds	r3, #3
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	4413      	add	r3, r2
 800319e:	b2ca      	uxtb	r2, r1
 80031a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3304      	adds	r3, #4
 80031a6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6899      	ldr	r1, [r3, #8]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	4413      	add	r3, r2
 80031b2:	b2ca      	uxtb	r2, r1
 80031b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0a19      	lsrs	r1, r3, #8
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3301      	adds	r3, #1
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	b2ca      	uxtb	r2, r1
 80031c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	0c19      	lsrs	r1, r3, #16
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3302      	adds	r3, #2
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	4413      	add	r3, r2
 80031d6:	b2ca      	uxtb	r2, r1
 80031d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0e19      	lsrs	r1, r3, #24
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3303      	adds	r3, #3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	4413      	add	r3, r2
 80031e8:	b2ca      	uxtb	r2, r1
 80031ea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	3304      	adds	r3, #4
 80031f0:	60fb      	str	r3, [r7, #12]
      return offset;
 80031f2:	68fb      	ldr	r3, [r7, #12]
    }
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	4413      	add	r3, r2
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3301      	adds	r3, #1
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	440b      	add	r3, r1
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3302      	adds	r3, #2
 800323a:	6839      	ldr	r1, [r7, #0]
 800323c:	440b      	add	r3, r1
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	041b      	lsls	r3, r3, #16
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3303      	adds	r3, #3
 8003250:	6839      	ldr	r1, [r7, #0]
 8003252:	440b      	add	r3, r1
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3304      	adds	r3, #4
 8003262:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	4413      	add	r3, r2
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3301      	adds	r3, #1
 800327a:	6839      	ldr	r1, [r7, #0]
 800327c:	440b      	add	r3, r1
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3302      	adds	r3, #2
 8003290:	6839      	ldr	r1, [r7, #0]
 8003292:	440b      	add	r3, r1
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	041b      	lsls	r3, r3, #16
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	3303      	adds	r3, #3
 80032a6:	6839      	ldr	r1, [r7, #0]
 80032a8:	440b      	add	r3, r1
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3304      	adds	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]
     return offset;
 80032ba:	68fb      	ldr	r3, [r7, #12]
    }
 80032bc:	4618      	mov	r0, r3
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	0800edd4 	.word	0x0800edd4

080032e4 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	0800ede4 	.word	0x0800ede4

08003300 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fef8 	bl	8003100 <_ZN3ros3MsgC1Ev>
 8003310:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a09      	ldr	r2, [pc, #36]	; (8003344 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003320:	609a      	str	r2, [r3, #8]
      message_type(""),
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a07      	ldr	r2, [pc, #28]	; (8003344 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003326:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a06      	ldr	r2, [pc, #24]	; (8003344 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800332c:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	615a      	str	r2, [r3, #20]
    {
    }
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	0800f1ac 	.word	0x0800f1ac
 8003344:	0800ee08 	.word	0x0800ee08

08003348 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8899      	ldrh	r1, [r3, #4]
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	4413      	add	r3, r2
 8003360:	b2ca      	uxtb	r2, r1
 8003362:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	889b      	ldrh	r3, [r3, #4]
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	b299      	uxth	r1, r3
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	3301      	adds	r3, #1
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	4413      	add	r3, r2
 8003374:	b2ca      	uxtb	r2, r1
 8003376:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	3302      	adds	r3, #2
 800337c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fc ff44 	bl	8000210 <strlen>
 8003388:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	4413      	add	r3, r2
 8003390:	69b9      	ldr	r1, [r7, #24]
 8003392:	4618      	mov	r0, r3
 8003394:	f002 f93e 	bl	8005614 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	3304      	adds	r3, #4
 800339c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	18d0      	adds	r0, r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4619      	mov	r1, r3
 80033ac:	f00b fb80 	bl	800eab0 <memcpy>
      offset += length_topic_name;
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	4413      	add	r3, r2
 80033b6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fc ff27 	bl	8000210 <strlen>
 80033c2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	4413      	add	r3, r2
 80033ca:	6979      	ldr	r1, [r7, #20]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f002 f921 	bl	8005614 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3304      	adds	r3, #4
 80033d6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	18d0      	adds	r0, r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4619      	mov	r1, r3
 80033e6:	f00b fb63 	bl	800eab0 <memcpy>
      offset += length_message_type;
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	4413      	add	r3, r2
 80033f0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fc ff0a 	bl	8000210 <strlen>
 80033fc:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	4413      	add	r3, r2
 8003404:	6939      	ldr	r1, [r7, #16]
 8003406:	4618      	mov	r0, r3
 8003408:	f002 f904 	bl	8005614 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	3304      	adds	r3, #4
 8003410:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	18d0      	adds	r0, r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4619      	mov	r1, r3
 8003420:	f00b fb46 	bl	800eab0 <memcpy>
      offset += length_md5sum;
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4413      	add	r3, r2
 800342a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003432:	68f9      	ldr	r1, [r7, #12]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	4413      	add	r3, r2
 800343a:	b2ca      	uxtb	r2, r1
 800343c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	0a19      	lsrs	r1, r3, #8
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3301      	adds	r3, #1
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	4413      	add	r3, r2
 800344a:	b2ca      	uxtb	r2, r1
 800344c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	0c19      	lsrs	r1, r3, #16
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3302      	adds	r3, #2
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	4413      	add	r3, r2
 800345a:	b2ca      	uxtb	r2, r1
 800345c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	0e19      	lsrs	r1, r3, #24
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3303      	adds	r3, #3
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	4413      	add	r3, r2
 800346a:	b2ca      	uxtb	r2, r1
 800346c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3304      	adds	r3, #4
 8003472:	61fb      	str	r3, [r7, #28]
      return offset;
 8003474:	69fb      	ldr	r3, [r7, #28]
    }
 8003476:	4618      	mov	r0, r3
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800347e:	b580      	push	{r7, lr}
 8003480:	b08a      	sub	sp, #40	; 0x28
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	4413      	add	r3, r2
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	b29a      	uxth	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	889b      	ldrh	r3, [r3, #4]
 800349e:	b21a      	sxth	r2, r3
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	3301      	adds	r3, #1
 80034a4:	6839      	ldr	r1, [r7, #0]
 80034a6:	440b      	add	r3, r1
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	b21b      	sxth	r3, r3
 80034ae:	4313      	orrs	r3, r2
 80034b0:	b21b      	sxth	r3, r3
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	3302      	adds	r3, #2
 80034bc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	441a      	add	r2, r3
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f002 f8c1 	bl	8005652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	3304      	adds	r3, #4
 80034d4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
 80034da:	e00b      	b.n	80034f4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	441a      	add	r2, r3
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	3b01      	subs	r3, #1
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	440b      	add	r3, r1
 80034ea:	7812      	ldrb	r2, [r2, #0]
 80034ec:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	3301      	adds	r3, #1
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	4413      	add	r3, r2
 80034fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d3ed      	bcc.n	80034dc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	4413      	add	r3, r2
 8003506:	3b01      	subs	r3, #1
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	4413      	add	r3, r2
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	3b01      	subs	r3, #1
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	441a      	add	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	4413      	add	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	441a      	add	r2, r3
 800352a:	f107 0310 	add.w	r3, r7, #16
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f002 f88e 	bl	8005652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	3304      	adds	r3, #4
 800353a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	e00b      	b.n	800355a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	441a      	add	r2, r3
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	3b01      	subs	r3, #1
 800354c:	6839      	ldr	r1, [r7, #0]
 800354e:	440b      	add	r3, r1
 8003550:	7812      	ldrb	r2, [r2, #0]
 8003552:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	3301      	adds	r3, #1
 8003558:	623b      	str	r3, [r7, #32]
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4413      	add	r3, r2
 8003560:	6a3a      	ldr	r2, [r7, #32]
 8003562:	429a      	cmp	r2, r3
 8003564:	d3ed      	bcc.n	8003542 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4413      	add	r3, r2
 800356c:	3b01      	subs	r3, #1
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	4413      	add	r3, r2
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	3b01      	subs	r3, #1
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	441a      	add	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4413      	add	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	441a      	add	r2, r3
 8003590:	f107 030c 	add.w	r3, r7, #12
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f002 f85b 	bl	8005652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	3304      	adds	r3, #4
 80035a0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	e00b      	b.n	80035c0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	441a      	add	r2, r3
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	6839      	ldr	r1, [r7, #0]
 80035b4:	440b      	add	r3, r1
 80035b6:	7812      	ldrb	r2, [r2, #0]
 80035b8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3301      	adds	r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d3ed      	bcc.n	80035a8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4413      	add	r3, r2
 80035d2:	3b01      	subs	r3, #1
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	3b01      	subs	r3, #1
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	441a      	add	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4413      	add	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	440a      	add	r2, r1
 80035fc:	7812      	ldrb	r2, [r2, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	3301      	adds	r3, #1
 8003608:	6839      	ldr	r1, [r7, #0]
 800360a:	440b      	add	r3, r1
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	4313      	orrs	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	3302      	adds	r3, #2
 800361a:	6839      	ldr	r1, [r7, #0]
 800361c:	440b      	add	r3, r1
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	041b      	lsls	r3, r3, #16
 8003622:	4313      	orrs	r3, r2
 8003624:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	3303      	adds	r3, #3
 800362c:	6839      	ldr	r1, [r7, #0]
 800362e:	440b      	add	r3, r1
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	061b      	lsls	r3, r3, #24
 8003634:	4313      	orrs	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	3304      	adds	r3, #4
 8003642:	61bb      	str	r3, [r7, #24]
     return offset;
 8003644:	69bb      	ldr	r3, [r7, #24]
    }
 8003646:	4618      	mov	r0, r3
 8003648:	3728      	adds	r7, #40	; 0x28
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	0800ee0c 	.word	0x0800ee0c

0800366c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	0800ee28 	.word	0x0800ee28

08003688 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fd34 	bl	8003100 <_ZN3ros3MsgC1Ev>
 8003698:	4a06      	ldr	r2, [pc, #24]	; (80036b4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	601a      	str	r2, [r3, #0]
      level(0),
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	711a      	strb	r2, [r3, #4]
      msg("")
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80036a8:	609a      	str	r2, [r3, #8]
    {
    }
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	0800f194 	.word	0x0800f194
 80036b8:	0800ee08 	.word	0x0800ee08

080036bc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	4413      	add	r3, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	7912      	ldrb	r2, [r2, #4]
 80036d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3301      	adds	r3, #1
 80036da:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fc fd95 	bl	8000210 <strlen>
 80036e6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	4413      	add	r3, r2
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 ff8f 	bl	8005614 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3304      	adds	r3, #4
 80036fa:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	18d0      	adds	r0, r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	4619      	mov	r1, r3
 800370a:	f00b f9d1 	bl	800eab0 <memcpy>
      offset += length_msg;
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4413      	add	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
      return offset;
 8003716:	68fb      	ldr	r3, [r7, #12]
    }
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	4413      	add	r3, r2
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	3301      	adds	r3, #1
 800373e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	441a      	add	r2, r3
 8003746:	f107 030c 	add.w	r3, r7, #12
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f001 ff80 	bl	8005652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	3304      	adds	r3, #4
 8003756:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e00b      	b.n	8003776 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	441a      	add	r2, r3
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3b01      	subs	r3, #1
 8003768:	6839      	ldr	r1, [r7, #0]
 800376a:	440b      	add	r3, r1
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	3301      	adds	r3, #1
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	429a      	cmp	r2, r3
 8003780:	d3ed      	bcc.n	800375e <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	3b01      	subs	r3, #1
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	4413      	add	r3, r2
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	3b01      	subs	r3, #1
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	441a      	add	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4413      	add	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
     return offset;
 80037a6:	693b      	ldr	r3, [r7, #16]
    }
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	0800ee4c 	.word	0x0800ee4c

080037cc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	4b03      	ldr	r3, [pc, #12]	; (80037e4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	0800ee60 	.word	0x0800ee60

080037e8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fc84 	bl	8003100 <_ZN3ros3MsgC1Ev>
 80037f8:	4a11      	ldr	r2, [pc, #68]	; (8003840 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	611a      	str	r2, [r3, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	615a      	str	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	61da      	str	r2, [r3, #28]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	621a      	str	r2, [r3, #32]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	0800f17c 	.word	0x0800f17c

08003844 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6859      	ldr	r1, [r3, #4]
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	4413      	add	r3, r2
 800385c:	b2ca      	uxtb	r2, r1
 800385e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0a19      	lsrs	r1, r3, #8
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	3301      	adds	r3, #1
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	4413      	add	r3, r2
 800386e:	b2ca      	uxtb	r2, r1
 8003870:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	0c19      	lsrs	r1, r3, #16
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	3302      	adds	r3, #2
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	4413      	add	r3, r2
 8003880:	b2ca      	uxtb	r2, r1
 8003882:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	0e19      	lsrs	r1, r3, #24
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	3303      	adds	r3, #3
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	4413      	add	r3, r2
 8003892:	b2ca      	uxtb	r2, r1
 8003894:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	3304      	adds	r3, #4
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800389c:	2300      	movs	r3, #0
 800389e:	623b      	str	r3, [r7, #32]
 80038a0:	e02a      	b.n	80038f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80038b0:	6939      	ldr	r1, [r7, #16]
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	4413      	add	r3, r2
 80038b8:	b2ca      	uxtb	r2, r1
 80038ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	0a19      	lsrs	r1, r3, #8
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	3301      	adds	r3, #1
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	4413      	add	r3, r2
 80038c8:	b2ca      	uxtb	r2, r1
 80038ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	0c19      	lsrs	r1, r3, #16
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	3302      	adds	r3, #2
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	4413      	add	r3, r2
 80038d8:	b2ca      	uxtb	r2, r1
 80038da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	0e19      	lsrs	r1, r3, #24
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	3303      	adds	r3, #3
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	4413      	add	r3, r2
 80038e8:	b2ca      	uxtb	r2, r1
 80038ea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	3304      	adds	r3, #4
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	3301      	adds	r3, #1
 80038f6:	623b      	str	r3, [r7, #32]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	6a3a      	ldr	r2, [r7, #32]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d3cf      	bcc.n	80038a2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6919      	ldr	r1, [r3, #16]
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	4413      	add	r3, r2
 800390c:	b2ca      	uxtb	r2, r1
 800390e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	0a19      	lsrs	r1, r3, #8
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	3301      	adds	r3, #1
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	4413      	add	r3, r2
 800391e:	b2ca      	uxtb	r2, r1
 8003920:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	0c19      	lsrs	r1, r3, #16
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	3302      	adds	r3, #2
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	4413      	add	r3, r2
 8003930:	b2ca      	uxtb	r2, r1
 8003932:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	0e19      	lsrs	r1, r3, #24
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	3303      	adds	r3, #3
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	4413      	add	r3, r2
 8003942:	b2ca      	uxtb	r2, r1
 8003944:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	3304      	adds	r3, #4
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800394c:	2300      	movs	r3, #0
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	e02a      	b.n	80039a8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003960:	68f9      	ldr	r1, [r7, #12]
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	4413      	add	r3, r2
 8003968:	b2ca      	uxtb	r2, r1
 800396a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	0a19      	lsrs	r1, r3, #8
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	3301      	adds	r3, #1
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	4413      	add	r3, r2
 8003978:	b2ca      	uxtb	r2, r1
 800397a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	0c19      	lsrs	r1, r3, #16
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	3302      	adds	r3, #2
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	4413      	add	r3, r2
 8003988:	b2ca      	uxtb	r2, r1
 800398a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	0e19      	lsrs	r1, r3, #24
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	3303      	adds	r3, #3
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	4413      	add	r3, r2
 8003998:	b2ca      	uxtb	r2, r1
 800399a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	3304      	adds	r3, #4
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3301      	adds	r3, #1
 80039a6:	61fb      	str	r3, [r7, #28]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d3cf      	bcc.n	8003952 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69d9      	ldr	r1, [r3, #28]
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	4413      	add	r3, r2
 80039bc:	b2ca      	uxtb	r2, r1
 80039be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	0a19      	lsrs	r1, r3, #8
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	3301      	adds	r3, #1
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	4413      	add	r3, r2
 80039ce:	b2ca      	uxtb	r2, r1
 80039d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	0c19      	lsrs	r1, r3, #16
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	3302      	adds	r3, #2
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	4413      	add	r3, r2
 80039e0:	b2ca      	uxtb	r2, r1
 80039e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	0e19      	lsrs	r1, r3, #24
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	3303      	adds	r3, #3
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	4413      	add	r3, r2
 80039f2:	b2ca      	uxtb	r2, r1
 80039f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	3304      	adds	r3, #4
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	e027      	b.n	8003a52 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fc fbfe 	bl	8000210 <strlen>
 8003a14:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	6979      	ldr	r1, [r7, #20]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 fdf8 	bl	8005614 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	3304      	adds	r3, #4
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	18d0      	adds	r0, r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f00b f836 	bl	800eab0 <memcpy>
      offset += length_stringsi;
 8003a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	4413      	add	r3, r2
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d3d2      	bcc.n	8003a02 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3728      	adds	r7, #40	; 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b08e      	sub	sp, #56	; 0x38
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	4413      	add	r3, r2
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a80:	3301      	adds	r3, #1
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	4413      	add	r3, r2
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	021b      	lsls	r3, r3, #8
 8003a8a:	6a3a      	ldr	r2, [r7, #32]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	3302      	adds	r3, #2
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	4413      	add	r3, r2
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	041b      	lsls	r3, r3, #16
 8003a9c:	6a3a      	ldr	r2, [r7, #32]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa4:	3303      	adds	r3, #3
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	6a3a      	ldr	r2, [r7, #32]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	6a3a      	ldr	r2, [r7, #32]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d90a      	bls.n	8003ada <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f00a ff82 	bl	800e9d8 <realloc>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a3a      	ldr	r2, [r7, #32]
 8003ade:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ae4:	e035      	b.n	8003b52 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aee:	6839      	ldr	r1, [r7, #0]
 8003af0:	440a      	add	r2, r1
 8003af2:	7812      	ldrb	r2, [r2, #0]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afc:	3301      	adds	r3, #1
 8003afe:	6839      	ldr	r1, [r7, #0]
 8003b00:	440b      	add	r3, r1
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0e:	3302      	adds	r3, #2
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	440b      	add	r3, r1
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b20:	3303      	adds	r3, #3
 8003b22:	6839      	ldr	r1, [r7, #0]
 8003b24:	440b      	add	r3, r1
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b36:	3304      	adds	r3, #4
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	3208      	adds	r2, #8
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	3301      	adds	r3, #1
 8003b50:	633b      	str	r3, [r7, #48]	; 0x30
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d3c4      	bcc.n	8003ae6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b68:	3301      	adds	r3, #1
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	4413      	add	r3, r2
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	041b      	lsls	r3, r3, #16
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8c:	3303      	adds	r3, #3
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	4413      	add	r3, r2
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d90a      	bls.n	8003bc2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	f00a ff0e 	bl	800e9d8 <realloc>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003bc8:	2300      	movs	r3, #0
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bcc:	e035      	b.n	8003c3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd6:	6839      	ldr	r1, [r7, #0]
 8003bd8:	440a      	add	r2, r1
 8003bda:	7812      	ldrb	r2, [r2, #0]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be4:	3301      	adds	r3, #1
 8003be6:	6839      	ldr	r1, [r7, #0]
 8003be8:	440b      	add	r3, r1
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	6839      	ldr	r1, [r7, #0]
 8003bfa:	440b      	add	r3, r1
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c08:	3303      	adds	r3, #3
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	440b      	add	r3, r1
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	061b      	lsls	r3, r3, #24
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1e:	3304      	adds	r3, #4
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	3214      	adds	r2, #20
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c36:	3301      	adds	r3, #1
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d3c4      	bcc.n	8003bce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	4413      	add	r3, r2
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c50:	3301      	adds	r3, #1
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	4413      	add	r3, r2
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c62:	3302      	adds	r3, #2
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	4413      	add	r3, r2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c74:	3303      	adds	r3, #3
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	4413      	add	r3, r2
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	3304      	adds	r3, #4
 8003c88:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d90a      	bls.n	8003caa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f00a fe9a 	bl	800e9d8 <realloc>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb4:	e03e      	b.n	8003d34 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	441a      	add	r2, r3
 8003cbc:	f107 030c 	add.w	r3, r7, #12
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 fcc5 	bl	8005652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cca:	3304      	adds	r3, #4
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	e00b      	b.n	8003cec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	441a      	add	r2, r3
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	440b      	add	r3, r1
 8003ce2:	7812      	ldrb	r2, [r2, #0]
 8003ce4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	3301      	adds	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
 8003cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d3ed      	bcc.n	8003cd4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	4413      	add	r3, r2
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	441a      	add	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	3220      	adds	r2, #32
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	3301      	adds	r3, #1
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d3bb      	bcc.n	8003cb6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8003d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003d40:	4618      	mov	r0, r3
 8003d42:	3738      	adds	r7, #56	; 0x38
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	0800f070 	.word	0x0800f070

08003d64 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	0800ee84 	.word	0x0800ee84

08003d80 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	611a      	str	r2, [r3, #16]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68d8      	ldr	r0, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6891      	ldr	r1, [r2, #8]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	4798      	blx	r3
 8003dcc:	4603      	mov	r3, r0
  };
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
  }
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <_ZN11SerialClassC1ER20__UART_HandleTypeDef>:
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dfe:	2201      	movs	r2, #1
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e08:	2200      	movs	r2, #0
 8003e0a:	805a      	strh	r2, [r3, #2]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e12:	2200      	movs	r2, #0
 8003e14:	809a      	strh	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	80da      	strh	r2, [r3, #6]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e26:	461a      	mov	r2, r3
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6093      	str	r3, [r2, #8]
	{
		//this->huart = huart;
	}
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e48:	689b      	ldr	r3, [r3, #8]
	}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <_ZN11SerialClass9start_dmaEv>:

	inline void start_dma(void)
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e64:	2201      	movs	r2, #1
 8003e66:	701a      	strb	r2, [r3, #0]
		rx_tail = 0;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6e:	2200      	movs	r2, #0
 8003e70:	805a      	strh	r2, [r3, #2]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e78:	6898      	ldr	r0, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e84:	4619      	mov	r1, r3
 8003e86:	f007 f855 	bl	800af34 <HAL_UART_Receive_DMA>
	}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <_ZN11SerialClass4readEv>:



	inline int read(void)
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
	{
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->NDTR)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8003eae:	b29b      	uxth	r3, r3
				& buf_mask;
 8003eb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eb4:	81fb      	strh	r3, [r7, #14]
		if (rx_tail == rx_head)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebc:	885b      	ldrh	r3, [r3, #2]
 8003ebe:	89fa      	ldrh	r2, [r7, #14]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d102      	bne.n	8003eca <_ZN11SerialClass4readEv+0x38>
		{
			return -1;
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec8:	e01b      	b.n	8003f02 <_ZN11SerialClass4readEv+0x70>
		}

		int c = (int) rx_buf[rx_tail++];
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed0:	885b      	ldrh	r3, [r3, #2]
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	b291      	uxth	r1, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003edc:	8051      	strh	r1, [r2, #2]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8003ee8:	60bb      	str	r3, [r7, #8]
		rx_tail &= buf_mask;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef0:	885b      	ldrh	r3, [r3, #2]
 8003ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efe:	805a      	strh	r2, [r3, #2]
		return c;
 8003f00:	68bb      	ldr	r3, [r7, #8]
	}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <_ZN11SerialClass5writeEPKhi>:

	inline void write(const uint8_t * const c, const int length)
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
	{
		if (length > BUF_SIZE || length < 1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f20:	dc35      	bgt.n	8003f8e <_ZN11SerialClass5writeEPKhi+0x80>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	dd32      	ble.n	8003f8e <_ZN11SerialClass5writeEPKhi+0x80>
		{
			return;
		}

		while(!tx_cplt)
 8003f28:	bf00      	nop
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	f083 0301 	eor.w	r3, r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f6      	bne.n	8003f2a <_ZN11SerialClass5writeEPKhi+0x1c>
		{

		}

		for (int i = 0; i < length; i++)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e00b      	b.n	8003f5a <_ZN11SerialClass5writeEPKhi+0x4c>
		{
			tx_buf[i] = c[i];
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	4413      	add	r3, r2
 8003f48:	7819      	ldrb	r1, [r3, #0]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	4413      	add	r3, r2
 8003f50:	460a      	mov	r2, r1
 8003f52:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	3301      	adds	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	dbef      	blt.n	8003f42 <_ZN11SerialClass5writeEPKhi+0x34>
		}

		if(tx_cplt)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d010      	beq.n	8003f90 <_ZN11SerialClass5writeEPKhi+0x82>
		{
			tx_cplt = false;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	68f9      	ldr	r1, [r7, #12]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	b292      	uxth	r2, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f006 ff58 	bl	800ae3c <HAL_UART_Transmit_DMA>
 8003f8c:	e000      	b.n	8003f90 <_ZN11SerialClass5writeEPKhi+0x82>
			return;
 8003f8e:	bf00      	nop
		}
	}
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
	}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <_ZN11SerialClass10reset_rbufEv>:

    inline void reset_rbuf(void){
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc2:	6898      	ldr	r0, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fce:	4619      	mov	r1, r3
 8003fd0:	f006 ffb0 	bl	800af34 <HAL_UART_Receive_DMA>
    }
 8003fd4:	bf00      	nop
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_UART_TxCpltCallback>:
SerialClass serial(huart2);
//SerialClass serial(huart2);
//SerialClass serial(huart3);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681c      	ldr	r4, [r3, #0]
 8003fe8:	4809      	ldr	r0, [pc, #36]	; (8004010 <HAL_UART_TxCpltCallback+0x34>)
 8003fea:	f7ff ff26 	bl	8003e3a <_ZN11SerialClass10get_handleEv>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	429c      	cmp	r4, r3
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2301      	moveq	r3, #1
 8003ff8:	2300      	movne	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 8004000:	4803      	ldr	r0, [pc, #12]	; (8004010 <HAL_UART_TxCpltCallback+0x34>)
 8004002:	f7ff ffc8 	bl	8003f96 <_ZN11SerialClass16tx_cplt_callbackEv>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bd90      	pop	{r4, r7, pc}
 800400e:	bf00      	nop
 8004010:	20000888 	.word	0x20000888

08004014 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	serial.reset_rbuf();
 800401c:	4803      	ldr	r0, [pc, #12]	; (800402c <HAL_UART_RxCpltCallback+0x18>)
 800401e:	f7ff ffc9 	bl	8003fb4 <_ZN11SerialClass10reset_rbufEv>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000888 	.word	0x20000888

08004030 <_ZN13STM32HardwareC1Ev>:
#include "SerialClass.h"

class STM32Hardware
{
public:
	STM32Hardware() :
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
			com(&serial)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a04      	ldr	r2, [pc, #16]	; (800404c <_ZN13STM32HardwareC1Ev+0x1c>)
 800403c:	601a      	str	r2, [r3, #0]
	{

	}
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	20000888 	.word	0x20000888

08004050 <_ZN13STM32Hardware4initEv>:

	void init()
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	{
		com->start_dma();
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff fefa 	bl	8003e56 <_ZN11SerialClass9start_dmaEv>
	}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <_ZN13STM32Hardware4readEv>:

	int read()
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
	{
		return com->read();
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff ff0b 	bl	8003e92 <_ZN11SerialClass4readEv>
 800407c:	4603      	mov	r3, r0
	}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t* data, int length)
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
	{
		com->write(data, length);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff ff37 	bl	8003f0e <_ZN11SerialClass5writeEPKhi>
	}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <_ZN13STM32Hardware4timeEv>:

	unsigned long time()
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 80040b0:	f002 fdc2 	bl	8006c38 <HAL_GetTick>
 80040b4:	4603      	mov	r3, r0
	}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
      data("")
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff f818 	bl	8003100 <_ZN3ros3MsgC1Ev>
 80040d0:	4a05      	ldr	r2, [pc, #20]	; (80040e8 <_ZN8std_msgs6StringC1Ev+0x28>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a04      	ldr	r2, [pc, #16]	; (80040ec <_ZN8std_msgs6StringC1Ev+0x2c>)
 80040da:	605a      	str	r2, [r3, #4]
    {
    }
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	0800f138 	.word	0x0800f138
 80040ec:	0800ee08 	.word	0x0800ee08

080040f0 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc f884 	bl	8000210 <strlen>
 8004108:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	4413      	add	r3, r2
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	4618      	mov	r0, r3
 8004114:	f001 fa7e 	bl	8005614 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3304      	adds	r3, #4
 800411c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	18d0      	adds	r0, r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	4619      	mov	r1, r3
 800412c:	f00a fcc0 	bl	800eab0 <memcpy>
      offset += length_data;
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4413      	add	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
      return offset;
 8004138:	68fb      	ldr	r3, [r7, #12]
    }
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	441a      	add	r2, r3
 8004156:	f107 030c 	add.w	r3, r7, #12
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f001 fa78 	bl	8005652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	3304      	adds	r3, #4
 8004166:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e00b      	b.n	8004186 <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	441a      	add	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	3b01      	subs	r3, #1
 8004178:	6839      	ldr	r1, [r7, #0]
 800417a:	440b      	add	r3, r1
 800417c:	7812      	ldrb	r2, [r2, #0]
 800417e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	3301      	adds	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	429a      	cmp	r2, r3
 8004190:	d3ed      	bcc.n	800416e <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	3b01      	subs	r3, #1
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	4413      	add	r3, r2
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	441a      	add	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
     return offset;
 80041b6:	693b      	ldr	r3, [r7, #16]
    }
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	0800eea8 	.word	0x0800eea8

080041dc <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80041e6:	4618      	mov	r0, r3
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	0800eeb8 	.word	0x0800eeb8

080041f8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe ff7c 	bl	8003100 <_ZN3ros3MsgC1Ev>
 8004208:	4a08      	ldr	r2, [pc, #32]	; (800422c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	601a      	str	r2, [r3, #0]
      label(""),
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a07      	ldr	r2, [pc, #28]	; (8004230 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8004212:	605a      	str	r2, [r3, #4]
      size(0),
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
      stride(0)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	60da      	str	r2, [r3, #12]
    {
    }
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	0800f120 	.word	0x0800f120
 8004230:	0800ee08 	.word	0x0800ee08

08004234 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fb ffe2 	bl	8000210 <strlen>
 800424c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	4413      	add	r3, r2
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	4618      	mov	r0, r3
 8004258:	f001 f9dc 	bl	8005614 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3304      	adds	r3, #4
 8004260:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	18d0      	adds	r0, r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	4619      	mov	r1, r3
 8004270:	f00a fc1e 	bl	800eab0 <memcpy>
      offset += length_label;
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4413      	add	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6899      	ldr	r1, [r3, #8]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	4413      	add	r3, r2
 8004286:	b2ca      	uxtb	r2, r1
 8004288:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0a19      	lsrs	r1, r3, #8
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3301      	adds	r3, #1
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	4413      	add	r3, r2
 8004298:	b2ca      	uxtb	r2, r1
 800429a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	0c19      	lsrs	r1, r3, #16
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3302      	adds	r3, #2
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	4413      	add	r3, r2
 80042aa:	b2ca      	uxtb	r2, r1
 80042ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0e19      	lsrs	r1, r3, #24
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3303      	adds	r3, #3
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	4413      	add	r3, r2
 80042bc:	b2ca      	uxtb	r2, r1
 80042be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3304      	adds	r3, #4
 80042c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68d9      	ldr	r1, [r3, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	4413      	add	r3, r2
 80042d0:	b2ca      	uxtb	r2, r1
 80042d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	0a19      	lsrs	r1, r3, #8
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3301      	adds	r3, #1
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	4413      	add	r3, r2
 80042e2:	b2ca      	uxtb	r2, r1
 80042e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	0c19      	lsrs	r1, r3, #16
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3302      	adds	r3, #2
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	4413      	add	r3, r2
 80042f4:	b2ca      	uxtb	r2, r1
 80042f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	0e19      	lsrs	r1, r3, #24
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3303      	adds	r3, #3
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	4413      	add	r3, r2
 8004306:	b2ca      	uxtb	r2, r1
 8004308:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3304      	adds	r3, #4
 800430e:	60fb      	str	r3, [r7, #12]
      return offset;
 8004310:	68fb      	ldr	r3, [r7, #12]
    }
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	441a      	add	r2, r3
 800432e:	f107 030c 	add.w	r3, r7, #12
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f001 f98c 	bl	8005652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	3304      	adds	r3, #4
 800433e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	e00b      	b.n	800435e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	441a      	add	r2, r3
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3b01      	subs	r3, #1
 8004350:	6839      	ldr	r1, [r7, #0]
 8004352:	440b      	add	r3, r1
 8004354:	7812      	ldrb	r2, [r2, #0]
 8004356:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3301      	adds	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	429a      	cmp	r2, r3
 8004368:	d3ed      	bcc.n	8004346 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	3b01      	subs	r3, #1
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	4413      	add	r3, r2
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	3b01      	subs	r3, #1
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	441a      	add	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	4413      	add	r3, r2
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	3301      	adds	r3, #1
 80043a4:	6839      	ldr	r1, [r7, #0]
 80043a6:	440b      	add	r3, r1
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	3302      	adds	r3, #2
 80043ba:	6839      	ldr	r1, [r7, #0]
 80043bc:	440b      	add	r3, r1
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	041b      	lsls	r3, r3, #16
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	3303      	adds	r3, #3
 80043d0:	6839      	ldr	r1, [r7, #0]
 80043d2:	440b      	add	r3, r1
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	061b      	lsls	r3, r3, #24
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	3304      	adds	r3, #4
 80043e2:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	4413      	add	r3, r2
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	3301      	adds	r3, #1
 80043fa:	6839      	ldr	r1, [r7, #0]
 80043fc:	440b      	add	r3, r1
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	3302      	adds	r3, #2
 8004410:	6839      	ldr	r1, [r7, #0]
 8004412:	440b      	add	r3, r1
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3303      	adds	r3, #3
 8004426:	6839      	ldr	r1, [r7, #0]
 8004428:	440b      	add	r3, r1
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	3304      	adds	r3, #4
 8004438:	613b      	str	r3, [r7, #16]
     return offset;
 800443a:	693b      	ldr	r3, [r7, #16]
    }
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	0800eedc 	.word	0x0800eedc

08004460 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	0800eefc 	.word	0x0800eefc

0800447c <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fe3a 	bl	8003100 <_ZN3ros3MsgC1Ev>
 800448c:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	605a      	str	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3308      	adds	r3, #8
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff feab 	bl	80041f8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	619a      	str	r2, [r3, #24]
      data_offset(0)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	61da      	str	r2, [r3, #28]
    {
    }
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	0800f108 	.word	0x0800f108

080044bc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6859      	ldr	r1, [r3, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	4413      	add	r3, r2
 80044d4:	b2ca      	uxtb	r2, r1
 80044d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	0a19      	lsrs	r1, r3, #8
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3301      	adds	r3, #1
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	4413      	add	r3, r2
 80044e6:	b2ca      	uxtb	r2, r1
 80044e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	0c19      	lsrs	r1, r3, #16
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3302      	adds	r3, #2
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	4413      	add	r3, r2
 80044f8:	b2ca      	uxtb	r2, r1
 80044fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	0e19      	lsrs	r1, r3, #24
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3303      	adds	r3, #3
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	4413      	add	r3, r2
 800450a:	b2ca      	uxtb	r2, r1
 800450c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3304      	adds	r3, #4
 8004512:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8004514:	2300      	movs	r3, #0
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	e017      	b.n	800454a <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	18d0      	adds	r0, r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	4413      	add	r3, r2
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	6839      	ldr	r1, [r7, #0]
 8004536:	440a      	add	r2, r1
 8004538:	4611      	mov	r1, r2
 800453a:	4798      	blx	r3
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	3301      	adds	r3, #1
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	429a      	cmp	r2, r3
 8004552:	d3e2      	bcc.n	800451a <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69d9      	ldr	r1, [r3, #28]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	4413      	add	r3, r2
 800455e:	b2ca      	uxtb	r2, r1
 8004560:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	0a19      	lsrs	r1, r3, #8
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3301      	adds	r3, #1
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	4413      	add	r3, r2
 8004570:	b2ca      	uxtb	r2, r1
 8004572:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	0c19      	lsrs	r1, r3, #16
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3302      	adds	r3, #2
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	4413      	add	r3, r2
 8004582:	b2ca      	uxtb	r2, r1
 8004584:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	0e19      	lsrs	r1, r3, #24
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3303      	adds	r3, #3
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	4413      	add	r3, r2
 8004594:	b2ca      	uxtb	r2, r1
 8004596:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3304      	adds	r3, #4
 800459c:	60fb      	str	r3, [r7, #12]
      return offset;
 800459e:	68fb      	ldr	r3, [r7, #12]
    }
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	4413      	add	r3, r2
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	3301      	adds	r3, #1
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	4413      	add	r3, r2
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	3302      	adds	r3, #2
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	4413      	add	r3, r2
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	3303      	adds	r3, #3
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	4413      	add	r3, r2
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	061b      	lsls	r3, r3, #24
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	3304      	adds	r3, #4
 80045fa:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	429a      	cmp	r2, r3
 8004604:	d90a      	bls.n	800461c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f00a f9e1 	bl	800e9d8 <realloc>
 8004616:	4602      	mov	r2, r0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e01a      	b.n	800465e <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f103 0008 	add.w	r0, r3, #8
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	4413      	add	r3, r2
 8004634:	4619      	mov	r1, r3
 8004636:	f7ff fe70 	bl	800431a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 800463a:	4602      	mov	r2, r0
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	4413      	add	r3, r2
 8004640:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	18d0      	adds	r0, r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3308      	adds	r3, #8
 8004650:	2210      	movs	r2, #16
 8004652:	4619      	mov	r1, r3
 8004654:	f00a fa2c 	bl	800eab0 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	3301      	adds	r3, #1
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	429a      	cmp	r2, r3
 8004666:	d3df      	bcc.n	8004628 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	4413      	add	r3, r2
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	3301      	adds	r3, #1
 800467e:	6839      	ldr	r1, [r7, #0]
 8004680:	440b      	add	r3, r1
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	3302      	adds	r3, #2
 8004694:	6839      	ldr	r1, [r7, #0]
 8004696:	440b      	add	r3, r1
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	041b      	lsls	r3, r3, #16
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69da      	ldr	r2, [r3, #28]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	3303      	adds	r3, #3
 80046aa:	6839      	ldr	r1, [r7, #0]
 80046ac:	440b      	add	r3, r1
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	3304      	adds	r3, #4
 80046bc:	617b      	str	r3, [r7, #20]
     return offset;
 80046be:	697b      	ldr	r3, [r7, #20]
    }
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	4b03      	ldr	r3, [pc, #12]	; (80046e0 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	0800ef20 	.word	0x0800ef20

080046e4 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	4b03      	ldr	r3, [pc, #12]	; (80046fc <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	0800ef3c 	.word	0x0800ef3c

08004700 <_ZN8std_msgs15Int16MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int16_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int16MultiArray():
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fcf8 	bl	8003100 <_ZN3ros3MsgC1Ev>
 8004710:	4a0a      	ldr	r2, [pc, #40]	; (800473c <_ZN8std_msgs15Int16MultiArrayC1Ev+0x3c>)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	601a      	str	r2, [r3, #0]
      layout(),
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3304      	adds	r3, #4
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff feae 	bl	800447c <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	625a      	str	r2, [r3, #36]	; 0x24
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	851a      	strh	r2, [r3, #40]	; 0x28
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	0800f0f0 	.word	0x0800f0f0

08004740 <_ZNK8std_msgs15Int16MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	1d18      	adds	r0, r3, #4
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	4413      	add	r3, r2
 8004758:	4619      	mov	r1, r3
 800475a:	f7ff feaf 	bl	80044bc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 800475e:	4602      	mov	r2, r0
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4413      	add	r3, r2
 8004764:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	4413      	add	r3, r2
 8004770:	b2ca      	uxtb	r2, r1
 8004772:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	0a19      	lsrs	r1, r3, #8
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	3301      	adds	r3, #1
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	4413      	add	r3, r2
 8004782:	b2ca      	uxtb	r2, r1
 8004784:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	0c19      	lsrs	r1, r3, #16
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	3302      	adds	r3, #2
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	4413      	add	r3, r2
 8004794:	b2ca      	uxtb	r2, r1
 8004796:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	0e19      	lsrs	r1, r3, #24
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	3303      	adds	r3, #3
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	4413      	add	r3, r2
 80047a6:	b2ca      	uxtb	r2, r1
 80047a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	3304      	adds	r3, #4
 80047ae:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	e01c      	b.n	80047f0 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0xb0>
      union {
        int16_t real;
        uint16_t base;
      } u_datai;
      u_datai.real = this->data[i];
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	4413      	add	r3, r2
 80047c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047c4:	81bb      	strh	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 80047c6:	89b9      	ldrh	r1, [r7, #12]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	4413      	add	r3, r2
 80047ce:	b2ca      	uxtb	r2, r1
 80047d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 80047d2:	89bb      	ldrh	r3, [r7, #12]
 80047d4:	0a1b      	lsrs	r3, r3, #8
 80047d6:	b299      	uxth	r1, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	3301      	adds	r3, #1
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	4413      	add	r3, r2
 80047e0:	b2ca      	uxtb	r2, r1
 80047e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	3302      	adds	r3, #2
 80047e8:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	3301      	adds	r3, #1
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d3dd      	bcc.n	80047b6 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0x76>
      }
      return offset;
 80047fa:	697b      	ldr	r3, [r7, #20]
    }
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <_ZN8std_msgs15Int16MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	1d18      	adds	r0, r3, #4
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	4413      	add	r3, r2
 800481c:	4619      	mov	r1, r3
 800481e:	f7ff fec3 	bl	80045a8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8004822:	4602      	mov	r2, r0
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	4413      	add	r3, r2
 8004828:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	4413      	add	r3, r2
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	3301      	adds	r3, #1
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	4413      	add	r3, r2
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	021b      	lsls	r3, r3, #8
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	3302      	adds	r3, #2
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	4413      	add	r3, r2
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	041b      	lsls	r3, r3, #16
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	3303      	adds	r3, #3
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	4413      	add	r3, r2
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	061b      	lsls	r3, r3, #24
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	3304      	adds	r3, #4
 800486e:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	429a      	cmp	r2, r3
 8004878:	d90a      	bls.n	8004890 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x8c>
        this->data = (int16_t*)realloc(this->data, data_lengthT * sizeof(int16_t));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f00a f8a7 	bl	800e9d8 <realloc>
 800488a:	4602      	mov	r2, r0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	e02b      	b.n	80048f4 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0xf0>
      union {
        int16_t real;
        uint16_t base;
      } u_st_data;
      u_st_data.base = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80048a0:	893a      	ldrh	r2, [r7, #8]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	440b      	add	r3, r1
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4313      	orrs	r3, r2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80048b2:	893b      	ldrh	r3, [r7, #8]
 80048b4:	b21a      	sxth	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	3301      	adds	r3, #1
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	440b      	add	r3, r1
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	b21b      	sxth	r3, r3
 80048c4:	4313      	orrs	r3, r2
 80048c6:	b21b      	sxth	r3, r3
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	813b      	strh	r3, [r7, #8]
      this->st_data = u_st_data.real;
 80048cc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	851a      	strh	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	3302      	adds	r3, #2
 80048d8:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int16_t));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	4413      	add	r3, r2
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	3228      	adds	r2, #40	; 0x28
 80048e8:	8812      	ldrh	r2, [r2, #0]
 80048ea:	b292      	uxth	r2, r2
 80048ec:	801a      	strh	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	3301      	adds	r3, #1
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d3ce      	bcc.n	800489c <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x98>
      }
     return offset;
 80048fe:	697b      	ldr	r3, [r7, #20]
    }
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <_ZN8std_msgs15Int16MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16MultiArray"; };
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <_ZN8std_msgs15Int16MultiArray7getTypeEv+0x18>)
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	0800ef60 	.word	0x0800ef60

08004924 <_ZN8std_msgs15Int16MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "d9338d7f523fcb692fae9d0a0e9f067c"; };
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <_ZN8std_msgs15Int16MultiArray6getMD5Ev+0x18>)
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	0800ef7c 	.word	0x0800ef7c

08004940 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fbd8 	bl	8003100 <_ZN3ros3MsgC1Ev>
 8004950:	4a0e      	ldr	r2, [pc, #56]	; (800498c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	601a      	str	r2, [r3, #0]
      x(0),
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	0800f0d8 	.word	0x0800f0d8

08004990 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004990:	b480      	push	{r7}
 8004992:	b08b      	sub	sp, #44	; 0x2c
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80049a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80049a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049ae:	6838      	ldr	r0, [r7, #0]
 80049b0:	4401      	add	r1, r0
 80049b2:	b2d3      	uxtb	r3, r2
 80049b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80049b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	0a02      	lsrs	r2, r0, #8
 80049c4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80049c8:	0a0b      	lsrs	r3, r1, #8
 80049ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049cc:	3101      	adds	r1, #1
 80049ce:	6838      	ldr	r0, [r7, #0]
 80049d0:	4401      	add	r1, r0
 80049d2:	b2d3      	uxtb	r3, r2
 80049d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80049d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	0c02      	lsrs	r2, r0, #16
 80049e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80049e8:	0c0b      	lsrs	r3, r1, #16
 80049ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049ec:	3102      	adds	r1, #2
 80049ee:	6838      	ldr	r0, [r7, #0]
 80049f0:	4401      	add	r1, r0
 80049f2:	b2d3      	uxtb	r3, r2
 80049f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80049f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	0e02      	lsrs	r2, r0, #24
 8004a04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004a08:	0e0b      	lsrs	r3, r1, #24
 8004a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a0c:	3103      	adds	r1, #3
 8004a0e:	6838      	ldr	r0, [r7, #0]
 8004a10:	4401      	add	r1, r0
 8004a12:	b2d3      	uxtb	r3, r2
 8004a14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004a16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	000a      	movs	r2, r1
 8004a24:	2300      	movs	r3, #0
 8004a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a28:	3104      	adds	r1, #4
 8004a2a:	6838      	ldr	r0, [r7, #0]
 8004a2c:	4401      	add	r1, r0
 8004a2e:	b2d3      	uxtb	r3, r2
 8004a30:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004a32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	0a0a      	lsrs	r2, r1, #8
 8004a40:	2300      	movs	r3, #0
 8004a42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a44:	3105      	adds	r1, #5
 8004a46:	6838      	ldr	r0, [r7, #0]
 8004a48:	4401      	add	r1, r0
 8004a4a:	b2d3      	uxtb	r3, r2
 8004a4c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004a4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	0c0a      	lsrs	r2, r1, #16
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a60:	3106      	adds	r1, #6
 8004a62:	6838      	ldr	r0, [r7, #0]
 8004a64:	4401      	add	r1, r0
 8004a66:	b2d3      	uxtb	r3, r2
 8004a68:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004a6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	0e0a      	lsrs	r2, r1, #24
 8004a78:	2300      	movs	r3, #0
 8004a7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a7c:	3107      	adds	r1, #7
 8004a7e:	6838      	ldr	r0, [r7, #0]
 8004a80:	4401      	add	r1, r0
 8004a82:	b2d3      	uxtb	r3, r2
 8004a84:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	3308      	adds	r3, #8
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a92:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004a96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a9c:	6838      	ldr	r0, [r7, #0]
 8004a9e:	4401      	add	r1, r0
 8004aa0:	b2d3      	uxtb	r3, r2
 8004aa2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004aa4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	0a02      	lsrs	r2, r0, #8
 8004ab2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004ab6:	0a0b      	lsrs	r3, r1, #8
 8004ab8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aba:	3101      	adds	r1, #1
 8004abc:	6838      	ldr	r0, [r7, #0]
 8004abe:	4401      	add	r1, r0
 8004ac0:	b2d3      	uxtb	r3, r2
 8004ac2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004ac4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	0c02      	lsrs	r2, r0, #16
 8004ad2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004ad6:	0c0b      	lsrs	r3, r1, #16
 8004ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ada:	3102      	adds	r1, #2
 8004adc:	6838      	ldr	r0, [r7, #0]
 8004ade:	4401      	add	r1, r0
 8004ae0:	b2d3      	uxtb	r3, r2
 8004ae2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004ae4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	0e02      	lsrs	r2, r0, #24
 8004af2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004af6:	0e0b      	lsrs	r3, r1, #24
 8004af8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004afa:	3103      	adds	r1, #3
 8004afc:	6838      	ldr	r0, [r7, #0]
 8004afe:	4401      	add	r1, r0
 8004b00:	b2d3      	uxtb	r3, r2
 8004b02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004b04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	000a      	movs	r2, r1
 8004b12:	2300      	movs	r3, #0
 8004b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b16:	3104      	adds	r1, #4
 8004b18:	6838      	ldr	r0, [r7, #0]
 8004b1a:	4401      	add	r1, r0
 8004b1c:	b2d3      	uxtb	r3, r2
 8004b1e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004b20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	0a0a      	lsrs	r2, r1, #8
 8004b2e:	2300      	movs	r3, #0
 8004b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b32:	3105      	adds	r1, #5
 8004b34:	6838      	ldr	r0, [r7, #0]
 8004b36:	4401      	add	r1, r0
 8004b38:	b2d3      	uxtb	r3, r2
 8004b3a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004b3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	0c0a      	lsrs	r2, r1, #16
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b4e:	3106      	adds	r1, #6
 8004b50:	6838      	ldr	r0, [r7, #0]
 8004b52:	4401      	add	r1, r0
 8004b54:	b2d3      	uxtb	r3, r2
 8004b56:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004b58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	0e0a      	lsrs	r2, r1, #24
 8004b66:	2300      	movs	r3, #0
 8004b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b6a:	3107      	adds	r1, #7
 8004b6c:	6838      	ldr	r0, [r7, #0]
 8004b6e:	4401      	add	r1, r0
 8004b70:	b2d3      	uxtb	r3, r2
 8004b72:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	3308      	adds	r3, #8
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004b80:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b8a:	6838      	ldr	r0, [r7, #0]
 8004b8c:	4401      	add	r1, r0
 8004b8e:	b2d3      	uxtb	r3, r2
 8004b90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004b92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	0a02      	lsrs	r2, r0, #8
 8004ba0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004ba4:	0a0b      	lsrs	r3, r1, #8
 8004ba6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ba8:	3101      	adds	r1, #1
 8004baa:	6838      	ldr	r0, [r7, #0]
 8004bac:	4401      	add	r1, r0
 8004bae:	b2d3      	uxtb	r3, r2
 8004bb0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004bb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	0c02      	lsrs	r2, r0, #16
 8004bc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004bc4:	0c0b      	lsrs	r3, r1, #16
 8004bc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bc8:	3102      	adds	r1, #2
 8004bca:	6838      	ldr	r0, [r7, #0]
 8004bcc:	4401      	add	r1, r0
 8004bce:	b2d3      	uxtb	r3, r2
 8004bd0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004bd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	0e02      	lsrs	r2, r0, #24
 8004be0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004be4:	0e0b      	lsrs	r3, r1, #24
 8004be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004be8:	3103      	adds	r1, #3
 8004bea:	6838      	ldr	r0, [r7, #0]
 8004bec:	4401      	add	r1, r0
 8004bee:	b2d3      	uxtb	r3, r2
 8004bf0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	000a      	movs	r2, r1
 8004c00:	2300      	movs	r3, #0
 8004c02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c04:	3104      	adds	r1, #4
 8004c06:	6838      	ldr	r0, [r7, #0]
 8004c08:	4401      	add	r1, r0
 8004c0a:	b2d3      	uxtb	r3, r2
 8004c0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004c0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	0a0a      	lsrs	r2, r1, #8
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c20:	3105      	adds	r1, #5
 8004c22:	6838      	ldr	r0, [r7, #0]
 8004c24:	4401      	add	r1, r0
 8004c26:	b2d3      	uxtb	r3, r2
 8004c28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004c2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	0c0a      	lsrs	r2, r1, #16
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c3c:	3106      	adds	r1, #6
 8004c3e:	6838      	ldr	r0, [r7, #0]
 8004c40:	4401      	add	r1, r0
 8004c42:	b2d3      	uxtb	r3, r2
 8004c44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004c46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	0e0a      	lsrs	r2, r1, #24
 8004c54:	2300      	movs	r3, #0
 8004c56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c58:	3107      	adds	r1, #7
 8004c5a:	6838      	ldr	r0, [r7, #0]
 8004c5c:	4401      	add	r1, r0
 8004c5e:	b2d3      	uxtb	r3, r2
 8004c60:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	3308      	adds	r3, #8
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	372c      	adds	r7, #44	; 0x2c
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004c76:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004c7a:	b0eb      	sub	sp, #428	; 0x1ac
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8004c82:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004c98:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004c9c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8004ca0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004ca4:	4413      	add	r3, r2
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2200      	movs	r2, #0
 8004cac:	461c      	mov	r4, r3
 8004cae:	4615      	mov	r5, r2
 8004cb0:	ea40 0804 	orr.w	r8, r0, r4
 8004cb4:	ea41 0905 	orr.w	r9, r1, r5
 8004cb8:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004cbc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004cc0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004cca:	4413      	add	r3, r2
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	469a      	mov	sl, r3
 8004cd4:	4693      	mov	fp, r2
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8004ce2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8004ce6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8004cea:	ea40 0402 	orr.w	r4, r0, r2
 8004cee:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8004cf2:	430b      	orrs	r3, r1
 8004cf4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004cf8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8004cfc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004d00:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004d04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004d08:	1c9a      	adds	r2, r3, #2
 8004d0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004d0e:	4413      	add	r3, r2
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004d1a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8004d2a:	464c      	mov	r4, r9
 8004d2c:	0423      	lsls	r3, r4, #16
 8004d2e:	4644      	mov	r4, r8
 8004d30:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004d34:	4644      	mov	r4, r8
 8004d36:	0422      	lsls	r2, r4, #16
 8004d38:	ea40 0402 	orr.w	r4, r0, r2
 8004d3c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8004d40:	430b      	orrs	r3, r1
 8004d42:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004d46:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8004d4a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004d4e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004d52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004d56:	1cda      	adds	r2, r3, #3
 8004d58:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004d5c:	4413      	add	r3, r2
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004d68:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004d6c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004d70:	4623      	mov	r3, r4
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004d78:	4623      	mov	r3, r4
 8004d7a:	061b      	lsls	r3, r3, #24
 8004d7c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004d80:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8004d84:	4623      	mov	r3, r4
 8004d86:	4303      	orrs	r3, r0
 8004d88:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004d94:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8004d98:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004d9c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004da0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004da4:	1d1a      	adds	r2, r3, #4
 8004da6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004daa:	4413      	add	r3, r2
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2200      	movs	r2, #0
 8004db2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004db6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8004dc6:	0023      	movs	r3, r4
 8004dc8:	2200      	movs	r2, #0
 8004dca:	ea40 0402 	orr.w	r4, r0, r2
 8004dce:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004dd8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004ddc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004de0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004de4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004de8:	1d5a      	adds	r2, r3, #5
 8004dea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004dee:	4413      	add	r3, r2
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2200      	movs	r2, #0
 8004df6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004dfa:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8004e0a:	0223      	lsls	r3, r4, #8
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	ea40 0402 	orr.w	r4, r0, r2
 8004e12:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8004e16:	430b      	orrs	r3, r1
 8004e18:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004e1c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8004e20:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004e24:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004e28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004e2c:	1d9a      	adds	r2, r3, #6
 8004e2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004e32:	4413      	add	r3, r2
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e3e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8004e4e:	0423      	lsls	r3, r4, #16
 8004e50:	2200      	movs	r2, #0
 8004e52:	ea40 0402 	orr.w	r4, r0, r2
 8004e56:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e60:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8004e64:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004e68:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004e6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004e70:	1dda      	adds	r2, r3, #7
 8004e72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004e76:	4413      	add	r3, r2
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004e82:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8004e92:	0623      	lsls	r3, r4, #24
 8004e94:	2200      	movs	r2, #0
 8004e96:	ea40 0402 	orr.w	r4, r0, r2
 8004e9a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ea4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8004ea8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8004eac:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004eb0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004eb4:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8004eb8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004ece:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004ed2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8004ed6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004eda:	4413      	add	r3, r2
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004ee6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004eea:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004eee:	4623      	mov	r3, r4
 8004ef0:	4303      	orrs	r3, r0
 8004ef2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ef6:	462b      	mov	r3, r5
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004efe:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8004f02:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004f06:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004f0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004f14:	4413      	add	r3, r2
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f20:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8004f30:	464c      	mov	r4, r9
 8004f32:	0223      	lsls	r3, r4, #8
 8004f34:	4644      	mov	r4, r8
 8004f36:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f3a:	4644      	mov	r4, r8
 8004f3c:	0222      	lsls	r2, r4, #8
 8004f3e:	ea40 0402 	orr.w	r4, r0, r2
 8004f42:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8004f46:	430b      	orrs	r3, r1
 8004f48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f4c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8004f50:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004f54:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004f58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004f5c:	1c9a      	adds	r2, r3, #2
 8004f5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004f62:	4413      	add	r3, r2
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004f7e:	464c      	mov	r4, r9
 8004f80:	0423      	lsls	r3, r4, #16
 8004f82:	4644      	mov	r4, r8
 8004f84:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004f88:	4644      	mov	r4, r8
 8004f8a:	0422      	lsls	r2, r4, #16
 8004f8c:	ea40 0402 	orr.w	r4, r0, r2
 8004f90:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8004f94:	430b      	orrs	r3, r1
 8004f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f9a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8004f9e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004fa2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004fa6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004faa:	1cda      	adds	r2, r3, #3
 8004fac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004fb0:	4413      	add	r3, r2
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fbc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fc0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004fc4:	4623      	mov	r3, r4
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004fcc:	4623      	mov	r3, r4
 8004fce:	061b      	lsls	r3, r3, #24
 8004fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fd4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004fd8:	4623      	mov	r3, r4
 8004fda:	4303      	orrs	r3, r0
 8004fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fe0:	462b      	mov	r3, r5
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fe8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8004fec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004ff0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004ff4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004ff8:	1d1a      	adds	r2, r3, #4
 8004ffa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004ffe:	4413      	add	r3, r2
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2200      	movs	r2, #0
 8005006:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800500a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800501a:	0023      	movs	r3, r4
 800501c:	2200      	movs	r2, #0
 800501e:	ea40 0402 	orr.w	r4, r0, r2
 8005022:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8005026:	430b      	orrs	r3, r1
 8005028:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800502c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8005030:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005034:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005038:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800503c:	1d5a      	adds	r2, r3, #5
 800503e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005042:	4413      	add	r3, r2
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2200      	movs	r2, #0
 800504a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800504e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800505e:	0223      	lsls	r3, r4, #8
 8005060:	2200      	movs	r2, #0
 8005062:	ea40 0402 	orr.w	r4, r0, r2
 8005066:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800506a:	430b      	orrs	r3, r1
 800506c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005070:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005074:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005078:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800507c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005080:	1d9a      	adds	r2, r3, #6
 8005082:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005086:	4413      	add	r3, r2
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2200      	movs	r2, #0
 800508e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005092:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80050a2:	0423      	lsls	r3, r4, #16
 80050a4:	2200      	movs	r2, #0
 80050a6:	ea40 0402 	orr.w	r4, r0, r2
 80050aa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80050ae:	430b      	orrs	r3, r1
 80050b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050b4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80050b8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80050bc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80050c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80050c4:	1dda      	adds	r2, r3, #7
 80050c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80050ca:	4413      	add	r3, r2
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80050e6:	0623      	lsls	r3, r4, #24
 80050e8:	2200      	movs	r2, #0
 80050ea:	ea40 0402 	orr.w	r4, r0, r2
 80050ee:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80050f2:	430b      	orrs	r3, r1
 80050f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80050f8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80050fc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8005100:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005104:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005108:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 800510c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005110:	3308      	adds	r3, #8
 8005112:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005122:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005126:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800512a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800512e:	4413      	add	r3, r2
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2200      	movs	r2, #0
 8005136:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800513a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800513e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8005142:	4623      	mov	r3, r4
 8005144:	4303      	orrs	r3, r0
 8005146:	67bb      	str	r3, [r7, #120]	; 0x78
 8005148:	462b      	mov	r3, r5
 800514a:	430b      	orrs	r3, r1
 800514c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800514e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005152:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005156:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800515a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005164:	4413      	add	r3, r2
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2200      	movs	r2, #0
 800516c:	673b      	str	r3, [r7, #112]	; 0x70
 800516e:	677a      	str	r2, [r7, #116]	; 0x74
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800517c:	464c      	mov	r4, r9
 800517e:	0223      	lsls	r3, r4, #8
 8005180:	4644      	mov	r4, r8
 8005182:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005186:	4644      	mov	r4, r8
 8005188:	0222      	lsls	r2, r4, #8
 800518a:	ea40 0402 	orr.w	r4, r0, r2
 800518e:	66bc      	str	r4, [r7, #104]	; 0x68
 8005190:	430b      	orrs	r3, r1
 8005192:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005194:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005198:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800519c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80051a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80051a4:	1c9a      	adds	r2, r3, #2
 80051a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80051aa:	4413      	add	r3, r2
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2200      	movs	r2, #0
 80051b2:	663b      	str	r3, [r7, #96]	; 0x60
 80051b4:	667a      	str	r2, [r7, #100]	; 0x64
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051c2:	464c      	mov	r4, r9
 80051c4:	0423      	lsls	r3, r4, #16
 80051c6:	4644      	mov	r4, r8
 80051c8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80051cc:	4644      	mov	r4, r8
 80051ce:	0422      	lsls	r2, r4, #16
 80051d0:	ea40 0402 	orr.w	r4, r0, r2
 80051d4:	65bc      	str	r4, [r7, #88]	; 0x58
 80051d6:	430b      	orrs	r3, r1
 80051d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051da:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80051de:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80051e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80051e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80051ea:	1cda      	adds	r2, r3, #3
 80051ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80051f0:	4413      	add	r3, r2
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2200      	movs	r2, #0
 80051f8:	653b      	str	r3, [r7, #80]	; 0x50
 80051fa:	657a      	str	r2, [r7, #84]	; 0x54
 80051fc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8005200:	4623      	mov	r3, r4
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005206:	4623      	mov	r3, r4
 8005208:	061b      	lsls	r3, r3, #24
 800520a:	64bb      	str	r3, [r7, #72]	; 0x48
 800520c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005210:	4623      	mov	r3, r4
 8005212:	4303      	orrs	r3, r0
 8005214:	643b      	str	r3, [r7, #64]	; 0x40
 8005216:	462b      	mov	r3, r5
 8005218:	430b      	orrs	r3, r1
 800521a:	647b      	str	r3, [r7, #68]	; 0x44
 800521c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005220:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005224:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005228:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800522c:	1d1a      	adds	r2, r3, #4
 800522e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005232:	4413      	add	r3, r2
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2200      	movs	r2, #0
 800523a:	63bb      	str	r3, [r7, #56]	; 0x38
 800523c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8005248:	0023      	movs	r3, r4
 800524a:	2200      	movs	r2, #0
 800524c:	ea40 0402 	orr.w	r4, r0, r2
 8005250:	633c      	str	r4, [r7, #48]	; 0x30
 8005252:	430b      	orrs	r3, r1
 8005254:	637b      	str	r3, [r7, #52]	; 0x34
 8005256:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800525a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800525e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005262:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005266:	1d5a      	adds	r2, r3, #5
 8005268:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800526c:	4413      	add	r3, r2
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2200      	movs	r2, #0
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 8005276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005282:	0223      	lsls	r3, r4, #8
 8005284:	2200      	movs	r2, #0
 8005286:	ea40 0402 	orr.w	r4, r0, r2
 800528a:	623c      	str	r4, [r7, #32]
 800528c:	430b      	orrs	r3, r1
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
 8005290:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005294:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005298:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800529c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80052a0:	3306      	adds	r3, #6
 80052a2:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80052a6:	4413      	add	r3, r2
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2200      	movs	r2, #0
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	61fa      	str	r2, [r7, #28]
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	69bc      	ldr	r4, [r7, #24]
 80052bc:	0423      	lsls	r3, r4, #16
 80052be:	2200      	movs	r2, #0
 80052c0:	ea40 0402 	orr.w	r4, r0, r2
 80052c4:	613c      	str	r4, [r7, #16]
 80052c6:	430b      	orrs	r3, r1
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80052ce:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80052d2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80052d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80052da:	3307      	adds	r3, #7
 80052dc:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80052e0:	4413      	add	r3, r2
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2200      	movs	r2, #0
 80052e8:	60bb      	str	r3, [r7, #8]
 80052ea:	60fa      	str	r2, [r7, #12]
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	68bc      	ldr	r4, [r7, #8]
 80052f6:	0623      	lsls	r3, r4, #24
 80052f8:	2200      	movs	r2, #0
 80052fa:	ea40 0402 	orr.w	r4, r0, r2
 80052fe:	603c      	str	r4, [r7, #0]
 8005300:	430b      	orrs	r3, r1
 8005302:	607b      	str	r3, [r7, #4]
 8005304:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005308:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 800530c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8005310:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8005314:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8005318:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800531c:	3308      	adds	r3, #8
 800531e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8005322:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8005326:	4618      	mov	r0, r3
 8005328:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 800532c:	46bd      	mov	sp, r7
 800532e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005332:	4770      	bx	lr

08005334 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	4b03      	ldr	r3, [pc, #12]	; (800534c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800533e:	4618      	mov	r0, r3
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	0800efa0 	.word	0x0800efa0

08005350 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	0800efb8 	.word	0x0800efb8

0800536c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4618      	mov	r0, r3
 8005378:	f7fd fec2 	bl	8003100 <_ZN3ros3MsgC1Ev>
 800537c:	4a08      	ldr	r2, [pc, #32]	; (80053a0 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	601a      	str	r2, [r3, #0]
      linear(),
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3308      	adds	r3, #8
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fada 	bl	8004940 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3328      	adds	r3, #40	; 0x28
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff fad5 	bl	8004940 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	0800f0c0 	.word	0x0800f0c0

080053a4 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f103 0008 	add.w	r0, r3, #8
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	4413      	add	r3, r2
 80053be:	4619      	mov	r1, r3
 80053c0:	f7ff fae6 	bl	8004990 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	4413      	add	r3, r2
 80053d8:	4619      	mov	r1, r3
 80053da:	f7ff fad9 	bl	8004990 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80053de:	4602      	mov	r2, r0
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4413      	add	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
      return offset;
 80053e6:	68fb      	ldr	r3, [r7, #12]
    }
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f103 0008 	add.w	r0, r3, #8
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	4413      	add	r3, r2
 800540a:	4619      	mov	r1, r3
 800540c:	f7ff fc33 	bl	8004c76 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005410:	4602      	mov	r2, r0
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	4413      	add	r3, r2
 8005424:	4619      	mov	r1, r3
 8005426:	f7ff fc26 	bl	8004c76 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800542a:	4602      	mov	r2, r0
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
     return offset;
 8005432:	68fb      	ldr	r3, [r7, #12]
    }
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	4b03      	ldr	r3, [pc, #12]	; (8005454 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	0800efdc 	.word	0x0800efdc

08005458 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	4b03      	ldr	r3, [pc, #12]	; (8005470 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	0800eff0 	.word	0x0800eff0

08005474 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	4a04      	ldr	r2, [pc, #16]	; (8005490 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	0800f168 	.word	0x0800f168

08005494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff ffe8 	bl	8005474 <_ZN3ros15NodeHandleBase_C1Ev>
 80054a4:	4a33      	ldr	r2, [pc, #204]	; (8005574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fe fdbe 	bl	8004030 <_ZN13STM32HardwareC1Ev>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	609a      	str	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	60da      	str	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	611a      	str	r2, [r3, #16]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	615a      	str	r2, [r3, #20]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3318      	adds	r3, #24
 80054d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054d4:	2100      	movs	r1, #0
 80054d6:	4618      	mov	r0, r3
 80054d8:	f009 fab5 	bl	800ea46 <memset>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80054e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e6:	2100      	movs	r1, #0
 80054e8:	4618      	mov	r0, r3
 80054ea:	f009 faac 	bl	800ea46 <memset>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80054f4:	2264      	movs	r2, #100	; 0x64
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f009 faa4 	bl	800ea46 <memset>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8005504:	2264      	movs	r2, #100	; 0x64
 8005506:	2100      	movs	r1, #0
 8005508:	4618      	mov	r0, r3
 800550a:	f009 fa9c 	bl	800ea46 <memset>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe f93f 	bl	80037e8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	0800f0ac 	.word	0x0800f0ac

08005578 <_Z9call_backRKN13geometry_msgs5TwistE>:
char hello[] = "Hello world from STM32!";
extern int16_t sensor_buff[5];
int right_joy;
double left_joy, left_y;
//extern int16_t sensor_buff[5];
void call_back(const geometry_msgs::Twist& cmd_vel){
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	right_joy = cmd_vel.angular.z;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005586:	4610      	mov	r0, r2
 8005588:	4619      	mov	r1, r3
 800558a:	f7fb fab5 	bl	8000af8 <__aeabi_d2iz>
 800558e:	4603      	mov	r3, r0
 8005590:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <_Z9call_backRKN13geometry_msgs5TwistE+0x3c>)
 8005592:	6013      	str	r3, [r2, #0]
	left_joy = cmd_vel.linear.x;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800559a:	4907      	ldr	r1, [pc, #28]	; (80055b8 <_Z9call_backRKN13geometry_msgs5TwistE+0x40>)
 800559c:	e9c1 2300 	strd	r2, r3, [r1]
	left_y = cmd_vel.linear.y;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80055a6:	4905      	ldr	r1, [pc, #20]	; (80055bc <_Z9call_backRKN13geometry_msgs5TwistE+0x44>)
 80055a8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80055ac:	bf00      	nop
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20001dfc 	.word	0x20001dfc
 80055b8:	20001e00 	.word	0x20001e00
 80055bc:	20001e08 	.word	0x20001e08

080055c0 <setup>:

ros::Publisher chatter("chatter", &str_msg);
ros::Publisher sensor("sensor", &Sensor_data);
ros::Subscriber <geometry_msgs::Twist> joy("cmd_vel", &call_back);

void setup(void){
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
	nh.initNode();
 80055c4:	4806      	ldr	r0, [pc, #24]	; (80055e0 <setup+0x20>)
 80055c6:	f000 f89f 	bl	8005708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(sensor);
 80055ca:	4906      	ldr	r1, [pc, #24]	; (80055e4 <setup+0x24>)
 80055cc:	4804      	ldr	r0, [pc, #16]	; (80055e0 <setup+0x20>)
 80055ce:	f000 f8b8 	bl	8005742 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(joy);
 80055d2:	4905      	ldr	r1, [pc, #20]	; (80055e8 <setup+0x28>)
 80055d4:	4802      	ldr	r0, [pc, #8]	; (80055e0 <setup+0x20>)
 80055d6:	f000 f8e2 	bl	800579e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
//	nh.advertise(imu);
}
 80055da:	bf00      	nop
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20001894 	.word	0x20001894
 80055e4:	20001e24 	.word	0x20001e24
 80055e8:	20001e38 	.word	0x20001e38

080055ec <loop>:

void loop(void){
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0

//	str_msg.data = hello;
//	chatter.publish(&str_msg);
//	nh.spinOnce();
//	HAL_Delay(1);
    Sensor_data.data_length =5;
 80055f0:	4b05      	ldr	r3, [pc, #20]	; (8005608 <loop+0x1c>)
 80055f2:	2205      	movs	r2, #5
 80055f4:	625a      	str	r2, [r3, #36]	; 0x24
		Sensor_data.data= sensor_buff;
 80055f6:	4b04      	ldr	r3, [pc, #16]	; (8005608 <loop+0x1c>)
 80055f8:	4a04      	ldr	r2, [pc, #16]	; (800560c <loop+0x20>)
 80055fa:	62da      	str	r2, [r3, #44]	; 0x2c
		sensor.publish(&Sensor_data);
 80055fc:	4902      	ldr	r1, [pc, #8]	; (8005608 <loop+0x1c>)
 80055fe:	4804      	ldr	r0, [pc, #16]	; (8005610 <loop+0x24>)
 8005600:	f7fe fbd5 	bl	8003dae <_ZN3ros9Publisher7publishEPKNS_3MsgE>
//		}else{
//			imu_data.data = false;
//		}
//		imu.publish(&imu_data);
//		nh.spinOnce();
}
 8005604:	bf00      	nop
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20001dcc 	.word	0x20001dcc
 800560c:	20000838 	.word	0x20000838
 8005610:	20001e24 	.word	0x20001e24

08005614 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e00c      	b.n	800563e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	fa22 f103 	lsr.w	r1, r2, r3
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	b2ca      	uxtb	r2, r1
 8005636:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3301      	adds	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b03      	cmp	r3, #3
 8005642:	d9ef      	bls.n	8005624 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	e010      	b.n	800568a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	440a      	add	r2, r1
 8005672:	7812      	ldrb	r2, [r2, #0]
 8005674:	4611      	mov	r1, r2
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	00d2      	lsls	r2, r2, #3
 800567a:	fa01 f202 	lsl.w	r2, r1, r2
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3301      	adds	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b03      	cmp	r3, #3
 800568e:	d9eb      	bls.n	8005668 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8005690:	bf00      	nop
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	4a04      	ldr	r2, [pc, #16]	; (80056bc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	0800f150 	.word	0x0800f150

080056c0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff ffe5 	bl	80056a0 <_ZN3ros11Subscriber_C1Ev>
 80056d6:	4a0b      	ldr	r2, [pc, #44]	; (8005704 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3310      	adds	r3, #16
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff fe43 	bl	800536c <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	609a      	str	r2, [r3, #8]
  };
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	0800f094 	.word	0x0800f094

08005708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe fc9b 	bl	8004050 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	e01b      	b.n	800578a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800575a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d110      	bne.n	8005784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	60da      	str	r2, [r3, #12]
        return true;
 8005780:	2301      	movs	r3, #1
 8005782:	e006      	b.n	8005792 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3301      	adds	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b18      	cmp	r3, #24
 800578e:	dde0      	ble.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8005790:	2300      	movs	r3, #0
  }
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e01a      	b.n	80057e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10e      	bne.n	80057de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	605a      	str	r2, [r3, #4]
        return true;
 80057da:	2301      	movs	r3, #1
 80057dc:	e006      	b.n	80057ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b18      	cmp	r3, #24
 80057e8:	dde1      	ble.n	80057ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80057ea:	2300      	movs	r3, #0
  }
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <_Z41__static_initialization_and_destruction_0ii>:
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d123      	bne.n	8005850 <_Z41__static_initialization_and_destruction_0ii+0x58>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800580e:	4293      	cmp	r3, r2
 8005810:	d11e      	bne.n	8005850 <_Z41__static_initialization_and_destruction_0ii+0x58>
SerialClass serial(huart2);
 8005812:	4911      	ldr	r1, [pc, #68]	; (8005858 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8005814:	4811      	ldr	r0, [pc, #68]	; (800585c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005816:	f7fe faea 	bl	8003dee <_ZN11SerialClassC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 800581a:	4811      	ldr	r0, [pc, #68]	; (8005860 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800581c:	f7ff fe3a 	bl	8005494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8005820:	4810      	ldr	r0, [pc, #64]	; (8005864 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005822:	f7fe fc4d 	bl	80040c0 <_ZN8std_msgs6StringC1Ev>
std_msgs::Int16MultiArray Sensor_data;
 8005826:	4810      	ldr	r0, [pc, #64]	; (8005868 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005828:	f7fe ff6a 	bl	8004700 <_ZN8std_msgs15Int16MultiArrayC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 800582c:	2300      	movs	r3, #0
 800582e:	4a0d      	ldr	r2, [pc, #52]	; (8005864 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005830:	490e      	ldr	r1, [pc, #56]	; (800586c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8005832:	480f      	ldr	r0, [pc, #60]	; (8005870 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8005834:	f7fe faa4 	bl	8003d80 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensor("sensor", &Sensor_data);
 8005838:	2300      	movs	r3, #0
 800583a:	4a0b      	ldr	r2, [pc, #44]	; (8005868 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800583c:	490d      	ldr	r1, [pc, #52]	; (8005874 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800583e:	480e      	ldr	r0, [pc, #56]	; (8005878 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005840:	f7fe fa9e 	bl	8003d80 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber <geometry_msgs::Twist> joy("cmd_vel", &call_back);
 8005844:	2301      	movs	r3, #1
 8005846:	4a0d      	ldr	r2, [pc, #52]	; (800587c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005848:	490d      	ldr	r1, [pc, #52]	; (8005880 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800584a:	480e      	ldr	r0, [pc, #56]	; (8005884 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800584c:	f7ff ff38 	bl	80056c0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8005850:	bf00      	nop
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	2000068c 	.word	0x2000068c
 800585c:	20000888 	.word	0x20000888
 8005860:	20001894 	.word	0x20001894
 8005864:	20001dc4 	.word	0x20001dc4
 8005868:	20001dcc 	.word	0x20001dcc
 800586c:	0800f014 	.word	0x0800f014
 8005870:	20001e10 	.word	0x20001e10
 8005874:	0800f01c 	.word	0x0800f01c
 8005878:	20001e24 	.word	0x20001e24
 800587c:	08005579 	.word	0x08005579
 8005880:	0800f024 	.word	0x0800f024
 8005884:	20001e38 	.word	0x20001e38

08005888 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3310      	adds	r3, #16
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff fda9 	bl	80053f0 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	3210      	adds	r2, #16
 80058a6:	4610      	mov	r0, r2
 80058a8:	4798      	blx	r3
  }
 80058aa:	bf00      	nop
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3310      	adds	r3, #16
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fdb0 	bl	800543c <_ZN13geometry_msgs5Twist7getTypeEv>
 80058dc:	4603      	mov	r3, r0
  }
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3310      	adds	r3, #16
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff fdb0 	bl	8005458 <_ZN13geometry_msgs5Twist6getMD5Ev>
 80058f8:	4603      	mov	r3, r0
  }
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg) override
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b63      	cmp	r3, #99	; 0x63
 8005914:	dd09      	ble.n	800592a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800591c:	f083 0301 	eor.w	r3, r3, #1
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8005926:	2300      	movs	r3, #0
 8005928:	e079      	b.n	8005a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8005936:	3207      	adds	r2, #7
 8005938:	4611      	mov	r1, r2
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	4798      	blx	r3
 800593e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	22ff      	movs	r2, #255	; 0xff
 8005944:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	22fe      	movs	r2, #254	; 0xfe
 800594c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	b2da      	uxtb	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	b29b      	uxth	r3, r3
 800595e:	0a1b      	lsrs	r3, r3, #8
 8005960:	b29b      	uxth	r3, r3
 8005962:	b2da      	uxtb	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8005976:	4413      	add	r3, r2
 8005978:	b2db      	uxtb	r3, r3
 800597a:	43db      	mvns	r3, r3
 800597c:	b2da      	uxtb	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	b2da      	uxtb	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	b21b      	sxth	r3, r3
 8005992:	121b      	asrs	r3, r3, #8
 8005994:	b21b      	sxth	r3, r3
 8005996:	b2da      	uxtb	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80059a2:	2305      	movs	r3, #5
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e00c      	b.n	80059c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	3301      	adds	r3, #1
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	3306      	adds	r3, #6
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	dded      	ble.n	80059a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	3307      	adds	r3, #7
 80059d0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	425a      	negs	r2, r3
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	bf58      	it	pl
 80059dc:	4253      	negpl	r3, r2
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	1c59      	adds	r1, r3, #1
 80059e4:	6179      	str	r1, [r7, #20]
 80059e6:	43d2      	mvns	r2, r2
 80059e8:	b2d1      	uxtb	r1, r2
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	460a      	mov	r2, r1
 80059f0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fa:	dc0a      	bgt.n	8005a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	1d18      	adds	r0, r3, #4
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	f7fe fb3c 	bl	8004086 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	e005      	b.n	8005a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005a12:	4905      	ldr	r1, [pc, #20]	; (8005a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f9e9 	bl	8005dec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8005a1a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3720      	adds	r7, #32
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	0800f02c 	.word	0x0800f02c

08005a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe fb35 	bl	80040a8 <_ZN13STM32Hardware4timeEv>
 8005a3e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d903      	bls.n	8005a5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d009      	beq.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d903      	bls.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d013      	beq.n	8005aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fe fb0f 	bl	80040a8 <_ZN13STM32Hardware4timeEv>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	1ad2      	subs	r2, r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	bf8c      	ite	hi
 8005a98:	2301      	movhi	r3, #1
 8005a9a:	2300      	movls	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8005aa2:	f06f 0301 	mvn.w	r3, #1
 8005aa6:	e190      	b.n	8005dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe fadc 	bl	800406a <_ZN13STM32Hardware4readEv>
 8005ab2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f2c0 8170 	blt.w	8005d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	441a      	add	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005ad2:	2b07      	cmp	r3, #7
 8005ad4:	d11d      	bne.n	8005b12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8005adc:	1c59      	adds	r1, r3, #1
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	b2d1      	uxtb	r1, r2
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	4413      	add	r3, r2
 8005aec:	460a      	mov	r2, r1
 8005aee:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8005af6:	1e5a      	subs	r2, r3, #1
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1b7      	bne.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2208      	movs	r2, #8
 8005b0c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005b10:	e7b2      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d128      	bne.n	8005b6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2bff      	cmp	r3, #255	; 0xff
 8005b20:	d10d      	bne.n	8005b3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f103 0214 	add.w	r2, r3, #20
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8005b3c:	e79c      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3304      	adds	r3, #4
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fab0 	bl	80040a8 <_ZN13STM32Hardware4timeEv>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b52:	4293      	cmp	r3, r2
 8005b54:	bf8c      	ite	hi
 8005b56:	2301      	movhi	r3, #1
 8005b58:	2300      	movls	r3, #0
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d08b      	beq.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8005b68:	f06f 0301 	mvn.w	r3, #1
 8005b6c:	e12d      	b.n	8005dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d118      	bne.n	8005baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2bfe      	cmp	r3, #254	; 0xfe
 8005b7c:	d107      	bne.n	8005b8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005b8c:	e774      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f47f af6b 	bne.w	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f930 	bl	8005e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8005ba8:	e766      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d113      	bne.n	8005bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8005bda:	e74d      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d110      	bne.n	8005c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	441a      	add	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005c06:	e737      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d116      	bne.n	8005c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8005c18:	425a      	negs	r2, r3
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	bf58      	it	pl
 8005c20:	4253      	negpl	r3, r2
 8005c22:	2bff      	cmp	r3, #255	; 0xff
 8005c24:	d107      	bne.n	8005c36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005c34:	e720      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005c3e:	e71b      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	d10f      	bne.n	8005c6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8005c68:	e706      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005c70:	2b06      	cmp	r3, #6
 8005c72:	d117      	bne.n	8005ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	021b      	lsls	r3, r3, #8
 8005c7e:	441a      	add	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2207      	movs	r2, #7
 8005c8a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f47f aeef 	bne.w	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005ca2:	e6e9      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	f47f aee4 	bne.w	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8005cbe:	425a      	negs	r2, r3
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	bf58      	it	pl
 8005cc6:	4253      	negpl	r3, r2
 8005cc8:	2bff      	cmp	r3, #255	; 0xff
 8005cca:	f47f aed5 	bne.w	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d110      	bne.n	8005cfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f895 	bl	8005e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f8af 	bl	8005e42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 8005cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf8:	e067      	b.n	8005dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005d00:	2b0a      	cmp	r3, #10
 8005d02:	d106      	bne.n	8005d12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3318      	adds	r3, #24
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f97a 	bl	8006004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8005d10:	e6b2      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005d18:	2b06      	cmp	r3, #6
 8005d1a:	d10d      	bne.n	8005d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3318      	adds	r3, #24
 8005d26:	4619      	mov	r1, r3
 8005d28:	4610      	mov	r0, r2
 8005d2a:	f7fd fe9c 	bl	8003a66 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8005d36:	e69f      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005d3e:	2b0b      	cmp	r3, #11
 8005d40:	d104      	bne.n	8005d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8005d4a:	e695      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005d52:	3b64      	subs	r3, #100	; 0x64
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f43f ae89 	beq.w	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005d6c:	3b64      	subs	r3, #100	; 0x64
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	6858      	ldr	r0, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005d80:	3b64      	subs	r3, #100	; 0x64
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	3218      	adds	r2, #24
 8005d96:	4611      	mov	r1, r2
 8005d98:	4798      	blx	r3
    while (true)
 8005d9a:	e66d      	b.n	8005a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8005d9c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00f      	beq.n	8005dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d906      	bls.n	8005dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f824 	bl	8005e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 8005dc8:	2300      	movs	r3, #0
  }
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
    return configured_;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	2103      	movs	r1, #3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f94c 	bl	8006098 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8005e00:	bf00      	nop
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005e10:	f107 030c 	add.w	r3, r7, #12
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fd f983 	bl	8003120 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f107 020c 	add.w	r2, r7, #12
 8005e24:	210a      	movs	r1, #10
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4798      	blx	r3
    rt_time = hardware_.time();
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe f93a 	bl	80040a8 <_ZN13STM32Hardware4timeEv>
 8005e34:	4602      	mov	r2, r0
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	609a      	str	r2, [r3, #8]
  }
 8005e3a:	bf00      	nop
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8005e42:	b590      	push	{r4, r7, lr}
 8005e44:	b08b      	sub	sp, #44	; 0x2c
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8005e4a:	f107 030c 	add.w	r3, r7, #12
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fd fa56 	bl	8003300 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005e54:	2300      	movs	r3, #0
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
 8005e58:	e05a      	b.n	8005f10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
      if (publishers[i] != 0) // non-empty slot
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d04f      	beq.n	8005f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
        ti.topic_id = publishers[i]->id_;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e80:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e98:	6859      	ldr	r1, [r3, #4]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3308      	adds	r3, #8
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4608      	mov	r0, r1
 8005eb0:	4798      	blx	r3
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eba:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	330c      	adds	r3, #12
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4608      	mov	r0, r1
 8005eda:	4798      	blx	r3
 8005edc:	4603      	mov	r3, r0
 8005ede:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee4:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681c      	ldr	r4, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fd ff6c 	bl	8003dd6 <_ZN3ros9Publisher15getEndpointTypeEv>
 8005efe:	4601      	mov	r1, r0
 8005f00:	f107 030c 	add.w	r3, r7, #12
 8005f04:	461a      	mov	r2, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	2b18      	cmp	r3, #24
 8005f14:	dda1      	ble.n	8005e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005f16:	2300      	movs	r3, #0
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1a:	e067      	b.n	8005fec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
      if (subscribers[i] != 0) // non-empty slot
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d05b      	beq.n	8005fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
        ti.topic_id = subscribers[i]->id_;
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	6859      	ldr	r1, [r3, #4]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3308      	adds	r3, #8
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4608      	mov	r0, r1
 8005f78:	4798      	blx	r3
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	6859      	ldr	r1, [r3, #4]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	4798      	blx	r3
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fac:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681c      	ldr	r4, [r3, #0]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	6859      	ldr	r1, [r3, #4]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4608      	mov	r0, r1
 8005fd8:	4798      	blx	r3
 8005fda:	4601      	mov	r1, r0
 8005fdc:	f107 030c 	add.w	r3, r7, #12
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	3301      	adds	r3, #1
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	2b18      	cmp	r3, #24
 8005ff0:	dd94      	ble.n	8005f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
    configured_ = true;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 8005ffa:	bf00      	nop
 8005ffc:	372c      	adds	r7, #44	; 0x2c
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd90      	pop	{r4, r7, pc}
	...

08006004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800600e:	f107 0308 	add.w	r3, r7, #8
 8006012:	4618      	mov	r0, r3
 8006014:	f7fd f884 	bl	8003120 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3304      	adds	r3, #4
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe f843 	bl	80040a8 <_ZN13STM32Hardware4timeEv>
 8006022:	4602      	mov	r2, r0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800602c:	f107 0308 	add.w	r3, r7, #8
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7fd f8e4 	bl	8003200 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	4914      	ldr	r1, [pc, #80]	; (8006090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800603e:	fba1 1303 	umull	r1, r3, r1, r3
 8006042:	099b      	lsrs	r3, r3, #6
 8006044:	4413      	add	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8006048:	6939      	ldr	r1, [r7, #16]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4b10      	ldr	r3, [pc, #64]	; (8006090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800604e:	fba3 0302 	umull	r0, r3, r3, r2
 8006052:	099b      	lsrs	r3, r3, #6
 8006054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006058:	fb00 f303 	mul.w	r3, r0, r3
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	4a0d      	ldr	r2, [pc, #52]	; (8006094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8006060:	fb02 f303 	mul.w	r3, r2, r3
 8006064:	440b      	add	r3, r1
 8006066:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8006068:	f107 0308 	add.w	r3, r7, #8
 800606c:	3304      	adds	r3, #4
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f82d 	bl	80060d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3304      	adds	r3, #4
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe f814 	bl	80040a8 <_ZN13STM32Hardware4timeEv>
 8006080:	4602      	mov	r2, r0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8006088:	bf00      	nop
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	10624dd3 	.word	0x10624dd3
 8006094:	000f4240 	.word	0x000f4240

08006098 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	460b      	mov	r3, r1
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80060a6:	f107 0314 	add.w	r3, r7, #20
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fd faec 	bl	8003688 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80060b0:	7afb      	ldrb	r3, [r7, #11]
 80060b2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f107 0214 	add.w	r2, r7, #20
 80060c2:	2107      	movs	r1, #7
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	4798      	blx	r3
  }
 80060c8:	bf00      	nop
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3304      	adds	r3, #4
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fd ffe2 	bl	80040a8 <_ZN13STM32Hardware4timeEv>
 80060e4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4914      	ldr	r1, [pc, #80]	; (8006140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 80060ee:	fba1 1303 	umull	r1, r3, r1, r3
 80060f2:	099b      	lsrs	r3, r3, #6
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	1e5a      	subs	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	6859      	ldr	r1, [r3, #4]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8006104:	fba3 0302 	umull	r0, r3, r3, r2
 8006108:	099b      	lsrs	r3, r3, #6
 800610a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800610e:	fb00 f303 	mul.w	r3, r0, r3
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	4a0b      	ldr	r2, [pc, #44]	; (8006144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8006116:	fb02 f303 	mul.w	r3, r2, r3
 800611a:	1aca      	subs	r2, r1, r3
 800611c:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 800611e:	4413      	add	r3, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f103 020c 	add.w	r2, r3, #12
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3310      	adds	r3, #16
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f000 fcdb 	bl	8006aec <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	10624dd3 	.word	0x10624dd3
 8006144:	000f4240 	.word	0x000f4240
 8006148:	3b9aca00 	.word	0x3b9aca00

0800614c <_GLOBAL__sub_I_serial>:
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
 8006150:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006154:	2001      	movs	r0, #1
 8006156:	f7ff fb4f 	bl	80057f8 <_Z41__static_initialization_and_destruction_0ii>
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006162:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <HAL_MspInit+0x4c>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	4a10      	ldr	r2, [pc, #64]	; (80061a8 <HAL_MspInit+0x4c>)
 8006168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616c:	6413      	str	r3, [r2, #64]	; 0x40
 800616e:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <HAL_MspInit+0x4c>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006176:	607b      	str	r3, [r7, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800617a:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <HAL_MspInit+0x4c>)
 800617c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617e:	4a0a      	ldr	r2, [pc, #40]	; (80061a8 <HAL_MspInit+0x4c>)
 8006180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006184:	6453      	str	r3, [r2, #68]	; 0x44
 8006186:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <HAL_MspInit+0x4c>)
 8006188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006192:	2200      	movs	r2, #0
 8006194:	210f      	movs	r1, #15
 8006196:	f06f 0001 	mvn.w	r0, #1
 800619a:	f000 ff54 	bl	8007046 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40023800 	.word	0x40023800

080061ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08a      	sub	sp, #40	; 0x28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061b4:	f107 0314 	add.w	r3, r7, #20
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	605a      	str	r2, [r3, #4]
 80061be:	609a      	str	r2, [r3, #8]
 80061c0:	60da      	str	r2, [r3, #12]
 80061c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a17      	ldr	r2, [pc, #92]	; (8006228 <HAL_CAN_MspInit+0x7c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d127      	bne.n	800621e <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80061ce:	4b17      	ldr	r3, [pc, #92]	; (800622c <HAL_CAN_MspInit+0x80>)
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	4a16      	ldr	r2, [pc, #88]	; (800622c <HAL_CAN_MspInit+0x80>)
 80061d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061d8:	6413      	str	r3, [r2, #64]	; 0x40
 80061da:	4b14      	ldr	r3, [pc, #80]	; (800622c <HAL_CAN_MspInit+0x80>)
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061e6:	4b11      	ldr	r3, [pc, #68]	; (800622c <HAL_CAN_MspInit+0x80>)
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	4a10      	ldr	r2, [pc, #64]	; (800622c <HAL_CAN_MspInit+0x80>)
 80061ec:	f043 0308 	orr.w	r3, r3, #8
 80061f0:	6313      	str	r3, [r2, #48]	; 0x30
 80061f2:	4b0e      	ldr	r3, [pc, #56]	; (800622c <HAL_CAN_MspInit+0x80>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80061fe:	2303      	movs	r3, #3
 8006200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006202:	2302      	movs	r3, #2
 8006204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006206:	2300      	movs	r3, #0
 8006208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800620a:	2303      	movs	r3, #3
 800620c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800620e:	2309      	movs	r3, #9
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006212:	f107 0314 	add.w	r3, r7, #20
 8006216:	4619      	mov	r1, r3
 8006218:	4805      	ldr	r0, [pc, #20]	; (8006230 <HAL_CAN_MspInit+0x84>)
 800621a:	f000 ffd9 	bl	80071d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800621e:	bf00      	nop
 8006220:	3728      	adds	r7, #40	; 0x28
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40006400 	.word	0x40006400
 800622c:	40023800 	.word	0x40023800
 8006230:	40020c00 	.word	0x40020c00

08006234 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b0ac      	sub	sp, #176	; 0xb0
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800623c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	605a      	str	r2, [r3, #4]
 8006246:	609a      	str	r2, [r3, #8]
 8006248:	60da      	str	r2, [r3, #12]
 800624a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800624c:	f107 0318 	add.w	r3, r7, #24
 8006250:	2284      	movs	r2, #132	; 0x84
 8006252:	2100      	movs	r1, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f008 fbf6 	bl	800ea46 <memset>
  if(hi2c->Instance==I2C2)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a44      	ldr	r2, [pc, #272]	; (8006370 <HAL_I2C_MspInit+0x13c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d13d      	bne.n	80062e0 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006264:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006268:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800626a:	2300      	movs	r3, #0
 800626c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006270:	f107 0318 	add.w	r3, r7, #24
 8006274:	4618      	mov	r0, r3
 8006276:	f001 ffdb 	bl	8008230 <HAL_RCCEx_PeriphCLKConfig>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8006280:	f7fc ff28 	bl	80030d4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006284:	4b3b      	ldr	r3, [pc, #236]	; (8006374 <HAL_I2C_MspInit+0x140>)
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	4a3a      	ldr	r2, [pc, #232]	; (8006374 <HAL_I2C_MspInit+0x140>)
 800628a:	f043 0320 	orr.w	r3, r3, #32
 800628e:	6313      	str	r3, [r2, #48]	; 0x30
 8006290:	4b38      	ldr	r3, [pc, #224]	; (8006374 <HAL_I2C_MspInit+0x140>)
 8006292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006294:	f003 0320 	and.w	r3, r3, #32
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800629c:	2303      	movs	r3, #3
 800629e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80062a2:	2312      	movs	r3, #18
 80062a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a8:	2300      	movs	r3, #0
 80062aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062ae:	2303      	movs	r3, #3
 80062b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80062b4:	2304      	movs	r3, #4
 80062b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80062ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80062be:	4619      	mov	r1, r3
 80062c0:	482d      	ldr	r0, [pc, #180]	; (8006378 <HAL_I2C_MspInit+0x144>)
 80062c2:	f000 ff85 	bl	80071d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80062c6:	4b2b      	ldr	r3, [pc, #172]	; (8006374 <HAL_I2C_MspInit+0x140>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	4a2a      	ldr	r2, [pc, #168]	; (8006374 <HAL_I2C_MspInit+0x140>)
 80062cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062d0:	6413      	str	r3, [r2, #64]	; 0x40
 80062d2:	4b28      	ldr	r3, [pc, #160]	; (8006374 <HAL_I2C_MspInit+0x140>)
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80062de:	e042      	b.n	8006366 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a25      	ldr	r2, [pc, #148]	; (800637c <HAL_I2C_MspInit+0x148>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d13d      	bne.n	8006366 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80062ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80062f0:	2300      	movs	r3, #0
 80062f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062f6:	f107 0318 	add.w	r3, r7, #24
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 ff98 	bl	8008230 <HAL_RCCEx_PeriphCLKConfig>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8006306:	f7fc fee5 	bl	80030d4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800630a:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <HAL_I2C_MspInit+0x140>)
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	4a19      	ldr	r2, [pc, #100]	; (8006374 <HAL_I2C_MspInit+0x140>)
 8006310:	f043 0320 	orr.w	r3, r3, #32
 8006314:	6313      	str	r3, [r2, #48]	; 0x30
 8006316:	4b17      	ldr	r3, [pc, #92]	; (8006374 <HAL_I2C_MspInit+0x140>)
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006322:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800632a:	2312      	movs	r3, #18
 800632c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006330:	2300      	movs	r3, #0
 8006332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006336:	2303      	movs	r3, #3
 8006338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800633c:	2304      	movs	r3, #4
 800633e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006342:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006346:	4619      	mov	r1, r3
 8006348:	480b      	ldr	r0, [pc, #44]	; (8006378 <HAL_I2C_MspInit+0x144>)
 800634a:	f000 ff41 	bl	80071d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800634e:	4b09      	ldr	r3, [pc, #36]	; (8006374 <HAL_I2C_MspInit+0x140>)
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	4a08      	ldr	r2, [pc, #32]	; (8006374 <HAL_I2C_MspInit+0x140>)
 8006354:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006358:	6413      	str	r3, [r2, #64]	; 0x40
 800635a:	4b06      	ldr	r3, [pc, #24]	; (8006374 <HAL_I2C_MspInit+0x140>)
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006362:	60bb      	str	r3, [r7, #8]
 8006364:	68bb      	ldr	r3, [r7, #8]
}
 8006366:	bf00      	nop
 8006368:	37b0      	adds	r7, #176	; 0xb0
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	40005800 	.word	0x40005800
 8006374:	40023800 	.word	0x40023800
 8006378:	40021400 	.word	0x40021400
 800637c:	40006000 	.word	0x40006000

08006380 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	; 0x28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006388:	f107 0314 	add.w	r3, r7, #20
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	605a      	str	r2, [r3, #4]
 8006392:	609a      	str	r2, [r3, #8]
 8006394:	60da      	str	r2, [r3, #12]
 8006396:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a2d      	ldr	r2, [pc, #180]	; (8006454 <HAL_SPI_MspInit+0xd4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d153      	bne.n	800644a <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80063a2:	4b2d      	ldr	r3, [pc, #180]	; (8006458 <HAL_SPI_MspInit+0xd8>)
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	4a2c      	ldr	r2, [pc, #176]	; (8006458 <HAL_SPI_MspInit+0xd8>)
 80063a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063ac:	6453      	str	r3, [r2, #68]	; 0x44
 80063ae:	4b2a      	ldr	r3, [pc, #168]	; (8006458 <HAL_SPI_MspInit+0xd8>)
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063ba:	4b27      	ldr	r3, [pc, #156]	; (8006458 <HAL_SPI_MspInit+0xd8>)
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	4a26      	ldr	r2, [pc, #152]	; (8006458 <HAL_SPI_MspInit+0xd8>)
 80063c0:	f043 0301 	orr.w	r3, r3, #1
 80063c4:	6313      	str	r3, [r2, #48]	; 0x30
 80063c6:	4b24      	ldr	r3, [pc, #144]	; (8006458 <HAL_SPI_MspInit+0xd8>)
 80063c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063d2:	4b21      	ldr	r3, [pc, #132]	; (8006458 <HAL_SPI_MspInit+0xd8>)
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	4a20      	ldr	r2, [pc, #128]	; (8006458 <HAL_SPI_MspInit+0xd8>)
 80063d8:	f043 0302 	orr.w	r3, r3, #2
 80063dc:	6313      	str	r3, [r2, #48]	; 0x30
 80063de:	4b1e      	ldr	r3, [pc, #120]	; (8006458 <HAL_SPI_MspInit+0xd8>)
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	60bb      	str	r3, [r7, #8]
 80063e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80063ea:	2320      	movs	r3, #32
 80063ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ee:	2302      	movs	r3, #2
 80063f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063f6:	2303      	movs	r3, #3
 80063f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80063fa:	2305      	movs	r3, #5
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063fe:	f107 0314 	add.w	r3, r7, #20
 8006402:	4619      	mov	r1, r3
 8006404:	4815      	ldr	r0, [pc, #84]	; (800645c <HAL_SPI_MspInit+0xdc>)
 8006406:	f000 fee3 	bl	80071d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800640a:	2310      	movs	r3, #16
 800640c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800640e:	2302      	movs	r3, #2
 8006410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006412:	2301      	movs	r3, #1
 8006414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006416:	2303      	movs	r3, #3
 8006418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800641a:	2305      	movs	r3, #5
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800641e:	f107 0314 	add.w	r3, r7, #20
 8006422:	4619      	mov	r1, r3
 8006424:	480e      	ldr	r0, [pc, #56]	; (8006460 <HAL_SPI_MspInit+0xe0>)
 8006426:	f000 fed3 	bl	80071d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800642a:	2320      	movs	r3, #32
 800642c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800642e:	2302      	movs	r3, #2
 8006430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006432:	2300      	movs	r3, #0
 8006434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006436:	2303      	movs	r3, #3
 8006438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800643a:	2305      	movs	r3, #5
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800643e:	f107 0314 	add.w	r3, r7, #20
 8006442:	4619      	mov	r1, r3
 8006444:	4806      	ldr	r0, [pc, #24]	; (8006460 <HAL_SPI_MspInit+0xe0>)
 8006446:	f000 fec3 	bl	80071d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800644a:	bf00      	nop
 800644c:	3728      	adds	r7, #40	; 0x28
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40013000 	.word	0x40013000
 8006458:	40023800 	.word	0x40023800
 800645c:	40020000 	.word	0x40020000
 8006460:	40020400 	.word	0x40020400

08006464 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b090      	sub	sp, #64	; 0x40
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800646c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	605a      	str	r2, [r3, #4]
 8006476:	609a      	str	r2, [r3, #8]
 8006478:	60da      	str	r2, [r3, #12]
 800647a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a65      	ldr	r2, [pc, #404]	; (8006618 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d131      	bne.n	80064ea <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006486:	4b65      	ldr	r3, [pc, #404]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648a:	4a64      	ldr	r2, [pc, #400]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 800648c:	f043 0301 	orr.w	r3, r3, #1
 8006490:	6453      	str	r3, [r2, #68]	; 0x44
 8006492:	4b62      	ldr	r3, [pc, #392]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800649e:	4b5f      	ldr	r3, [pc, #380]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	4a5e      	ldr	r2, [pc, #376]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80064a4:	f043 0301 	orr.w	r3, r3, #1
 80064a8:	6313      	str	r3, [r2, #48]	; 0x30
 80064aa:	4b5c      	ldr	r3, [pc, #368]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80064ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1_ENCODER_1A_Pin|TIM1_CH2_ENCODER_1B_Pin;
 80064b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064bc:	2302      	movs	r3, #2
 80064be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064c4:	2300      	movs	r3, #0
 80064c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80064c8:	2301      	movs	r3, #1
 80064ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064d0:	4619      	mov	r1, r3
 80064d2:	4853      	ldr	r0, [pc, #332]	; (8006620 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80064d4:	f000 fe7c 	bl	80071d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80064d8:	2200      	movs	r2, #0
 80064da:	2105      	movs	r1, #5
 80064dc:	2019      	movs	r0, #25
 80064de:	f000 fdb2 	bl	8007046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80064e2:	2019      	movs	r0, #25
 80064e4:	f000 fdcb 	bl	800707e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80064e8:	e091      	b.n	800660e <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(htim_encoder->Instance==TIM2)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f2:	d128      	bne.n	8006546 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80064f4:	4b49      	ldr	r3, [pc, #292]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	4a48      	ldr	r2, [pc, #288]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	6413      	str	r3, [r2, #64]	; 0x40
 8006500:	4b46      	ldr	r3, [pc, #280]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	623b      	str	r3, [r7, #32]
 800650a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800650c:	4b43      	ldr	r3, [pc, #268]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	4a42      	ldr	r2, [pc, #264]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	6313      	str	r3, [r2, #48]	; 0x30
 8006518:	4b40      	ldr	r3, [pc, #256]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 800651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TIM2_CH1_ENCODER_2A_Pin|TIM2_CH2_ENCODER_2B_Pin;
 8006524:	2303      	movs	r3, #3
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006528:	2302      	movs	r3, #2
 800652a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652c:	2300      	movs	r3, #0
 800652e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006530:	2300      	movs	r3, #0
 8006532:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006534:	2301      	movs	r3, #1
 8006536:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800653c:	4619      	mov	r1, r3
 800653e:	4838      	ldr	r0, [pc, #224]	; (8006620 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8006540:	f000 fe46 	bl	80071d0 <HAL_GPIO_Init>
}
 8006544:	e063      	b.n	800660e <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(htim_encoder->Instance==TIM4)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a36      	ldr	r2, [pc, #216]	; (8006624 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d129      	bne.n	80065a4 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006550:	4b32      	ldr	r3, [pc, #200]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	4a31      	ldr	r2, [pc, #196]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006556:	f043 0304 	orr.w	r3, r3, #4
 800655a:	6413      	str	r3, [r2, #64]	; 0x40
 800655c:	4b2f      	ldr	r3, [pc, #188]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006568:	4b2c      	ldr	r3, [pc, #176]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	4a2b      	ldr	r2, [pc, #172]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 800656e:	f043 0308 	orr.w	r3, r3, #8
 8006572:	6313      	str	r3, [r2, #48]	; 0x30
 8006574:	4b29      	ldr	r3, [pc, #164]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM4_CH1_ENCODER_4A_Pin|TIM4_CH2_ENCODER_4B_Pin;
 8006580:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006584:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006586:	2302      	movs	r3, #2
 8006588:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800658a:	2300      	movs	r3, #0
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800658e:	2300      	movs	r3, #0
 8006590:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006592:	2302      	movs	r3, #2
 8006594:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800659a:	4619      	mov	r1, r3
 800659c:	4822      	ldr	r0, [pc, #136]	; (8006628 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800659e:	f000 fe17 	bl	80071d0 <HAL_GPIO_Init>
}
 80065a2:	e034      	b.n	800660e <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(htim_encoder->Instance==TIM8)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a20      	ldr	r2, [pc, #128]	; (800662c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d12f      	bne.n	800660e <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80065ae:	4b1b      	ldr	r3, [pc, #108]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80065b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b2:	4a1a      	ldr	r2, [pc, #104]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80065b4:	f043 0302 	orr.w	r3, r3, #2
 80065b8:	6453      	str	r3, [r2, #68]	; 0x44
 80065ba:	4b18      	ldr	r3, [pc, #96]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80065bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065c6:	4b15      	ldr	r3, [pc, #84]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80065c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ca:	4a14      	ldr	r2, [pc, #80]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80065cc:	f043 0304 	orr.w	r3, r3, #4
 80065d0:	6313      	str	r3, [r2, #48]	; 0x30
 80065d2:	4b12      	ldr	r3, [pc, #72]	; (800661c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_ENCODER_3A_Pin|TIM8_CH2_ENCODER_3B_Pin;
 80065de:	23c0      	movs	r3, #192	; 0xc0
 80065e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e2:	2302      	movs	r3, #2
 80065e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ea:	2300      	movs	r3, #0
 80065ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80065ee:	2303      	movs	r3, #3
 80065f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80065f6:	4619      	mov	r1, r3
 80065f8:	480d      	ldr	r0, [pc, #52]	; (8006630 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80065fa:	f000 fde9 	bl	80071d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80065fe:	2200      	movs	r2, #0
 8006600:	2105      	movs	r1, #5
 8006602:	202c      	movs	r0, #44	; 0x2c
 8006604:	f000 fd1f 	bl	8007046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006608:	202c      	movs	r0, #44	; 0x2c
 800660a:	f000 fd38 	bl	800707e <HAL_NVIC_EnableIRQ>
}
 800660e:	bf00      	nop
 8006610:	3740      	adds	r7, #64	; 0x40
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40010000 	.word	0x40010000
 800661c:	40023800 	.word	0x40023800
 8006620:	40020000 	.word	0x40020000
 8006624:	40000800 	.word	0x40000800
 8006628:	40020c00 	.word	0x40020c00
 800662c:	40010400 	.word	0x40010400
 8006630:	40020800 	.word	0x40020800

08006634 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1c      	ldr	r2, [pc, #112]	; (80066b4 <HAL_TIM_PWM_MspInit+0x80>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d10c      	bne.n	8006660 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006646:	4b1c      	ldr	r3, [pc, #112]	; (80066b8 <HAL_TIM_PWM_MspInit+0x84>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	4a1b      	ldr	r2, [pc, #108]	; (80066b8 <HAL_TIM_PWM_MspInit+0x84>)
 800664c:	f043 0302 	orr.w	r3, r3, #2
 8006650:	6413      	str	r3, [r2, #64]	; 0x40
 8006652:	4b19      	ldr	r3, [pc, #100]	; (80066b8 <HAL_TIM_PWM_MspInit+0x84>)
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800665e:	e022      	b.n	80066a6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM5)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a15      	ldr	r2, [pc, #84]	; (80066bc <HAL_TIM_PWM_MspInit+0x88>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d10c      	bne.n	8006684 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800666a:	4b13      	ldr	r3, [pc, #76]	; (80066b8 <HAL_TIM_PWM_MspInit+0x84>)
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	4a12      	ldr	r2, [pc, #72]	; (80066b8 <HAL_TIM_PWM_MspInit+0x84>)
 8006670:	f043 0308 	orr.w	r3, r3, #8
 8006674:	6413      	str	r3, [r2, #64]	; 0x40
 8006676:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <HAL_TIM_PWM_MspInit+0x84>)
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	693b      	ldr	r3, [r7, #16]
}
 8006682:	e010      	b.n	80066a6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM12)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a0d      	ldr	r2, [pc, #52]	; (80066c0 <HAL_TIM_PWM_MspInit+0x8c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d10b      	bne.n	80066a6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800668e:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <HAL_TIM_PWM_MspInit+0x84>)
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	4a09      	ldr	r2, [pc, #36]	; (80066b8 <HAL_TIM_PWM_MspInit+0x84>)
 8006694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006698:	6413      	str	r3, [r2, #64]	; 0x40
 800669a:	4b07      	ldr	r3, [pc, #28]	; (80066b8 <HAL_TIM_PWM_MspInit+0x84>)
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40000400 	.word	0x40000400
 80066b8:	40023800 	.word	0x40023800
 80066bc:	40000c00 	.word	0x40000c00
 80066c0:	40001800 	.word	0x40001800

080066c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08a      	sub	sp, #40	; 0x28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066cc:	f107 0314 	add.w	r3, r7, #20
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	609a      	str	r2, [r3, #8]
 80066d8:	60da      	str	r2, [r3, #12]
 80066da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1b      	ldr	r2, [pc, #108]	; (8006750 <HAL_TIM_Base_MspInit+0x8c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d130      	bne.n	8006748 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80066e6:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <HAL_TIM_Base_MspInit+0x90>)
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	4a1a      	ldr	r2, [pc, #104]	; (8006754 <HAL_TIM_Base_MspInit+0x90>)
 80066ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f0:	6413      	str	r3, [r2, #64]	; 0x40
 80066f2:	4b18      	ldr	r3, [pc, #96]	; (8006754 <HAL_TIM_Base_MspInit+0x90>)
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fa:	613b      	str	r3, [r7, #16]
 80066fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80066fe:	4b15      	ldr	r3, [pc, #84]	; (8006754 <HAL_TIM_Base_MspInit+0x90>)
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	4a14      	ldr	r2, [pc, #80]	; (8006754 <HAL_TIM_Base_MspInit+0x90>)
 8006704:	f043 0320 	orr.w	r3, r3, #32
 8006708:	6313      	str	r3, [r2, #48]	; 0x30
 800670a:	4b12      	ldr	r3, [pc, #72]	; (8006754 <HAL_TIM_Base_MspInit+0x90>)
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800671a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800671c:	2302      	movs	r3, #2
 800671e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006720:	2300      	movs	r3, #0
 8006722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006724:	2300      	movs	r3, #0
 8006726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8006728:	2309      	movs	r3, #9
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800672c:	f107 0314 	add.w	r3, r7, #20
 8006730:	4619      	mov	r1, r3
 8006732:	4809      	ldr	r0, [pc, #36]	; (8006758 <HAL_TIM_Base_MspInit+0x94>)
 8006734:	f000 fd4c 	bl	80071d0 <HAL_GPIO_Init>

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8006738:	2200      	movs	r2, #0
 800673a:	2105      	movs	r1, #5
 800673c:	202c      	movs	r0, #44	; 0x2c
 800673e:	f000 fc82 	bl	8007046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006742:	202c      	movs	r0, #44	; 0x2c
 8006744:	f000 fc9b 	bl	800707e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006748:	bf00      	nop
 800674a:	3728      	adds	r7, #40	; 0x28
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	40001c00 	.word	0x40001c00
 8006754:	40023800 	.word	0x40023800
 8006758:	40021400 	.word	0x40021400

0800675c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08c      	sub	sp, #48	; 0x30
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006764:	f107 031c 	add.w	r3, r7, #28
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	605a      	str	r2, [r3, #4]
 800676e:	609a      	str	r2, [r3, #8]
 8006770:	60da      	str	r2, [r3, #12]
 8006772:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a42      	ldr	r2, [pc, #264]	; (8006884 <HAL_TIM_MspPostInit+0x128>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d139      	bne.n	80067f2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800677e:	4b42      	ldr	r3, [pc, #264]	; (8006888 <HAL_TIM_MspPostInit+0x12c>)
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	4a41      	ldr	r2, [pc, #260]	; (8006888 <HAL_TIM_MspPostInit+0x12c>)
 8006784:	f043 0301 	orr.w	r3, r3, #1
 8006788:	6313      	str	r3, [r2, #48]	; 0x30
 800678a:	4b3f      	ldr	r3, [pc, #252]	; (8006888 <HAL_TIM_MspPostInit+0x12c>)
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	61bb      	str	r3, [r7, #24]
 8006794:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006796:	4b3c      	ldr	r3, [pc, #240]	; (8006888 <HAL_TIM_MspPostInit+0x12c>)
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	4a3b      	ldr	r2, [pc, #236]	; (8006888 <HAL_TIM_MspPostInit+0x12c>)
 800679c:	f043 0304 	orr.w	r3, r3, #4
 80067a0:	6313      	str	r3, [r2, #48]	; 0x30
 80067a2:	4b39      	ldr	r3, [pc, #228]	; (8006888 <HAL_TIM_MspPostInit+0x12c>)
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	697b      	ldr	r3, [r7, #20]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH1_MOTOR4_PWM_Pin|TIM3_CH2_MOTOR_PWM_Pin;
 80067ae:	23c0      	movs	r3, #192	; 0xc0
 80067b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067b2:	2302      	movs	r3, #2
 80067b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067ba:	2300      	movs	r3, #0
 80067bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80067be:	2302      	movs	r3, #2
 80067c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067c2:	f107 031c 	add.w	r3, r7, #28
 80067c6:	4619      	mov	r1, r3
 80067c8:	4830      	ldr	r0, [pc, #192]	; (800688c <HAL_TIM_MspPostInit+0x130>)
 80067ca:	f000 fd01 	bl	80071d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM3_CH3_MOTOR2_PWM_Pin|TIM3_CH4_MOTOR1_PWM_Pin;
 80067ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80067d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067d4:	2302      	movs	r3, #2
 80067d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067dc:	2300      	movs	r3, #0
 80067de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80067e0:	2302      	movs	r3, #2
 80067e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067e4:	f107 031c 	add.w	r3, r7, #28
 80067e8:	4619      	mov	r1, r3
 80067ea:	4829      	ldr	r0, [pc, #164]	; (8006890 <HAL_TIM_MspPostInit+0x134>)
 80067ec:	f000 fcf0 	bl	80071d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80067f0:	e043      	b.n	800687a <HAL_TIM_MspPostInit+0x11e>
  else if(htim->Instance==TIM5)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a27      	ldr	r2, [pc, #156]	; (8006894 <HAL_TIM_MspPostInit+0x138>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d11c      	bne.n	8006836 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067fc:	4b22      	ldr	r3, [pc, #136]	; (8006888 <HAL_TIM_MspPostInit+0x12c>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	4a21      	ldr	r2, [pc, #132]	; (8006888 <HAL_TIM_MspPostInit+0x12c>)
 8006802:	f043 0301 	orr.w	r3, r3, #1
 8006806:	6313      	str	r3, [r2, #48]	; 0x30
 8006808:	4b1f      	ldr	r3, [pc, #124]	; (8006888 <HAL_TIM_MspPostInit+0x12c>)
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH3_MOTOR5_PWM_Pin|TIM5_CH4_MOTOR6_PWM_Pin;
 8006814:	230c      	movs	r3, #12
 8006816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006818:	2302      	movs	r3, #2
 800681a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800681c:	2300      	movs	r3, #0
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006820:	2300      	movs	r3, #0
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006824:	2302      	movs	r3, #2
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006828:	f107 031c 	add.w	r3, r7, #28
 800682c:	4619      	mov	r1, r3
 800682e:	4817      	ldr	r0, [pc, #92]	; (800688c <HAL_TIM_MspPostInit+0x130>)
 8006830:	f000 fcce 	bl	80071d0 <HAL_GPIO_Init>
}
 8006834:	e021      	b.n	800687a <HAL_TIM_MspPostInit+0x11e>
  else if(htim->Instance==TIM12)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a17      	ldr	r2, [pc, #92]	; (8006898 <HAL_TIM_MspPostInit+0x13c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d11c      	bne.n	800687a <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006840:	4b11      	ldr	r3, [pc, #68]	; (8006888 <HAL_TIM_MspPostInit+0x12c>)
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	4a10      	ldr	r2, [pc, #64]	; (8006888 <HAL_TIM_MspPostInit+0x12c>)
 8006846:	f043 0302 	orr.w	r3, r3, #2
 800684a:	6313      	str	r3, [r2, #48]	; 0x30
 800684c:	4b0e      	ldr	r3, [pc, #56]	; (8006888 <HAL_TIM_MspPostInit+0x12c>)
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM12_CH1_MOTOR7_PWM_Pin|TIM12_CH2_MOTOR8_PWM_Pin;
 8006858:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800685c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800685e:	2302      	movs	r3, #2
 8006860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006862:	2300      	movs	r3, #0
 8006864:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006866:	2300      	movs	r3, #0
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800686a:	2309      	movs	r3, #9
 800686c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800686e:	f107 031c 	add.w	r3, r7, #28
 8006872:	4619      	mov	r1, r3
 8006874:	4809      	ldr	r0, [pc, #36]	; (800689c <HAL_TIM_MspPostInit+0x140>)
 8006876:	f000 fcab 	bl	80071d0 <HAL_GPIO_Init>
}
 800687a:	bf00      	nop
 800687c:	3730      	adds	r7, #48	; 0x30
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	40000400 	.word	0x40000400
 8006888:	40023800 	.word	0x40023800
 800688c:	40020000 	.word	0x40020000
 8006890:	40020800 	.word	0x40020800
 8006894:	40000c00 	.word	0x40000c00
 8006898:	40001800 	.word	0x40001800
 800689c:	40020400 	.word	0x40020400

080068a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b0ac      	sub	sp, #176	; 0xb0
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80068ac:	2200      	movs	r2, #0
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	605a      	str	r2, [r3, #4]
 80068b2:	609a      	str	r2, [r3, #8]
 80068b4:	60da      	str	r2, [r3, #12]
 80068b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80068b8:	f107 0318 	add.w	r3, r7, #24
 80068bc:	2284      	movs	r2, #132	; 0x84
 80068be:	2100      	movs	r1, #0
 80068c0:	4618      	mov	r0, r3
 80068c2:	f008 f8c0 	bl	800ea46 <memset>
  if(huart->Instance==USART2)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a42      	ldr	r2, [pc, #264]	; (80069d4 <HAL_UART_MspInit+0x134>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d13b      	bne.n	8006948 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80068d0:	2380      	movs	r3, #128	; 0x80
 80068d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80068d4:	2300      	movs	r3, #0
 80068d6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068d8:	f107 0318 	add.w	r3, r7, #24
 80068dc:	4618      	mov	r0, r3
 80068de:	f001 fca7 	bl	8008230 <HAL_RCCEx_PeriphCLKConfig>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80068e8:	f7fc fbf4 	bl	80030d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80068ec:	4b3a      	ldr	r3, [pc, #232]	; (80069d8 <HAL_UART_MspInit+0x138>)
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	4a39      	ldr	r2, [pc, #228]	; (80069d8 <HAL_UART_MspInit+0x138>)
 80068f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068f6:	6413      	str	r3, [r2, #64]	; 0x40
 80068f8:	4b37      	ldr	r3, [pc, #220]	; (80069d8 <HAL_UART_MspInit+0x138>)
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006904:	4b34      	ldr	r3, [pc, #208]	; (80069d8 <HAL_UART_MspInit+0x138>)
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006908:	4a33      	ldr	r2, [pc, #204]	; (80069d8 <HAL_UART_MspInit+0x138>)
 800690a:	f043 0308 	orr.w	r3, r3, #8
 800690e:	6313      	str	r3, [r2, #48]	; 0x30
 8006910:	4b31      	ldr	r3, [pc, #196]	; (80069d8 <HAL_UART_MspInit+0x138>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800691c:	2360      	movs	r3, #96	; 0x60
 800691e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006922:	2302      	movs	r3, #2
 8006924:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006928:	2300      	movs	r3, #0
 800692a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800692e:	2303      	movs	r3, #3
 8006930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006934:	2307      	movs	r3, #7
 8006936:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800693a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800693e:	4619      	mov	r1, r3
 8006940:	4826      	ldr	r0, [pc, #152]	; (80069dc <HAL_UART_MspInit+0x13c>)
 8006942:	f000 fc45 	bl	80071d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006946:	e041      	b.n	80069cc <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a24      	ldr	r2, [pc, #144]	; (80069e0 <HAL_UART_MspInit+0x140>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d13c      	bne.n	80069cc <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006956:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006958:	2300      	movs	r3, #0
 800695a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800695c:	f107 0318 	add.w	r3, r7, #24
 8006960:	4618      	mov	r0, r3
 8006962:	f001 fc65 	bl	8008230 <HAL_RCCEx_PeriphCLKConfig>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800696c:	f7fc fbb2 	bl	80030d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006970:	4b19      	ldr	r3, [pc, #100]	; (80069d8 <HAL_UART_MspInit+0x138>)
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <HAL_UART_MspInit+0x138>)
 8006976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800697a:	6413      	str	r3, [r2, #64]	; 0x40
 800697c:	4b16      	ldr	r3, [pc, #88]	; (80069d8 <HAL_UART_MspInit+0x138>)
 800697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006988:	4b13      	ldr	r3, [pc, #76]	; (80069d8 <HAL_UART_MspInit+0x138>)
 800698a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698c:	4a12      	ldr	r2, [pc, #72]	; (80069d8 <HAL_UART_MspInit+0x138>)
 800698e:	f043 0308 	orr.w	r3, r3, #8
 8006992:	6313      	str	r3, [r2, #48]	; 0x30
 8006994:	4b10      	ldr	r3, [pc, #64]	; (80069d8 <HAL_UART_MspInit+0x138>)
 8006996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	60bb      	str	r3, [r7, #8]
 800699e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80069a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80069a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069a8:	2302      	movs	r3, #2
 80069aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069b4:	2303      	movs	r3, #3
 80069b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80069ba:	2307      	movs	r3, #7
 80069bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80069c4:	4619      	mov	r1, r3
 80069c6:	4805      	ldr	r0, [pc, #20]	; (80069dc <HAL_UART_MspInit+0x13c>)
 80069c8:	f000 fc02 	bl	80071d0 <HAL_GPIO_Init>
}
 80069cc:	bf00      	nop
 80069ce:	37b0      	adds	r7, #176	; 0xb0
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40004400 	.word	0x40004400
 80069d8:	40023800 	.word	0x40023800
 80069dc:	40020c00 	.word	0x40020c00
 80069e0:	40004800 	.word	0x40004800

080069e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80069e8:	e7fe      	b.n	80069e8 <NMI_Handler+0x4>

080069ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069ea:	b480      	push	{r7}
 80069ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069ee:	e7fe      	b.n	80069ee <HardFault_Handler+0x4>

080069f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069f4:	e7fe      	b.n	80069f4 <MemManage_Handler+0x4>

080069f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069f6:	b480      	push	{r7}
 80069f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069fa:	e7fe      	b.n	80069fa <BusFault_Handler+0x4>

080069fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a00:	e7fe      	b.n	8006a00 <UsageFault_Handler+0x4>

08006a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a02:	b480      	push	{r7}
 8006a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a06:	bf00      	nop
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a14:	f000 f8fc 	bl	8006c10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006a18:	f005 ff78 	bl	800c90c <xTaskGetSchedulerState>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d001      	beq.n	8006a26 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006a22:	f006 f999 	bl	800cd58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a26:	bf00      	nop
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006a30:	4802      	ldr	r0, [pc, #8]	; (8006a3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006a32:	f003 f97f 	bl	8009d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006a36:	bf00      	nop
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	2000042c 	.word	0x2000042c

08006a40 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006a44:	4803      	ldr	r0, [pc, #12]	; (8006a54 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8006a46:	f003 f975 	bl	8009d34 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8006a4a:	4803      	ldr	r0, [pc, #12]	; (8006a58 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006a4c:	f003 f972 	bl	8009d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006a50:	bf00      	nop
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	200005a8 	.word	0x200005a8
 8006a58:	20000640 	.word	0x20000640

08006a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a64:	4a14      	ldr	r2, [pc, #80]	; (8006ab8 <_sbrk+0x5c>)
 8006a66:	4b15      	ldr	r3, [pc, #84]	; (8006abc <_sbrk+0x60>)
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a70:	4b13      	ldr	r3, [pc, #76]	; (8006ac0 <_sbrk+0x64>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d102      	bne.n	8006a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a78:	4b11      	ldr	r3, [pc, #68]	; (8006ac0 <_sbrk+0x64>)
 8006a7a:	4a12      	ldr	r2, [pc, #72]	; (8006ac4 <_sbrk+0x68>)
 8006a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a7e:	4b10      	ldr	r3, [pc, #64]	; (8006ac0 <_sbrk+0x64>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4413      	add	r3, r2
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d207      	bcs.n	8006a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a8c:	f007 ffe4 	bl	800ea58 <__errno>
 8006a90:	4603      	mov	r3, r0
 8006a92:	220c      	movs	r2, #12
 8006a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a96:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9a:	e009      	b.n	8006ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a9c:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <_sbrk+0x64>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006aa2:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <_sbrk+0x64>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	4a05      	ldr	r2, [pc, #20]	; (8006ac0 <_sbrk+0x64>)
 8006aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006aae:	68fb      	ldr	r3, [r7, #12]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	20050000 	.word	0x20050000
 8006abc:	00000400 	.word	0x00000400
 8006ac0:	20001e98 	.word	0x20001e98
 8006ac4:	20005d38 	.word	0x20005d38

08006ac8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006acc:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <SystemInit+0x20>)
 8006ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad2:	4a05      	ldr	r2, [pc, #20]	; (8006ae8 <SystemInit+0x20>)
 8006ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006adc:	bf00      	nop
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	e000ed00 	.word	0xe000ed00

08006aec <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	0a5a      	lsrs	r2, r3, #9
 8006afc:	490f      	ldr	r1, [pc, #60]	; (8006b3c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006afe:	fba1 1202 	umull	r1, r2, r1, r2
 8006b02:	09d2      	lsrs	r2, r2, #7
 8006b04:	490e      	ldr	r1, [pc, #56]	; (8006b40 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8006b06:	fb01 f202 	mul.w	r2, r1, r2
 8006b0a:	1a9b      	subs	r3, r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	0a5b      	lsrs	r3, r3, #9
 8006b14:	4a09      	ldr	r2, [pc, #36]	; (8006b3c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006b16:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1a:	09db      	lsrs	r3, r3, #7
 8006b1c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	441a      	add	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	601a      	str	r2, [r3, #0]
}
 8006b30:	bf00      	nop
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	00044b83 	.word	0x00044b83
 8006b40:	3b9aca00 	.word	0x3b9aca00

08006b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006b48:	480d      	ldr	r0, [pc, #52]	; (8006b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006b4a:	490e      	ldr	r1, [pc, #56]	; (8006b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006b4c:	4a0e      	ldr	r2, [pc, #56]	; (8006b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b50:	e002      	b.n	8006b58 <LoopCopyDataInit>

08006b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b56:	3304      	adds	r3, #4

08006b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b5c:	d3f9      	bcc.n	8006b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b5e:	4a0b      	ldr	r2, [pc, #44]	; (8006b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006b60:	4c0b      	ldr	r4, [pc, #44]	; (8006b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b64:	e001      	b.n	8006b6a <LoopFillZerobss>

08006b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b68:	3204      	adds	r2, #4

08006b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b6c:	d3fb      	bcc.n	8006b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006b6e:	f7ff ffab 	bl	8006ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b72:	f007 ff77 	bl	800ea64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b76:	f7fa f97f 	bl	8000e78 <main>
  bx  lr    
 8006b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006b7c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b84:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8006b88:	0800f464 	.word	0x0800f464
  ldr r2, =_sbss
 8006b8c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8006b90:	20005d34 	.word	0x20005d34

08006b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b94:	e7fe      	b.n	8006b94 <ADC_IRQHandler>

08006b96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b9a:	2003      	movs	r0, #3
 8006b9c:	f000 fa48 	bl	8007030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ba0:	200f      	movs	r0, #15
 8006ba2:	f000 f805 	bl	8006bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ba6:	f7ff fad9 	bl	800615c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006bb8:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <HAL_InitTick+0x54>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <HAL_InitTick+0x58>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fa63 	bl	800709a <HAL_SYSTICK_Config>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e00e      	b.n	8006bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b0f      	cmp	r3, #15
 8006be2:	d80a      	bhi.n	8006bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006be4:	2200      	movs	r2, #0
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	f000 fa2b 	bl	8007046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006bf0:	4a06      	ldr	r2, [pc, #24]	; (8006c0c <HAL_InitTick+0x5c>)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e000      	b.n	8006bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20000014 	.word	0x20000014
 8006c08:	2000001c 	.word	0x2000001c
 8006c0c:	20000018 	.word	0x20000018

08006c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c14:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <HAL_IncTick+0x20>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <HAL_IncTick+0x24>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4413      	add	r3, r2
 8006c20:	4a04      	ldr	r2, [pc, #16]	; (8006c34 <HAL_IncTick+0x24>)
 8006c22:	6013      	str	r3, [r2, #0]
}
 8006c24:	bf00      	nop
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	2000001c 	.word	0x2000001c
 8006c34:	20001e9c 	.word	0x20001e9c

08006c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8006c3c:	4b03      	ldr	r3, [pc, #12]	; (8006c4c <HAL_GetTick+0x14>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	20001e9c 	.word	0x20001e9c

08006c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c58:	f7ff ffee 	bl	8006c38 <HAL_GetTick>
 8006c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c68:	d005      	beq.n	8006c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c6a:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <HAL_Delay+0x44>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c76:	bf00      	nop
 8006c78:	f7ff ffde 	bl	8006c38 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d8f7      	bhi.n	8006c78 <HAL_Delay+0x28>
  {
  }
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	2000001c 	.word	0x2000001c

08006c98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e0ed      	b.n	8006e86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d102      	bne.n	8006cbc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fa78 	bl	80061ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ccc:	f7ff ffb4 	bl	8006c38 <HAL_GetTick>
 8006cd0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006cd2:	e012      	b.n	8006cfa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006cd4:	f7ff ffb0 	bl	8006c38 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b0a      	cmp	r3, #10
 8006ce0:	d90b      	bls.n	8006cfa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2205      	movs	r2, #5
 8006cf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e0c5      	b.n	8006e86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0e5      	beq.n	8006cd4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0202 	bic.w	r2, r2, #2
 8006d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d18:	f7ff ff8e 	bl	8006c38 <HAL_GetTick>
 8006d1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006d1e:	e012      	b.n	8006d46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006d20:	f7ff ff8a 	bl	8006c38 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b0a      	cmp	r3, #10
 8006d2c:	d90b      	bls.n	8006d46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2205      	movs	r2, #5
 8006d3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e09f      	b.n	8006e86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e5      	bne.n	8006d20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	7e1b      	ldrb	r3, [r3, #24]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d108      	bne.n	8006d6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e007      	b.n	8006d7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	7e5b      	ldrb	r3, [r3, #25]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d108      	bne.n	8006d98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	e007      	b.n	8006da8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	7e9b      	ldrb	r3, [r3, #26]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d108      	bne.n	8006dc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0220 	orr.w	r2, r2, #32
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	e007      	b.n	8006dd2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0220 	bic.w	r2, r2, #32
 8006dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	7edb      	ldrb	r3, [r3, #27]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d108      	bne.n	8006dec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0210 	bic.w	r2, r2, #16
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	e007      	b.n	8006dfc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0210 	orr.w	r2, r2, #16
 8006dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	7f1b      	ldrb	r3, [r3, #28]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d108      	bne.n	8006e16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0208 	orr.w	r2, r2, #8
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	e007      	b.n	8006e26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0208 	bic.w	r2, r2, #8
 8006e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	7f5b      	ldrb	r3, [r3, #29]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d108      	bne.n	8006e40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0204 	orr.w	r2, r2, #4
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e007      	b.n	8006e50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0204 	bic.w	r2, r2, #4
 8006e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	ea42 0103 	orr.w	r1, r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	1e5a      	subs	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006eac:	4013      	ands	r3, r2
 8006eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ebe:	4a04      	ldr	r2, [pc, #16]	; (8006ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	60d3      	str	r3, [r2, #12]
}
 8006ec4:	bf00      	nop
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	e000ed00 	.word	0xe000ed00
 8006ed4:	05fa0000 	.word	0x05fa0000

08006ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006edc:	4b04      	ldr	r3, [pc, #16]	; (8006ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	0a1b      	lsrs	r3, r3, #8
 8006ee2:	f003 0307 	and.w	r3, r3, #7
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	e000ed00 	.word	0xe000ed00

08006ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	db0b      	blt.n	8006f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	f003 021f 	and.w	r2, r3, #31
 8006f0c:	4907      	ldr	r1, [pc, #28]	; (8006f2c <__NVIC_EnableIRQ+0x38>)
 8006f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f12:	095b      	lsrs	r3, r3, #5
 8006f14:	2001      	movs	r0, #1
 8006f16:	fa00 f202 	lsl.w	r2, r0, r2
 8006f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	e000e100 	.word	0xe000e100

08006f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4603      	mov	r3, r0
 8006f38:	6039      	str	r1, [r7, #0]
 8006f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	db0a      	blt.n	8006f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	490c      	ldr	r1, [pc, #48]	; (8006f7c <__NVIC_SetPriority+0x4c>)
 8006f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f4e:	0112      	lsls	r2, r2, #4
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	440b      	add	r3, r1
 8006f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f58:	e00a      	b.n	8006f70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	4908      	ldr	r1, [pc, #32]	; (8006f80 <__NVIC_SetPriority+0x50>)
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	3b04      	subs	r3, #4
 8006f68:	0112      	lsls	r2, r2, #4
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	440b      	add	r3, r1
 8006f6e:	761a      	strb	r2, [r3, #24]
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	e000e100 	.word	0xe000e100
 8006f80:	e000ed00 	.word	0xe000ed00

08006f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b089      	sub	sp, #36	; 0x24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	f1c3 0307 	rsb	r3, r3, #7
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	bf28      	it	cs
 8006fa2:	2304      	movcs	r3, #4
 8006fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	2b06      	cmp	r3, #6
 8006fac:	d902      	bls.n	8006fb4 <NVIC_EncodePriority+0x30>
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	3b03      	subs	r3, #3
 8006fb2:	e000      	b.n	8006fb6 <NVIC_EncodePriority+0x32>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc2:	43da      	mvns	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	401a      	ands	r2, r3
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd6:	43d9      	mvns	r1, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fdc:	4313      	orrs	r3, r2
         );
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3724      	adds	r7, #36	; 0x24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ffc:	d301      	bcc.n	8007002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ffe:	2301      	movs	r3, #1
 8007000:	e00f      	b.n	8007022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007002:	4a0a      	ldr	r2, [pc, #40]	; (800702c <SysTick_Config+0x40>)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3b01      	subs	r3, #1
 8007008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800700a:	210f      	movs	r1, #15
 800700c:	f04f 30ff 	mov.w	r0, #4294967295
 8007010:	f7ff ff8e 	bl	8006f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007014:	4b05      	ldr	r3, [pc, #20]	; (800702c <SysTick_Config+0x40>)
 8007016:	2200      	movs	r2, #0
 8007018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800701a:	4b04      	ldr	r3, [pc, #16]	; (800702c <SysTick_Config+0x40>)
 800701c:	2207      	movs	r2, #7
 800701e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	e000e010 	.word	0xe000e010

08007030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff ff29 	bl	8006e90 <__NVIC_SetPriorityGrouping>
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007046:	b580      	push	{r7, lr}
 8007048:	b086      	sub	sp, #24
 800704a:	af00      	add	r7, sp, #0
 800704c:	4603      	mov	r3, r0
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	607a      	str	r2, [r7, #4]
 8007052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007054:	2300      	movs	r3, #0
 8007056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007058:	f7ff ff3e 	bl	8006ed8 <__NVIC_GetPriorityGrouping>
 800705c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	68b9      	ldr	r1, [r7, #8]
 8007062:	6978      	ldr	r0, [r7, #20]
 8007064:	f7ff ff8e 	bl	8006f84 <NVIC_EncodePriority>
 8007068:	4602      	mov	r2, r0
 800706a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800706e:	4611      	mov	r1, r2
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff ff5d 	bl	8006f30 <__NVIC_SetPriority>
}
 8007076:	bf00      	nop
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	4603      	mov	r3, r0
 8007086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff ff31 	bl	8006ef4 <__NVIC_EnableIRQ>
}
 8007092:	bf00      	nop
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7ff ffa2 	bl	8006fec <SysTick_Config>
 80070a8:	4603      	mov	r3, r0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b086      	sub	sp, #24
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]
 80070be:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_DMA_Start_IT+0x26>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e048      	b.n	800716a <HAL_DMA_Start_IT+0xb8>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d137      	bne.n	800715c <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	68b9      	ldr	r1, [r7, #8]
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 f836 	bl	8007172 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800710a:	223f      	movs	r2, #63	; 0x3f
 800710c:	409a      	lsls	r2, r3
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f042 0216 	orr.w	r2, r2, #22
 8007120:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	695a      	ldr	r2, [r3, #20]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007130:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	2b00      	cmp	r3, #0
 8007138:	d007      	beq.n	800714a <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0208 	orr.w	r2, r2, #8
 8007148:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f042 0201 	orr.w	r2, r2, #1
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	e005      	b.n	8007168 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007164:	2302      	movs	r3, #2
 8007166:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007168:	7dfb      	ldrb	r3, [r7, #23]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	607a      	str	r2, [r7, #4]
 800717e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800718e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b40      	cmp	r3, #64	; 0x40
 800719e:	d108      	bne.n	80071b2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80071b0:	e007      	b.n	80071c2 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	60da      	str	r2, [r3, #12]
}
 80071c2:	bf00      	nop
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b089      	sub	sp, #36	; 0x24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80071da:	2300      	movs	r3, #0
 80071dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80071de:	2300      	movs	r3, #0
 80071e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80071e2:	2300      	movs	r3, #0
 80071e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	e175      	b.n	80074dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80071f0:	2201      	movs	r2, #1
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	fa02 f303 	lsl.w	r3, r2, r3
 80071f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4013      	ands	r3, r2
 8007202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	429a      	cmp	r2, r3
 800720a:	f040 8164 	bne.w	80074d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	2b01      	cmp	r3, #1
 8007218:	d005      	beq.n	8007226 <HAL_GPIO_Init+0x56>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d130      	bne.n	8007288 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	2203      	movs	r2, #3
 8007232:	fa02 f303 	lsl.w	r3, r2, r3
 8007236:	43db      	mvns	r3, r3
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	4013      	ands	r3, r2
 800723c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	fa02 f303 	lsl.w	r3, r2, r3
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	4313      	orrs	r3, r2
 800724e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800725c:	2201      	movs	r2, #1
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	fa02 f303 	lsl.w	r3, r2, r3
 8007264:	43db      	mvns	r3, r3
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	4013      	ands	r3, r2
 800726a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	091b      	lsrs	r3, r3, #4
 8007272:	f003 0201 	and.w	r2, r3, #1
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	fa02 f303 	lsl.w	r3, r2, r3
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	4313      	orrs	r3, r2
 8007280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f003 0303 	and.w	r3, r3, #3
 8007290:	2b03      	cmp	r3, #3
 8007292:	d017      	beq.n	80072c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	2203      	movs	r2, #3
 80072a0:	fa02 f303 	lsl.w	r3, r2, r3
 80072a4:	43db      	mvns	r3, r3
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	4013      	ands	r3, r2
 80072aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f003 0303 	and.w	r3, r3, #3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d123      	bne.n	8007318 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	08da      	lsrs	r2, r3, #3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3208      	adds	r2, #8
 80072d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	220f      	movs	r2, #15
 80072e8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ec:	43db      	mvns	r3, r3
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	4013      	ands	r3, r2
 80072f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	fa02 f303 	lsl.w	r3, r2, r3
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	4313      	orrs	r3, r2
 8007308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	08da      	lsrs	r2, r3, #3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3208      	adds	r2, #8
 8007312:	69b9      	ldr	r1, [r7, #24]
 8007314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	2203      	movs	r2, #3
 8007324:	fa02 f303 	lsl.w	r3, r2, r3
 8007328:	43db      	mvns	r3, r3
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	4013      	ands	r3, r2
 800732e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f003 0203 	and.w	r2, r3, #3
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	fa02 f303 	lsl.w	r3, r2, r3
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	4313      	orrs	r3, r2
 8007344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 80be 	beq.w	80074d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800735a:	4b66      	ldr	r3, [pc, #408]	; (80074f4 <HAL_GPIO_Init+0x324>)
 800735c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735e:	4a65      	ldr	r2, [pc, #404]	; (80074f4 <HAL_GPIO_Init+0x324>)
 8007360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007364:	6453      	str	r3, [r2, #68]	; 0x44
 8007366:	4b63      	ldr	r3, [pc, #396]	; (80074f4 <HAL_GPIO_Init+0x324>)
 8007368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007372:	4a61      	ldr	r2, [pc, #388]	; (80074f8 <HAL_GPIO_Init+0x328>)
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	089b      	lsrs	r3, r3, #2
 8007378:	3302      	adds	r3, #2
 800737a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800737e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	220f      	movs	r2, #15
 800738a:	fa02 f303 	lsl.w	r3, r2, r3
 800738e:	43db      	mvns	r3, r3
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	4013      	ands	r3, r2
 8007394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a58      	ldr	r2, [pc, #352]	; (80074fc <HAL_GPIO_Init+0x32c>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d037      	beq.n	800740e <HAL_GPIO_Init+0x23e>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a57      	ldr	r2, [pc, #348]	; (8007500 <HAL_GPIO_Init+0x330>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d031      	beq.n	800740a <HAL_GPIO_Init+0x23a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a56      	ldr	r2, [pc, #344]	; (8007504 <HAL_GPIO_Init+0x334>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d02b      	beq.n	8007406 <HAL_GPIO_Init+0x236>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a55      	ldr	r2, [pc, #340]	; (8007508 <HAL_GPIO_Init+0x338>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d025      	beq.n	8007402 <HAL_GPIO_Init+0x232>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a54      	ldr	r2, [pc, #336]	; (800750c <HAL_GPIO_Init+0x33c>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d01f      	beq.n	80073fe <HAL_GPIO_Init+0x22e>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a53      	ldr	r2, [pc, #332]	; (8007510 <HAL_GPIO_Init+0x340>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d019      	beq.n	80073fa <HAL_GPIO_Init+0x22a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a52      	ldr	r2, [pc, #328]	; (8007514 <HAL_GPIO_Init+0x344>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d013      	beq.n	80073f6 <HAL_GPIO_Init+0x226>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a51      	ldr	r2, [pc, #324]	; (8007518 <HAL_GPIO_Init+0x348>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00d      	beq.n	80073f2 <HAL_GPIO_Init+0x222>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a50      	ldr	r2, [pc, #320]	; (800751c <HAL_GPIO_Init+0x34c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d007      	beq.n	80073ee <HAL_GPIO_Init+0x21e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a4f      	ldr	r2, [pc, #316]	; (8007520 <HAL_GPIO_Init+0x350>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d101      	bne.n	80073ea <HAL_GPIO_Init+0x21a>
 80073e6:	2309      	movs	r3, #9
 80073e8:	e012      	b.n	8007410 <HAL_GPIO_Init+0x240>
 80073ea:	230a      	movs	r3, #10
 80073ec:	e010      	b.n	8007410 <HAL_GPIO_Init+0x240>
 80073ee:	2308      	movs	r3, #8
 80073f0:	e00e      	b.n	8007410 <HAL_GPIO_Init+0x240>
 80073f2:	2307      	movs	r3, #7
 80073f4:	e00c      	b.n	8007410 <HAL_GPIO_Init+0x240>
 80073f6:	2306      	movs	r3, #6
 80073f8:	e00a      	b.n	8007410 <HAL_GPIO_Init+0x240>
 80073fa:	2305      	movs	r3, #5
 80073fc:	e008      	b.n	8007410 <HAL_GPIO_Init+0x240>
 80073fe:	2304      	movs	r3, #4
 8007400:	e006      	b.n	8007410 <HAL_GPIO_Init+0x240>
 8007402:	2303      	movs	r3, #3
 8007404:	e004      	b.n	8007410 <HAL_GPIO_Init+0x240>
 8007406:	2302      	movs	r3, #2
 8007408:	e002      	b.n	8007410 <HAL_GPIO_Init+0x240>
 800740a:	2301      	movs	r3, #1
 800740c:	e000      	b.n	8007410 <HAL_GPIO_Init+0x240>
 800740e:	2300      	movs	r3, #0
 8007410:	69fa      	ldr	r2, [r7, #28]
 8007412:	f002 0203 	and.w	r2, r2, #3
 8007416:	0092      	lsls	r2, r2, #2
 8007418:	4093      	lsls	r3, r2
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	4313      	orrs	r3, r2
 800741e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007420:	4935      	ldr	r1, [pc, #212]	; (80074f8 <HAL_GPIO_Init+0x328>)
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	089b      	lsrs	r3, r3, #2
 8007426:	3302      	adds	r3, #2
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800742e:	4b3d      	ldr	r3, [pc, #244]	; (8007524 <HAL_GPIO_Init+0x354>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	43db      	mvns	r3, r3
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	4013      	ands	r3, r2
 800743c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	4313      	orrs	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007452:	4a34      	ldr	r2, [pc, #208]	; (8007524 <HAL_GPIO_Init+0x354>)
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007458:	4b32      	ldr	r3, [pc, #200]	; (8007524 <HAL_GPIO_Init+0x354>)
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	43db      	mvns	r3, r3
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	4013      	ands	r3, r2
 8007466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	4313      	orrs	r3, r2
 800747a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800747c:	4a29      	ldr	r2, [pc, #164]	; (8007524 <HAL_GPIO_Init+0x354>)
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007482:	4b28      	ldr	r3, [pc, #160]	; (8007524 <HAL_GPIO_Init+0x354>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	43db      	mvns	r3, r3
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	4013      	ands	r3, r2
 8007490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80074a6:	4a1f      	ldr	r2, [pc, #124]	; (8007524 <HAL_GPIO_Init+0x354>)
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074ac:	4b1d      	ldr	r3, [pc, #116]	; (8007524 <HAL_GPIO_Init+0x354>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	43db      	mvns	r3, r3
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	4013      	ands	r3, r2
 80074ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80074c8:	69ba      	ldr	r2, [r7, #24]
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80074d0:	4a14      	ldr	r2, [pc, #80]	; (8007524 <HAL_GPIO_Init+0x354>)
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	3301      	adds	r3, #1
 80074da:	61fb      	str	r3, [r7, #28]
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	2b0f      	cmp	r3, #15
 80074e0:	f67f ae86 	bls.w	80071f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	3724      	adds	r7, #36	; 0x24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40023800 	.word	0x40023800
 80074f8:	40013800 	.word	0x40013800
 80074fc:	40020000 	.word	0x40020000
 8007500:	40020400 	.word	0x40020400
 8007504:	40020800 	.word	0x40020800
 8007508:	40020c00 	.word	0x40020c00
 800750c:	40021000 	.word	0x40021000
 8007510:	40021400 	.word	0x40021400
 8007514:	40021800 	.word	0x40021800
 8007518:	40021c00 	.word	0x40021c00
 800751c:	40022000 	.word	0x40022000
 8007520:	40022400 	.word	0x40022400
 8007524:	40013c00 	.word	0x40013c00

08007528 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691a      	ldr	r2, [r3, #16]
 8007538:	887b      	ldrh	r3, [r7, #2]
 800753a:	4013      	ands	r3, r2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007540:	2301      	movs	r3, #1
 8007542:	73fb      	strb	r3, [r7, #15]
 8007544:	e001      	b.n	800754a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	807b      	strh	r3, [r7, #2]
 8007564:	4613      	mov	r3, r2
 8007566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007568:	787b      	ldrb	r3, [r7, #1]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800756e:	887a      	ldrh	r2, [r7, #2]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007574:	e003      	b.n	800757e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007576:	887b      	ldrh	r3, [r7, #2]
 8007578:	041a      	lsls	r2, r3, #16
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	619a      	str	r2, [r3, #24]
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
	...

0800758c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e07f      	b.n	800769e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d106      	bne.n	80075b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fe fe3e 	bl	8006234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2224      	movs	r2, #36	; 0x24
 80075bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0201 	bic.w	r2, r2, #1
 80075ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d107      	bne.n	8007606 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689a      	ldr	r2, [r3, #8]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007602:	609a      	str	r2, [r3, #8]
 8007604:	e006      	b.n	8007614 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007612:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d104      	bne.n	8007626 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007624:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6859      	ldr	r1, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <HAL_I2C_Init+0x11c>)
 8007632:	430b      	orrs	r3, r1
 8007634:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68da      	ldr	r2, [r3, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007644:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691a      	ldr	r2, [r3, #16]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	69d9      	ldr	r1, [r3, #28]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a1a      	ldr	r2, [r3, #32]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	02008000 	.word	0x02008000

080076ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b20      	cmp	r3, #32
 80076c0:	d138      	bne.n	8007734 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e032      	b.n	8007736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2224      	movs	r2, #36	; 0x24
 80076dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0201 	bic.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6819      	ldr	r1, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2220      	movs	r2, #32
 8007724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	e000      	b.n	8007736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007734:	2302      	movs	r3, #2
  }
}
 8007736:	4618      	mov	r0, r3
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b20      	cmp	r3, #32
 8007756:	d139      	bne.n	80077cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007762:	2302      	movs	r3, #2
 8007764:	e033      	b.n	80077ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2224      	movs	r2, #36	; 0x24
 8007772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0201 	bic.w	r2, r2, #1
 8007784:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007794:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	021b      	lsls	r3, r3, #8
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4313      	orrs	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0201 	orr.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	e000      	b.n	80077ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077cc:	2302      	movs	r3, #2
  }
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
	...

080077dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077e0:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a04      	ldr	r2, [pc, #16]	; (80077f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80077e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ea:	6013      	str	r3, [r2, #0]
}
 80077ec:	bf00      	nop
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	40007000 	.word	0x40007000

080077fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007806:	4b23      	ldr	r3, [pc, #140]	; (8007894 <HAL_PWREx_EnableOverDrive+0x98>)
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	4a22      	ldr	r2, [pc, #136]	; (8007894 <HAL_PWREx_EnableOverDrive+0x98>)
 800780c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007810:	6413      	str	r3, [r2, #64]	; 0x40
 8007812:	4b20      	ldr	r3, [pc, #128]	; (8007894 <HAL_PWREx_EnableOverDrive+0x98>)
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800781e:	4b1e      	ldr	r3, [pc, #120]	; (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a1d      	ldr	r2, [pc, #116]	; (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007828:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800782a:	f7ff fa05 	bl	8006c38 <HAL_GetTick>
 800782e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007830:	e009      	b.n	8007846 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007832:	f7ff fa01 	bl	8006c38 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007840:	d901      	bls.n	8007846 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e022      	b.n	800788c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007846:	4b14      	ldr	r3, [pc, #80]	; (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800784e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007852:	d1ee      	bne.n	8007832 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007854:	4b10      	ldr	r3, [pc, #64]	; (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a0f      	ldr	r2, [pc, #60]	; (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 800785a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800785e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007860:	f7ff f9ea 	bl	8006c38 <HAL_GetTick>
 8007864:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007866:	e009      	b.n	800787c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007868:	f7ff f9e6 	bl	8006c38 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007876:	d901      	bls.n	800787c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e007      	b.n	800788c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800787c:	4b06      	ldr	r3, [pc, #24]	; (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007888:	d1ee      	bne.n	8007868 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	40023800 	.word	0x40023800
 8007898:	40007000 	.word	0x40007000

0800789c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80078a4:	2300      	movs	r3, #0
 80078a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e291      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 8087 	beq.w	80079ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078c0:	4b96      	ldr	r3, [pc, #600]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 030c 	and.w	r3, r3, #12
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d00c      	beq.n	80078e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078cc:	4b93      	ldr	r3, [pc, #588]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f003 030c 	and.w	r3, r3, #12
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d112      	bne.n	80078fe <HAL_RCC_OscConfig+0x62>
 80078d8:	4b90      	ldr	r3, [pc, #576]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078e4:	d10b      	bne.n	80078fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078e6:	4b8d      	ldr	r3, [pc, #564]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d06c      	beq.n	80079cc <HAL_RCC_OscConfig+0x130>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d168      	bne.n	80079cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e26b      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007906:	d106      	bne.n	8007916 <HAL_RCC_OscConfig+0x7a>
 8007908:	4b84      	ldr	r3, [pc, #528]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a83      	ldr	r2, [pc, #524]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 800790e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	e02e      	b.n	8007974 <HAL_RCC_OscConfig+0xd8>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10c      	bne.n	8007938 <HAL_RCC_OscConfig+0x9c>
 800791e:	4b7f      	ldr	r3, [pc, #508]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a7e      	ldr	r2, [pc, #504]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	4b7c      	ldr	r3, [pc, #496]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a7b      	ldr	r2, [pc, #492]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	e01d      	b.n	8007974 <HAL_RCC_OscConfig+0xd8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007940:	d10c      	bne.n	800795c <HAL_RCC_OscConfig+0xc0>
 8007942:	4b76      	ldr	r3, [pc, #472]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a75      	ldr	r2, [pc, #468]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	4b73      	ldr	r3, [pc, #460]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a72      	ldr	r2, [pc, #456]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	e00b      	b.n	8007974 <HAL_RCC_OscConfig+0xd8>
 800795c:	4b6f      	ldr	r3, [pc, #444]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a6e      	ldr	r2, [pc, #440]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	4b6c      	ldr	r3, [pc, #432]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a6b      	ldr	r2, [pc, #428]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 800796e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d013      	beq.n	80079a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800797c:	f7ff f95c 	bl	8006c38 <HAL_GetTick>
 8007980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007982:	e008      	b.n	8007996 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007984:	f7ff f958 	bl	8006c38 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	2b64      	cmp	r3, #100	; 0x64
 8007990:	d901      	bls.n	8007996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e21f      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007996:	4b61      	ldr	r3, [pc, #388]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0f0      	beq.n	8007984 <HAL_RCC_OscConfig+0xe8>
 80079a2:	e014      	b.n	80079ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a4:	f7ff f948 	bl	8006c38 <HAL_GetTick>
 80079a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079ac:	f7ff f944 	bl	8006c38 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b64      	cmp	r3, #100	; 0x64
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e20b      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079be:	4b57      	ldr	r3, [pc, #348]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1f0      	bne.n	80079ac <HAL_RCC_OscConfig+0x110>
 80079ca:	e000      	b.n	80079ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d069      	beq.n	8007aae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80079da:	4b50      	ldr	r3, [pc, #320]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f003 030c 	and.w	r3, r3, #12
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00b      	beq.n	80079fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079e6:	4b4d      	ldr	r3, [pc, #308]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 030c 	and.w	r3, r3, #12
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d11c      	bne.n	8007a2c <HAL_RCC_OscConfig+0x190>
 80079f2:	4b4a      	ldr	r3, [pc, #296]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d116      	bne.n	8007a2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079fe:	4b47      	ldr	r3, [pc, #284]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <HAL_RCC_OscConfig+0x17a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d001      	beq.n	8007a16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e1df      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a16:	4b41      	ldr	r3, [pc, #260]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	493d      	ldr	r1, [pc, #244]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a2a:	e040      	b.n	8007aae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d023      	beq.n	8007a7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a34:	4b39      	ldr	r3, [pc, #228]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a38      	ldr	r2, [pc, #224]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a3a:	f043 0301 	orr.w	r3, r3, #1
 8007a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a40:	f7ff f8fa 	bl	8006c38 <HAL_GetTick>
 8007a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a46:	e008      	b.n	8007a5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a48:	f7ff f8f6 	bl	8006c38 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e1bd      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a5a:	4b30      	ldr	r3, [pc, #192]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0f0      	beq.n	8007a48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a66:	4b2d      	ldr	r3, [pc, #180]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	4929      	ldr	r1, [pc, #164]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	600b      	str	r3, [r1, #0]
 8007a7a:	e018      	b.n	8007aae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a7c:	4b27      	ldr	r3, [pc, #156]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a26      	ldr	r2, [pc, #152]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a82:	f023 0301 	bic.w	r3, r3, #1
 8007a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a88:	f7ff f8d6 	bl	8006c38 <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a90:	f7ff f8d2 	bl	8006c38 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e199      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007aa2:	4b1e      	ldr	r3, [pc, #120]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1f0      	bne.n	8007a90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0308 	and.w	r3, r3, #8
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d038      	beq.n	8007b2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d019      	beq.n	8007af6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ac2:	4b16      	ldr	r3, [pc, #88]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac6:	4a15      	ldr	r2, [pc, #84]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007ac8:	f043 0301 	orr.w	r3, r3, #1
 8007acc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ace:	f7ff f8b3 	bl	8006c38 <HAL_GetTick>
 8007ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ad6:	f7ff f8af 	bl	8006c38 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e176      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ae8:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aec:	f003 0302 	and.w	r3, r3, #2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0f0      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x23a>
 8007af4:	e01a      	b.n	8007b2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007af6:	4b09      	ldr	r3, [pc, #36]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007afa:	4a08      	ldr	r2, [pc, #32]	; (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007afc:	f023 0301 	bic.w	r3, r3, #1
 8007b00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b02:	f7ff f899 	bl	8006c38 <HAL_GetTick>
 8007b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b08:	e00a      	b.n	8007b20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b0a:	f7ff f895 	bl	8006c38 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d903      	bls.n	8007b20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e15c      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
 8007b1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b20:	4b91      	ldr	r3, [pc, #580]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1ee      	bne.n	8007b0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 80a4 	beq.w	8007c82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b3a:	4b8b      	ldr	r3, [pc, #556]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10d      	bne.n	8007b62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b46:	4b88      	ldr	r3, [pc, #544]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	4a87      	ldr	r2, [pc, #540]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b50:	6413      	str	r3, [r2, #64]	; 0x40
 8007b52:	4b85      	ldr	r3, [pc, #532]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b5a:	60bb      	str	r3, [r7, #8]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b62:	4b82      	ldr	r3, [pc, #520]	; (8007d6c <HAL_RCC_OscConfig+0x4d0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d118      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007b6e:	4b7f      	ldr	r3, [pc, #508]	; (8007d6c <HAL_RCC_OscConfig+0x4d0>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a7e      	ldr	r2, [pc, #504]	; (8007d6c <HAL_RCC_OscConfig+0x4d0>)
 8007b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b7a:	f7ff f85d 	bl	8006c38 <HAL_GetTick>
 8007b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b80:	e008      	b.n	8007b94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b82:	f7ff f859 	bl	8006c38 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	2b64      	cmp	r3, #100	; 0x64
 8007b8e:	d901      	bls.n	8007b94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e120      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b94:	4b75      	ldr	r3, [pc, #468]	; (8007d6c <HAL_RCC_OscConfig+0x4d0>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d0f0      	beq.n	8007b82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d106      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x31a>
 8007ba8:	4b6f      	ldr	r3, [pc, #444]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bac:	4a6e      	ldr	r2, [pc, #440]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bae:	f043 0301 	orr.w	r3, r3, #1
 8007bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8007bb4:	e02d      	b.n	8007c12 <HAL_RCC_OscConfig+0x376>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10c      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x33c>
 8007bbe:	4b6a      	ldr	r3, [pc, #424]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc2:	4a69      	ldr	r2, [pc, #420]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bc4:	f023 0301 	bic.w	r3, r3, #1
 8007bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8007bca:	4b67      	ldr	r3, [pc, #412]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bce:	4a66      	ldr	r2, [pc, #408]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bd0:	f023 0304 	bic.w	r3, r3, #4
 8007bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8007bd6:	e01c      	b.n	8007c12 <HAL_RCC_OscConfig+0x376>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	2b05      	cmp	r3, #5
 8007bde:	d10c      	bne.n	8007bfa <HAL_RCC_OscConfig+0x35e>
 8007be0:	4b61      	ldr	r3, [pc, #388]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be4:	4a60      	ldr	r2, [pc, #384]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007be6:	f043 0304 	orr.w	r3, r3, #4
 8007bea:	6713      	str	r3, [r2, #112]	; 0x70
 8007bec:	4b5e      	ldr	r3, [pc, #376]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf0:	4a5d      	ldr	r2, [pc, #372]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bf2:	f043 0301 	orr.w	r3, r3, #1
 8007bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8007bf8:	e00b      	b.n	8007c12 <HAL_RCC_OscConfig+0x376>
 8007bfa:	4b5b      	ldr	r3, [pc, #364]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfe:	4a5a      	ldr	r2, [pc, #360]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c00:	f023 0301 	bic.w	r3, r3, #1
 8007c04:	6713      	str	r3, [r2, #112]	; 0x70
 8007c06:	4b58      	ldr	r3, [pc, #352]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0a:	4a57      	ldr	r2, [pc, #348]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c0c:	f023 0304 	bic.w	r3, r3, #4
 8007c10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d015      	beq.n	8007c46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c1a:	f7ff f80d 	bl	8006c38 <HAL_GetTick>
 8007c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c20:	e00a      	b.n	8007c38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c22:	f7ff f809 	bl	8006c38 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d901      	bls.n	8007c38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e0ce      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c38:	4b4b      	ldr	r3, [pc, #300]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3c:	f003 0302 	and.w	r3, r3, #2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d0ee      	beq.n	8007c22 <HAL_RCC_OscConfig+0x386>
 8007c44:	e014      	b.n	8007c70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c46:	f7fe fff7 	bl	8006c38 <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c4c:	e00a      	b.n	8007c64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c4e:	f7fe fff3 	bl	8006c38 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d901      	bls.n	8007c64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e0b8      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c64:	4b40      	ldr	r3, [pc, #256]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1ee      	bne.n	8007c4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d105      	bne.n	8007c82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c76:	4b3c      	ldr	r3, [pc, #240]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	4a3b      	ldr	r2, [pc, #236]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80a4 	beq.w	8007dd4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c8c:	4b36      	ldr	r3, [pc, #216]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f003 030c 	and.w	r3, r3, #12
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d06b      	beq.n	8007d70 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d149      	bne.n	8007d34 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ca0:	4b31      	ldr	r3, [pc, #196]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a30      	ldr	r2, [pc, #192]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cac:	f7fe ffc4 	bl	8006c38 <HAL_GetTick>
 8007cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cb2:	e008      	b.n	8007cc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cb4:	f7fe ffc0 	bl	8006c38 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e087      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cc6:	4b28      	ldr	r3, [pc, #160]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1f0      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	69da      	ldr	r2, [r3, #28]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	019b      	lsls	r3, r3, #6
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	085b      	lsrs	r3, r3, #1
 8007cea:	3b01      	subs	r3, #1
 8007cec:	041b      	lsls	r3, r3, #16
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	061b      	lsls	r3, r3, #24
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	4a1b      	ldr	r2, [pc, #108]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007cfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cfe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d00:	4b19      	ldr	r3, [pc, #100]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a18      	ldr	r2, [pc, #96]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0c:	f7fe ff94 	bl	8006c38 <HAL_GetTick>
 8007d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d12:	e008      	b.n	8007d26 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d14:	f7fe ff90 	bl	8006c38 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e057      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d26:	4b10      	ldr	r3, [pc, #64]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0f0      	beq.n	8007d14 <HAL_RCC_OscConfig+0x478>
 8007d32:	e04f      	b.n	8007dd4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d34:	4b0c      	ldr	r3, [pc, #48]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a0b      	ldr	r2, [pc, #44]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d40:	f7fe ff7a 	bl	8006c38 <HAL_GetTick>
 8007d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d46:	e008      	b.n	8007d5a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d48:	f7fe ff76 	bl	8006c38 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e03d      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d5a:	4b03      	ldr	r3, [pc, #12]	; (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1f0      	bne.n	8007d48 <HAL_RCC_OscConfig+0x4ac>
 8007d66:	e035      	b.n	8007dd4 <HAL_RCC_OscConfig+0x538>
 8007d68:	40023800 	.word	0x40023800
 8007d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007d70:	4b1b      	ldr	r3, [pc, #108]	; (8007de0 <HAL_RCC_OscConfig+0x544>)
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d028      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d121      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d11a      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007da0:	4013      	ands	r3, r2
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007da6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d111      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	3b01      	subs	r3, #1
 8007dba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d107      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d001      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e000      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	40023800 	.word	0x40023800

08007de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e0d0      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007dfc:	4b6a      	ldr	r3, [pc, #424]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 030f 	and.w	r3, r3, #15
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d910      	bls.n	8007e2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e0a:	4b67      	ldr	r3, [pc, #412]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f023 020f 	bic.w	r2, r3, #15
 8007e12:	4965      	ldr	r1, [pc, #404]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e1a:	4b63      	ldr	r3, [pc, #396]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 030f 	and.w	r3, r3, #15
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d001      	beq.n	8007e2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e0b8      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d020      	beq.n	8007e7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e44:	4b59      	ldr	r3, [pc, #356]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	4a58      	ldr	r2, [pc, #352]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0308 	and.w	r3, r3, #8
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e5c:	4b53      	ldr	r3, [pc, #332]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	4a52      	ldr	r2, [pc, #328]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e68:	4b50      	ldr	r3, [pc, #320]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	494d      	ldr	r1, [pc, #308]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d040      	beq.n	8007f08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d107      	bne.n	8007e9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e8e:	4b47      	ldr	r3, [pc, #284]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d115      	bne.n	8007ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e07f      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d107      	bne.n	8007eb6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ea6:	4b41      	ldr	r3, [pc, #260]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d109      	bne.n	8007ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e073      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eb6:	4b3d      	ldr	r3, [pc, #244]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e06b      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ec6:	4b39      	ldr	r3, [pc, #228]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f023 0203 	bic.w	r2, r3, #3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	4936      	ldr	r1, [pc, #216]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ed8:	f7fe feae 	bl	8006c38 <HAL_GetTick>
 8007edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ede:	e00a      	b.n	8007ef6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ee0:	f7fe feaa 	bl	8006c38 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d901      	bls.n	8007ef6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e053      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ef6:	4b2d      	ldr	r3, [pc, #180]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 020c 	and.w	r2, r3, #12
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d1eb      	bne.n	8007ee0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f08:	4b27      	ldr	r3, [pc, #156]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 030f 	and.w	r3, r3, #15
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d210      	bcs.n	8007f38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f16:	4b24      	ldr	r3, [pc, #144]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f023 020f 	bic.w	r2, r3, #15
 8007f1e:	4922      	ldr	r1, [pc, #136]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f26:	4b20      	ldr	r3, [pc, #128]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d001      	beq.n	8007f38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e032      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d008      	beq.n	8007f56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f44:	4b19      	ldr	r3, [pc, #100]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	4916      	ldr	r1, [pc, #88]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0308 	and.w	r3, r3, #8
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d009      	beq.n	8007f76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	490e      	ldr	r1, [pc, #56]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f76:	f000 f821 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	091b      	lsrs	r3, r3, #4
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	490a      	ldr	r1, [pc, #40]	; (8007fb0 <HAL_RCC_ClockConfig+0x1cc>)
 8007f88:	5ccb      	ldrb	r3, [r1, r3]
 8007f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8e:	4a09      	ldr	r2, [pc, #36]	; (8007fb4 <HAL_RCC_ClockConfig+0x1d0>)
 8007f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <HAL_RCC_ClockConfig+0x1d4>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fe0a 	bl	8006bb0 <HAL_InitTick>

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	40023c00 	.word	0x40023c00
 8007fac:	40023800 	.word	0x40023800
 8007fb0:	0800f1ec 	.word	0x0800f1ec
 8007fb4:	20000014 	.word	0x20000014
 8007fb8:	20000018 	.word	0x20000018

08007fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fc0:	b094      	sub	sp, #80	; 0x50
 8007fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fc8:	2300      	movs	r3, #0
 8007fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fcc:	2300      	movs	r3, #0
 8007fce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fd4:	4b79      	ldr	r3, [pc, #484]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 030c 	and.w	r3, r3, #12
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d00d      	beq.n	8007ffc <HAL_RCC_GetSysClockFreq+0x40>
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	f200 80e1 	bhi.w	80081a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d003      	beq.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007fee:	e0db      	b.n	80081a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ff0:	4b73      	ldr	r3, [pc, #460]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ff2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ff4:	e0db      	b.n	80081ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ff6:	4b73      	ldr	r3, [pc, #460]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007ff8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ffa:	e0d8      	b.n	80081ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ffc:	4b6f      	ldr	r3, [pc, #444]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008004:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008006:	4b6d      	ldr	r3, [pc, #436]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d063      	beq.n	80080da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008012:	4b6a      	ldr	r3, [pc, #424]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	099b      	lsrs	r3, r3, #6
 8008018:	2200      	movs	r2, #0
 800801a:	63bb      	str	r3, [r7, #56]	; 0x38
 800801c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008024:	633b      	str	r3, [r7, #48]	; 0x30
 8008026:	2300      	movs	r3, #0
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
 800802a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	f04f 0000 	mov.w	r0, #0
 8008036:	f04f 0100 	mov.w	r1, #0
 800803a:	0159      	lsls	r1, r3, #5
 800803c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008040:	0150      	lsls	r0, r2, #5
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4621      	mov	r1, r4
 8008048:	1a51      	subs	r1, r2, r1
 800804a:	6139      	str	r1, [r7, #16]
 800804c:	4629      	mov	r1, r5
 800804e:	eb63 0301 	sbc.w	r3, r3, r1
 8008052:	617b      	str	r3, [r7, #20]
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008060:	4659      	mov	r1, fp
 8008062:	018b      	lsls	r3, r1, #6
 8008064:	4651      	mov	r1, sl
 8008066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800806a:	4651      	mov	r1, sl
 800806c:	018a      	lsls	r2, r1, #6
 800806e:	4651      	mov	r1, sl
 8008070:	ebb2 0801 	subs.w	r8, r2, r1
 8008074:	4659      	mov	r1, fp
 8008076:	eb63 0901 	sbc.w	r9, r3, r1
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	f04f 0300 	mov.w	r3, #0
 8008082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800808a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800808e:	4690      	mov	r8, r2
 8008090:	4699      	mov	r9, r3
 8008092:	4623      	mov	r3, r4
 8008094:	eb18 0303 	adds.w	r3, r8, r3
 8008098:	60bb      	str	r3, [r7, #8]
 800809a:	462b      	mov	r3, r5
 800809c:	eb49 0303 	adc.w	r3, r9, r3
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	f04f 0200 	mov.w	r2, #0
 80080a6:	f04f 0300 	mov.w	r3, #0
 80080aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80080ae:	4629      	mov	r1, r5
 80080b0:	024b      	lsls	r3, r1, #9
 80080b2:	4621      	mov	r1, r4
 80080b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80080b8:	4621      	mov	r1, r4
 80080ba:	024a      	lsls	r2, r1, #9
 80080bc:	4610      	mov	r0, r2
 80080be:	4619      	mov	r1, r3
 80080c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080c2:	2200      	movs	r2, #0
 80080c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080cc:	f7f8 fd3c 	bl	8000b48 <__aeabi_uldivmod>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4613      	mov	r3, r2
 80080d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d8:	e058      	b.n	800818c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080da:	4b38      	ldr	r3, [pc, #224]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	099b      	lsrs	r3, r3, #6
 80080e0:	2200      	movs	r2, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	4611      	mov	r1, r2
 80080e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80080ea:	623b      	str	r3, [r7, #32]
 80080ec:	2300      	movs	r3, #0
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
 80080f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80080f4:	4642      	mov	r2, r8
 80080f6:	464b      	mov	r3, r9
 80080f8:	f04f 0000 	mov.w	r0, #0
 80080fc:	f04f 0100 	mov.w	r1, #0
 8008100:	0159      	lsls	r1, r3, #5
 8008102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008106:	0150      	lsls	r0, r2, #5
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4641      	mov	r1, r8
 800810e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008112:	4649      	mov	r1, r9
 8008114:	eb63 0b01 	sbc.w	fp, r3, r1
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	f04f 0300 	mov.w	r3, #0
 8008120:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008124:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008128:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800812c:	ebb2 040a 	subs.w	r4, r2, sl
 8008130:	eb63 050b 	sbc.w	r5, r3, fp
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	f04f 0300 	mov.w	r3, #0
 800813c:	00eb      	lsls	r3, r5, #3
 800813e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008142:	00e2      	lsls	r2, r4, #3
 8008144:	4614      	mov	r4, r2
 8008146:	461d      	mov	r5, r3
 8008148:	4643      	mov	r3, r8
 800814a:	18e3      	adds	r3, r4, r3
 800814c:	603b      	str	r3, [r7, #0]
 800814e:	464b      	mov	r3, r9
 8008150:	eb45 0303 	adc.w	r3, r5, r3
 8008154:	607b      	str	r3, [r7, #4]
 8008156:	f04f 0200 	mov.w	r2, #0
 800815a:	f04f 0300 	mov.w	r3, #0
 800815e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008162:	4629      	mov	r1, r5
 8008164:	028b      	lsls	r3, r1, #10
 8008166:	4621      	mov	r1, r4
 8008168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800816c:	4621      	mov	r1, r4
 800816e:	028a      	lsls	r2, r1, #10
 8008170:	4610      	mov	r0, r2
 8008172:	4619      	mov	r1, r3
 8008174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008176:	2200      	movs	r2, #0
 8008178:	61bb      	str	r3, [r7, #24]
 800817a:	61fa      	str	r2, [r7, #28]
 800817c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008180:	f7f8 fce2 	bl	8000b48 <__aeabi_uldivmod>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4613      	mov	r3, r2
 800818a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800818c:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	0c1b      	lsrs	r3, r3, #16
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	3301      	adds	r3, #1
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800819c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800819e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081a6:	e002      	b.n	80081ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081a8:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80081aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3750      	adds	r7, #80	; 0x50
 80081b4:	46bd      	mov	sp, r7
 80081b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081ba:	bf00      	nop
 80081bc:	40023800 	.word	0x40023800
 80081c0:	00f42400 	.word	0x00f42400
 80081c4:	007a1200 	.word	0x007a1200

080081c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081cc:	4b03      	ldr	r3, [pc, #12]	; (80081dc <HAL_RCC_GetHCLKFreq+0x14>)
 80081ce:	681b      	ldr	r3, [r3, #0]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	20000014 	.word	0x20000014

080081e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80081e4:	f7ff fff0 	bl	80081c8 <HAL_RCC_GetHCLKFreq>
 80081e8:	4602      	mov	r2, r0
 80081ea:	4b05      	ldr	r3, [pc, #20]	; (8008200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	0a9b      	lsrs	r3, r3, #10
 80081f0:	f003 0307 	and.w	r3, r3, #7
 80081f4:	4903      	ldr	r1, [pc, #12]	; (8008204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081f6:	5ccb      	ldrb	r3, [r1, r3]
 80081f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	40023800 	.word	0x40023800
 8008204:	0800f1fc 	.word	0x0800f1fc

08008208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800820c:	f7ff ffdc 	bl	80081c8 <HAL_RCC_GetHCLKFreq>
 8008210:	4602      	mov	r2, r0
 8008212:	4b05      	ldr	r3, [pc, #20]	; (8008228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	0b5b      	lsrs	r3, r3, #13
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	4903      	ldr	r1, [pc, #12]	; (800822c <HAL_RCC_GetPCLK2Freq+0x24>)
 800821e:	5ccb      	ldrb	r3, [r1, r3]
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008224:	4618      	mov	r0, r3
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40023800 	.word	0x40023800
 800822c:	0800f1fc 	.word	0x0800f1fc

08008230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008248:	2300      	movs	r3, #0
 800824a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d012      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008258:	4b69      	ldr	r3, [pc, #420]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	4a68      	ldr	r2, [pc, #416]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800825e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008262:	6093      	str	r3, [r2, #8]
 8008264:	4b66      	ldr	r3, [pc, #408]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008266:	689a      	ldr	r2, [r3, #8]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826c:	4964      	ldr	r1, [pc, #400]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800826e:	4313      	orrs	r3, r2
 8008270:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800827a:	2301      	movs	r3, #1
 800827c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d017      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800828a:	4b5d      	ldr	r3, [pc, #372]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800828c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008298:	4959      	ldr	r1, [pc, #356]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800829a:	4313      	orrs	r3, r2
 800829c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082a8:	d101      	bne.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80082aa:	2301      	movs	r3, #1
 80082ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80082b6:	2301      	movs	r3, #1
 80082b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d017      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80082c6:	4b4e      	ldr	r3, [pc, #312]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	494a      	ldr	r1, [pc, #296]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082e4:	d101      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80082e6:	2301      	movs	r3, #1
 80082e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80082f2:	2301      	movs	r3, #1
 80082f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008302:	2301      	movs	r3, #1
 8008304:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0320 	and.w	r3, r3, #32
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 808b 	beq.w	800842a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008314:	4b3a      	ldr	r3, [pc, #232]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008318:	4a39      	ldr	r2, [pc, #228]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800831a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800831e:	6413      	str	r3, [r2, #64]	; 0x40
 8008320:	4b37      	ldr	r3, [pc, #220]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008328:	60bb      	str	r3, [r7, #8]
 800832a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800832c:	4b35      	ldr	r3, [pc, #212]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a34      	ldr	r2, [pc, #208]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008338:	f7fe fc7e 	bl	8006c38 <HAL_GetTick>
 800833c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800833e:	e008      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008340:	f7fe fc7a 	bl	8006c38 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b64      	cmp	r3, #100	; 0x64
 800834c:	d901      	bls.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e357      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008352:	4b2c      	ldr	r3, [pc, #176]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0f0      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800835e:	4b28      	ldr	r3, [pc, #160]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008366:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d035      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	429a      	cmp	r2, r3
 800837a:	d02e      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800837c:	4b20      	ldr	r3, [pc, #128]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800837e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008384:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008386:	4b1e      	ldr	r3, [pc, #120]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838a:	4a1d      	ldr	r2, [pc, #116]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008390:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008392:	4b1b      	ldr	r3, [pc, #108]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008396:	4a1a      	ldr	r2, [pc, #104]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800839c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800839e:	4a18      	ldr	r2, [pc, #96]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083a4:	4b16      	ldr	r3, [pc, #88]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d114      	bne.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b0:	f7fe fc42 	bl	8006c38 <HAL_GetTick>
 80083b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083b6:	e00a      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083b8:	f7fe fc3e 	bl	8006c38 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d901      	bls.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e319      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ce:	4b0c      	ldr	r3, [pc, #48]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d0ee      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083e6:	d111      	bne.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80083e8:	4b05      	ldr	r3, [pc, #20]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80083f4:	4b04      	ldr	r3, [pc, #16]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80083f6:	400b      	ands	r3, r1
 80083f8:	4901      	ldr	r1, [pc, #4]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	608b      	str	r3, [r1, #8]
 80083fe:	e00b      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008400:	40023800 	.word	0x40023800
 8008404:	40007000 	.word	0x40007000
 8008408:	0ffffcff 	.word	0x0ffffcff
 800840c:	4baa      	ldr	r3, [pc, #680]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	4aa9      	ldr	r2, [pc, #676]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008412:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008416:	6093      	str	r3, [r2, #8]
 8008418:	4ba7      	ldr	r3, [pc, #668]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800841a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008424:	49a4      	ldr	r1, [pc, #656]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008426:	4313      	orrs	r3, r2
 8008428:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0310 	and.w	r3, r3, #16
 8008432:	2b00      	cmp	r3, #0
 8008434:	d010      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008436:	4ba0      	ldr	r3, [pc, #640]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800843c:	4a9e      	ldr	r2, [pc, #632]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800843e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008442:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008446:	4b9c      	ldr	r3, [pc, #624]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008448:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	4999      	ldr	r1, [pc, #612]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008452:	4313      	orrs	r3, r2
 8008454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008464:	4b94      	ldr	r3, [pc, #592]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800846a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008472:	4991      	ldr	r1, [pc, #580]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008474:	4313      	orrs	r3, r2
 8008476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008486:	4b8c      	ldr	r3, [pc, #560]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800848c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008494:	4988      	ldr	r1, [pc, #544]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008496:	4313      	orrs	r3, r2
 8008498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084a8:	4b83      	ldr	r3, [pc, #524]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b6:	4980      	ldr	r1, [pc, #512]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084ca:	4b7b      	ldr	r3, [pc, #492]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d8:	4977      	ldr	r1, [pc, #476]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084ec:	4b72      	ldr	r3, [pc, #456]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084f2:	f023 0203 	bic.w	r2, r3, #3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fa:	496f      	ldr	r1, [pc, #444]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800850e:	4b6a      	ldr	r3, [pc, #424]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008514:	f023 020c 	bic.w	r2, r3, #12
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800851c:	4966      	ldr	r1, [pc, #408]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800851e:	4313      	orrs	r3, r2
 8008520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00a      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008530:	4b61      	ldr	r3, [pc, #388]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008536:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800853e:	495e      	ldr	r1, [pc, #376]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008540:	4313      	orrs	r3, r2
 8008542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00a      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008552:	4b59      	ldr	r3, [pc, #356]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008558:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008560:	4955      	ldr	r1, [pc, #340]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008562:	4313      	orrs	r3, r2
 8008564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00a      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008574:	4b50      	ldr	r3, [pc, #320]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800857a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008582:	494d      	ldr	r1, [pc, #308]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008584:	4313      	orrs	r3, r2
 8008586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008596:	4b48      	ldr	r3, [pc, #288]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a4:	4944      	ldr	r1, [pc, #272]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00a      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80085b8:	4b3f      	ldr	r3, [pc, #252]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085c6:	493c      	ldr	r1, [pc, #240]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00a      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80085da:	4b37      	ldr	r3, [pc, #220]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e8:	4933      	ldr	r1, [pc, #204]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00a      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80085fc:	4b2e      	ldr	r3, [pc, #184]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008602:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800860a:	492b      	ldr	r1, [pc, #172]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800860c:	4313      	orrs	r3, r2
 800860e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d011      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800861e:	4b26      	ldr	r3, [pc, #152]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008624:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800862c:	4922      	ldr	r1, [pc, #136]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800862e:	4313      	orrs	r3, r2
 8008630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800863c:	d101      	bne.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800863e:	2301      	movs	r3, #1
 8008640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0308 	and.w	r3, r3, #8
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800864e:	2301      	movs	r3, #1
 8008650:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800865e:	4b16      	ldr	r3, [pc, #88]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008664:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800866c:	4912      	ldr	r1, [pc, #72]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800866e:	4313      	orrs	r3, r2
 8008670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008680:	4b0d      	ldr	r3, [pc, #52]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008686:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008690:	4909      	ldr	r1, [pc, #36]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008692:	4313      	orrs	r3, r2
 8008694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d006      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 80d9 	beq.w	800885e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80086ac:	4b02      	ldr	r3, [pc, #8]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a01      	ldr	r2, [pc, #4]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086b6:	e001      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80086b8:	40023800 	.word	0x40023800
 80086bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086be:	f7fe fabb 	bl	8006c38 <HAL_GetTick>
 80086c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086c4:	e008      	b.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80086c6:	f7fe fab7 	bl	8006c38 <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	2b64      	cmp	r3, #100	; 0x64
 80086d2:	d901      	bls.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e194      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086d8:	4b6c      	ldr	r3, [pc, #432]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1f0      	bne.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d021      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d11d      	bne.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80086f8:	4b64      	ldr	r3, [pc, #400]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086fe:	0c1b      	lsrs	r3, r3, #16
 8008700:	f003 0303 	and.w	r3, r3, #3
 8008704:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008706:	4b61      	ldr	r3, [pc, #388]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800870c:	0e1b      	lsrs	r3, r3, #24
 800870e:	f003 030f 	and.w	r3, r3, #15
 8008712:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	019a      	lsls	r2, r3, #6
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	041b      	lsls	r3, r3, #16
 800871e:	431a      	orrs	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	061b      	lsls	r3, r3, #24
 8008724:	431a      	orrs	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	071b      	lsls	r3, r3, #28
 800872c:	4957      	ldr	r1, [pc, #348]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d004      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008748:	d00a      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008752:	2b00      	cmp	r3, #0
 8008754:	d02e      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800875e:	d129      	bne.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008760:	4b4a      	ldr	r3, [pc, #296]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008766:	0c1b      	lsrs	r3, r3, #16
 8008768:	f003 0303 	and.w	r3, r3, #3
 800876c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800876e:	4b47      	ldr	r3, [pc, #284]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008774:	0f1b      	lsrs	r3, r3, #28
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	019a      	lsls	r2, r3, #6
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	041b      	lsls	r3, r3, #16
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	061b      	lsls	r3, r3, #24
 800878e:	431a      	orrs	r2, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	071b      	lsls	r3, r3, #28
 8008794:	493d      	ldr	r1, [pc, #244]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008796:	4313      	orrs	r3, r2
 8008798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800879c:	4b3b      	ldr	r3, [pc, #236]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800879e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087a2:	f023 021f 	bic.w	r2, r3, #31
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087aa:	3b01      	subs	r3, #1
 80087ac:	4937      	ldr	r1, [pc, #220]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d01d      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80087c0:	4b32      	ldr	r3, [pc, #200]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087c6:	0e1b      	lsrs	r3, r3, #24
 80087c8:	f003 030f 	and.w	r3, r3, #15
 80087cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087ce:	4b2f      	ldr	r3, [pc, #188]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087d4:	0f1b      	lsrs	r3, r3, #28
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	019a      	lsls	r2, r3, #6
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	041b      	lsls	r3, r3, #16
 80087e8:	431a      	orrs	r2, r3
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	061b      	lsls	r3, r3, #24
 80087ee:	431a      	orrs	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	071b      	lsls	r3, r3, #28
 80087f4:	4925      	ldr	r1, [pc, #148]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d011      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	019a      	lsls	r2, r3, #6
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	041b      	lsls	r3, r3, #16
 8008814:	431a      	orrs	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	061b      	lsls	r3, r3, #24
 800881c:	431a      	orrs	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	071b      	lsls	r3, r3, #28
 8008824:	4919      	ldr	r1, [pc, #100]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008826:	4313      	orrs	r3, r2
 8008828:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800882c:	4b17      	ldr	r3, [pc, #92]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a16      	ldr	r2, [pc, #88]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008832:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008838:	f7fe f9fe 	bl	8006c38 <HAL_GetTick>
 800883c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800883e:	e008      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008840:	f7fe f9fa 	bl	8006c38 <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	2b64      	cmp	r3, #100	; 0x64
 800884c:	d901      	bls.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e0d7      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008852:	4b0e      	ldr	r3, [pc, #56]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0f0      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	2b01      	cmp	r3, #1
 8008862:	f040 80cd 	bne.w	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a08      	ldr	r2, [pc, #32]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800886c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008872:	f7fe f9e1 	bl	8006c38 <HAL_GetTick>
 8008876:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008878:	e00a      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800887a:	f7fe f9dd 	bl	8006c38 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	2b64      	cmp	r3, #100	; 0x64
 8008886:	d903      	bls.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e0ba      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800888c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008890:	4b5e      	ldr	r3, [pc, #376]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800889c:	d0ed      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d003      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d009      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d02e      	beq.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d12a      	bne.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80088c6:	4b51      	ldr	r3, [pc, #324]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088cc:	0c1b      	lsrs	r3, r3, #16
 80088ce:	f003 0303 	and.w	r3, r3, #3
 80088d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80088d4:	4b4d      	ldr	r3, [pc, #308]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088da:	0f1b      	lsrs	r3, r3, #28
 80088dc:	f003 0307 	and.w	r3, r3, #7
 80088e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	019a      	lsls	r2, r3, #6
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	041b      	lsls	r3, r3, #16
 80088ec:	431a      	orrs	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	061b      	lsls	r3, r3, #24
 80088f4:	431a      	orrs	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	071b      	lsls	r3, r3, #28
 80088fa:	4944      	ldr	r1, [pc, #272]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008902:	4b42      	ldr	r3, [pc, #264]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008908:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008910:	3b01      	subs	r3, #1
 8008912:	021b      	lsls	r3, r3, #8
 8008914:	493d      	ldr	r1, [pc, #244]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008916:	4313      	orrs	r3, r2
 8008918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d022      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800892c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008930:	d11d      	bne.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008932:	4b36      	ldr	r3, [pc, #216]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008938:	0e1b      	lsrs	r3, r3, #24
 800893a:	f003 030f 	and.w	r3, r3, #15
 800893e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008940:	4b32      	ldr	r3, [pc, #200]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008946:	0f1b      	lsrs	r3, r3, #28
 8008948:	f003 0307 	and.w	r3, r3, #7
 800894c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	019a      	lsls	r2, r3, #6
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	041b      	lsls	r3, r3, #16
 800895a:	431a      	orrs	r2, r3
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	061b      	lsls	r3, r3, #24
 8008960:	431a      	orrs	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	071b      	lsls	r3, r3, #28
 8008966:	4929      	ldr	r1, [pc, #164]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008968:	4313      	orrs	r3, r2
 800896a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d028      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800897a:	4b24      	ldr	r3, [pc, #144]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800897c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008980:	0e1b      	lsrs	r3, r3, #24
 8008982:	f003 030f 	and.w	r3, r3, #15
 8008986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008988:	4b20      	ldr	r3, [pc, #128]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800898a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800898e:	0c1b      	lsrs	r3, r3, #16
 8008990:	f003 0303 	and.w	r3, r3, #3
 8008994:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	019a      	lsls	r2, r3, #6
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	041b      	lsls	r3, r3, #16
 80089a0:	431a      	orrs	r2, r3
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	061b      	lsls	r3, r3, #24
 80089a6:	431a      	orrs	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	071b      	lsls	r3, r3, #28
 80089ae:	4917      	ldr	r1, [pc, #92]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80089b6:	4b15      	ldr	r3, [pc, #84]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	4911      	ldr	r1, [pc, #68]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80089cc:	4b0f      	ldr	r3, [pc, #60]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a0e      	ldr	r2, [pc, #56]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089d8:	f7fe f92e 	bl	8006c38 <HAL_GetTick>
 80089dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80089de:	e008      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80089e0:	f7fe f92a 	bl	8006c38 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b64      	cmp	r3, #100	; 0x64
 80089ec:	d901      	bls.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e007      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80089f2:	4b06      	ldr	r3, [pc, #24]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089fe:	d1ef      	bne.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3720      	adds	r7, #32
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	40023800 	.word	0x40023800

08008a10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e09d      	b.n	8008b5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d108      	bne.n	8008a3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a32:	d009      	beq.n	8008a48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	61da      	str	r2, [r3, #28]
 8008a3a:	e005      	b.n	8008a48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d106      	bne.n	8008a68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7fd fc8c 	bl	8006380 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a88:	d902      	bls.n	8008a90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	e002      	b.n	8008a96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008a9e:	d007      	beq.n	8008ab0 <HAL_SPI_Init+0xa0>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008aa8:	d002      	beq.n	8008ab0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	431a      	orrs	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a1b      	ldr	r3, [r3, #32]
 8008aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af2:	ea42 0103 	orr.w	r1, r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	0c1b      	lsrs	r3, r3, #16
 8008b0c:	f003 0204 	and.w	r2, r3, #4
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	f003 0310 	and.w	r3, r3, #16
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b1e:	f003 0308 	and.w	r3, r3, #8
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008b2c:	ea42 0103 	orr.w	r1, r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	430a      	orrs	r2, r1
 8008b3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69da      	ldr	r2, [r3, #28]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b08a      	sub	sp, #40	; 0x28
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	60b9      	str	r1, [r7, #8]
 8008b70:	607a      	str	r2, [r7, #4]
 8008b72:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b74:	2301      	movs	r3, #1
 8008b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d101      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x26>
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e1fb      	b.n	8008f84 <HAL_SPI_TransmitReceive+0x41e>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b94:	f7fe f850 	bl	8006c38 <HAL_GetTick>
 8008b98:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ba0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008ba8:	887b      	ldrh	r3, [r7, #2]
 8008baa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008bac:	887b      	ldrh	r3, [r7, #2]
 8008bae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008bb0:	7efb      	ldrb	r3, [r7, #27]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d00e      	beq.n	8008bd4 <HAL_SPI_TransmitReceive+0x6e>
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bbc:	d106      	bne.n	8008bcc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d102      	bne.n	8008bcc <HAL_SPI_TransmitReceive+0x66>
 8008bc6:	7efb      	ldrb	r3, [r7, #27]
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	d003      	beq.n	8008bd4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008bcc:	2302      	movs	r3, #2
 8008bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008bd2:	e1cd      	b.n	8008f70 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d005      	beq.n	8008be6 <HAL_SPI_TransmitReceive+0x80>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <HAL_SPI_TransmitReceive+0x80>
 8008be0:	887b      	ldrh	r3, [r7, #2]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d103      	bne.n	8008bee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008bec:	e1c0      	b.n	8008f70 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b04      	cmp	r3, #4
 8008bf8:	d003      	beq.n	8008c02 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2205      	movs	r2, #5
 8008bfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	887a      	ldrh	r2, [r7, #2]
 8008c12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	887a      	ldrh	r2, [r7, #2]
 8008c1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	887a      	ldrh	r2, [r7, #2]
 8008c28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	887a      	ldrh	r2, [r7, #2]
 8008c2e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c44:	d802      	bhi.n	8008c4c <HAL_SPI_TransmitReceive+0xe6>
 8008c46:	8a3b      	ldrh	r3, [r7, #16]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d908      	bls.n	8008c5e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c5a:	605a      	str	r2, [r3, #4]
 8008c5c:	e007      	b.n	8008c6e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c6c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c78:	2b40      	cmp	r3, #64	; 0x40
 8008c7a:	d007      	beq.n	8008c8c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c94:	d97c      	bls.n	8008d90 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_SPI_TransmitReceive+0x13e>
 8008c9e:	8a7b      	ldrh	r3, [r7, #18]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d169      	bne.n	8008d78 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca8:	881a      	ldrh	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb4:	1c9a      	adds	r2, r3, #2
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cc8:	e056      	b.n	8008d78 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d11b      	bne.n	8008d10 <HAL_SPI_TransmitReceive+0x1aa>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d016      	beq.n	8008d10 <HAL_SPI_TransmitReceive+0x1aa>
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d113      	bne.n	8008d10 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cec:	881a      	ldrh	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf8:	1c9a      	adds	r2, r3, #2
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	3b01      	subs	r3, #1
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d11c      	bne.n	8008d58 <HAL_SPI_TransmitReceive+0x1f2>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d016      	beq.n	8008d58 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68da      	ldr	r2, [r3, #12]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d34:	b292      	uxth	r2, r2
 8008d36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3c:	1c9a      	adds	r2, r3, #2
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d54:	2301      	movs	r3, #1
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d58:	f7fd ff6e 	bl	8006c38 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d807      	bhi.n	8008d78 <HAL_SPI_TransmitReceive+0x212>
 8008d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6e:	d003      	beq.n	8008d78 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008d76:	e0fb      	b.n	8008f70 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1a3      	bne.n	8008cca <HAL_SPI_TransmitReceive+0x164>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d19d      	bne.n	8008cca <HAL_SPI_TransmitReceive+0x164>
 8008d8e:	e0df      	b.n	8008f50 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <HAL_SPI_TransmitReceive+0x23a>
 8008d98:	8a7b      	ldrh	r3, [r7, #18]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	f040 80cb 	bne.w	8008f36 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d912      	bls.n	8008dd0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dae:	881a      	ldrh	r2, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	1c9a      	adds	r2, r3, #2
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b02      	subs	r3, #2
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008dce:	e0b2      	b.n	8008f36 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	330c      	adds	r3, #12
 8008dda:	7812      	ldrb	r2, [r2, #0]
 8008ddc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	3b01      	subs	r3, #1
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008df6:	e09e      	b.n	8008f36 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d134      	bne.n	8008e70 <HAL_SPI_TransmitReceive+0x30a>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d02f      	beq.n	8008e70 <HAL_SPI_TransmitReceive+0x30a>
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d12c      	bne.n	8008e70 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d912      	bls.n	8008e46 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	881a      	ldrh	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e30:	1c9a      	adds	r2, r3, #2
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	3b02      	subs	r3, #2
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e44:	e012      	b.n	8008e6c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	330c      	adds	r3, #12
 8008e50:	7812      	ldrb	r2, [r2, #0]
 8008e52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e58:	1c5a      	adds	r2, r3, #1
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	3b01      	subs	r3, #1
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d148      	bne.n	8008f10 <HAL_SPI_TransmitReceive+0x3aa>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d042      	beq.n	8008f10 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d923      	bls.n	8008ede <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68da      	ldr	r2, [r3, #12]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea0:	b292      	uxth	r2, r2
 8008ea2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea8:	1c9a      	adds	r2, r3, #2
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	3b02      	subs	r3, #2
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d81f      	bhi.n	8008f0c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008eda:	605a      	str	r2, [r3, #4]
 8008edc:	e016      	b.n	8008f0c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f103 020c 	add.w	r2, r3, #12
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	7812      	ldrb	r2, [r2, #0]
 8008eec:	b2d2      	uxtb	r2, r2
 8008eee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	3b01      	subs	r3, #1
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008f10:	f7fd fe92 	bl	8006c38 <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d803      	bhi.n	8008f28 <HAL_SPI_TransmitReceive+0x3c2>
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f26:	d102      	bne.n	8008f2e <HAL_SPI_TransmitReceive+0x3c8>
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d103      	bne.n	8008f36 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008f34:	e01c      	b.n	8008f70 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f47f af5b 	bne.w	8008df8 <HAL_SPI_TransmitReceive+0x292>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f47f af54 	bne.w	8008df8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f50:	69fa      	ldr	r2, [r7, #28]
 8008f52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f000 f937 	bl	80091c8 <SPI_EndRxTxTransaction>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d006      	beq.n	8008f6e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	661a      	str	r2, [r3, #96]	; 0x60
 8008f6c:	e000      	b.n	8008f70 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008f6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3728      	adds	r7, #40	; 0x28
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	603b      	str	r3, [r7, #0]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f9c:	f7fd fe4c 	bl	8006c38 <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	1a9b      	subs	r3, r3, r2
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	4413      	add	r3, r2
 8008faa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008fac:	f7fd fe44 	bl	8006c38 <HAL_GetTick>
 8008fb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008fb2:	4b39      	ldr	r3, [pc, #228]	; (8009098 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	015b      	lsls	r3, r3, #5
 8008fb8:	0d1b      	lsrs	r3, r3, #20
 8008fba:	69fa      	ldr	r2, [r7, #28]
 8008fbc:	fb02 f303 	mul.w	r3, r2, r3
 8008fc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fc2:	e054      	b.n	800906e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fca:	d050      	beq.n	800906e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008fcc:	f7fd fe34 	bl	8006c38 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	69fa      	ldr	r2, [r7, #28]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d902      	bls.n	8008fe2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d13d      	bne.n	800905e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685a      	ldr	r2, [r3, #4]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ffa:	d111      	bne.n	8009020 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009004:	d004      	beq.n	8009010 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800900e:	d107      	bne.n	8009020 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800901e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009028:	d10f      	bne.n	800904a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009048:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e017      	b.n	800908e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009064:	2300      	movs	r3, #0
 8009066:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	3b01      	subs	r3, #1
 800906c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	4013      	ands	r3, r2
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	429a      	cmp	r2, r3
 800907c:	bf0c      	ite	eq
 800907e:	2301      	moveq	r3, #1
 8009080:	2300      	movne	r3, #0
 8009082:	b2db      	uxtb	r3, r3
 8009084:	461a      	mov	r2, r3
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	429a      	cmp	r2, r3
 800908a:	d19b      	bne.n	8008fc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3720      	adds	r7, #32
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20000014 	.word	0x20000014

0800909c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b08a      	sub	sp, #40	; 0x28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80090ae:	f7fd fdc3 	bl	8006c38 <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	1a9b      	subs	r3, r3, r2
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	4413      	add	r3, r2
 80090bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80090be:	f7fd fdbb 	bl	8006c38 <HAL_GetTick>
 80090c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	330c      	adds	r3, #12
 80090ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80090cc:	4b3d      	ldr	r3, [pc, #244]	; (80091c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	4613      	mov	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	00da      	lsls	r2, r3, #3
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	0d1b      	lsrs	r3, r3, #20
 80090dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090de:	fb02 f303 	mul.w	r3, r2, r3
 80090e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80090e4:	e060      	b.n	80091a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80090ec:	d107      	bne.n	80090fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d104      	bne.n	80090fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009104:	d050      	beq.n	80091a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009106:	f7fd fd97 	bl	8006c38 <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009112:	429a      	cmp	r2, r3
 8009114:	d902      	bls.n	800911c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	2b00      	cmp	r3, #0
 800911a:	d13d      	bne.n	8009198 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800912a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009134:	d111      	bne.n	800915a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800913e:	d004      	beq.n	800914a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009148:	d107      	bne.n	800915a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009158:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009162:	d10f      	bne.n	8009184 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009172:	601a      	str	r2, [r3, #0]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009182:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e010      	b.n	80091ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689a      	ldr	r2, [r3, #8]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	4013      	ands	r3, r2
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d196      	bne.n	80090e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3728      	adds	r7, #40	; 0x28
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20000014 	.word	0x20000014

080091c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af02      	add	r7, sp, #8
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2200      	movs	r2, #0
 80091dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f7ff ff5b 	bl	800909c <SPI_WaitFifoStateUntilTimeout>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d007      	beq.n	80091fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091f0:	f043 0220 	orr.w	r2, r3, #32
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e046      	b.n	800928a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80091fc:	4b25      	ldr	r3, [pc, #148]	; (8009294 <SPI_EndRxTxTransaction+0xcc>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a25      	ldr	r2, [pc, #148]	; (8009298 <SPI_EndRxTxTransaction+0xd0>)
 8009202:	fba2 2303 	umull	r2, r3, r2, r3
 8009206:	0d5b      	lsrs	r3, r3, #21
 8009208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800920c:	fb02 f303 	mul.w	r3, r2, r3
 8009210:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800921a:	d112      	bne.n	8009242 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2200      	movs	r2, #0
 8009224:	2180      	movs	r1, #128	; 0x80
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f7ff feb0 	bl	8008f8c <SPI_WaitFlagStateUntilTimeout>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d016      	beq.n	8009260 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009236:	f043 0220 	orr.w	r2, r3, #32
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e023      	b.n	800928a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00a      	beq.n	800925e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	3b01      	subs	r3, #1
 800924c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009258:	2b80      	cmp	r3, #128	; 0x80
 800925a:	d0f2      	beq.n	8009242 <SPI_EndRxTxTransaction+0x7a>
 800925c:	e000      	b.n	8009260 <SPI_EndRxTxTransaction+0x98>
        break;
 800925e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2200      	movs	r2, #0
 8009268:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f7ff ff15 	bl	800909c <SPI_WaitFifoStateUntilTimeout>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d007      	beq.n	8009288 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800927c:	f043 0220 	orr.w	r2, r3, #32
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e000      	b.n	800928a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	20000014 	.word	0x20000014
 8009298:	165e9f81 	.word	0x165e9f81

0800929c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e049      	b.n	8009342 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d106      	bne.n	80092c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7fd f9fe 	bl	80066c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2202      	movs	r2, #2
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4619      	mov	r1, r3
 80092da:	4610      	mov	r0, r2
 80092dc:	f001 f866 	bl	800a3ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b082      	sub	sp, #8
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d101      	bne.n	800935c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e049      	b.n	80093f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b00      	cmp	r3, #0
 8009366:	d106      	bne.n	8009376 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7fd f95f 	bl	8006634 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2202      	movs	r2, #2
 800937a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	3304      	adds	r3, #4
 8009386:	4619      	mov	r1, r3
 8009388:	4610      	mov	r0, r2
 800938a:	f001 f80f 	bl	800a3ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d109      	bne.n	800941c <HAL_TIM_PWM_Start+0x24>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b01      	cmp	r3, #1
 8009412:	bf14      	ite	ne
 8009414:	2301      	movne	r3, #1
 8009416:	2300      	moveq	r3, #0
 8009418:	b2db      	uxtb	r3, r3
 800941a:	e03c      	b.n	8009496 <HAL_TIM_PWM_Start+0x9e>
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	2b04      	cmp	r3, #4
 8009420:	d109      	bne.n	8009436 <HAL_TIM_PWM_Start+0x3e>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b01      	cmp	r3, #1
 800942c:	bf14      	ite	ne
 800942e:	2301      	movne	r3, #1
 8009430:	2300      	moveq	r3, #0
 8009432:	b2db      	uxtb	r3, r3
 8009434:	e02f      	b.n	8009496 <HAL_TIM_PWM_Start+0x9e>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b08      	cmp	r3, #8
 800943a:	d109      	bne.n	8009450 <HAL_TIM_PWM_Start+0x58>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b01      	cmp	r3, #1
 8009446:	bf14      	ite	ne
 8009448:	2301      	movne	r3, #1
 800944a:	2300      	moveq	r3, #0
 800944c:	b2db      	uxtb	r3, r3
 800944e:	e022      	b.n	8009496 <HAL_TIM_PWM_Start+0x9e>
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2b0c      	cmp	r3, #12
 8009454:	d109      	bne.n	800946a <HAL_TIM_PWM_Start+0x72>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b01      	cmp	r3, #1
 8009460:	bf14      	ite	ne
 8009462:	2301      	movne	r3, #1
 8009464:	2300      	moveq	r3, #0
 8009466:	b2db      	uxtb	r3, r3
 8009468:	e015      	b.n	8009496 <HAL_TIM_PWM_Start+0x9e>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b10      	cmp	r3, #16
 800946e:	d109      	bne.n	8009484 <HAL_TIM_PWM_Start+0x8c>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b01      	cmp	r3, #1
 800947a:	bf14      	ite	ne
 800947c:	2301      	movne	r3, #1
 800947e:	2300      	moveq	r3, #0
 8009480:	b2db      	uxtb	r3, r3
 8009482:	e008      	b.n	8009496 <HAL_TIM_PWM_Start+0x9e>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b01      	cmp	r3, #1
 800948e:	bf14      	ite	ne
 8009490:	2301      	movne	r3, #1
 8009492:	2300      	moveq	r3, #0
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	d001      	beq.n	800949e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e092      	b.n	80095c4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d104      	bne.n	80094ae <HAL_TIM_PWM_Start+0xb6>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2202      	movs	r2, #2
 80094a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094ac:	e023      	b.n	80094f6 <HAL_TIM_PWM_Start+0xfe>
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	d104      	bne.n	80094be <HAL_TIM_PWM_Start+0xc6>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2202      	movs	r2, #2
 80094b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094bc:	e01b      	b.n	80094f6 <HAL_TIM_PWM_Start+0xfe>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b08      	cmp	r3, #8
 80094c2:	d104      	bne.n	80094ce <HAL_TIM_PWM_Start+0xd6>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2202      	movs	r2, #2
 80094c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094cc:	e013      	b.n	80094f6 <HAL_TIM_PWM_Start+0xfe>
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2b0c      	cmp	r3, #12
 80094d2:	d104      	bne.n	80094de <HAL_TIM_PWM_Start+0xe6>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2202      	movs	r2, #2
 80094d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094dc:	e00b      	b.n	80094f6 <HAL_TIM_PWM_Start+0xfe>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b10      	cmp	r3, #16
 80094e2:	d104      	bne.n	80094ee <HAL_TIM_PWM_Start+0xf6>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2202      	movs	r2, #2
 80094e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094ec:	e003      	b.n	80094f6 <HAL_TIM_PWM_Start+0xfe>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2202      	movs	r2, #2
 80094f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2201      	movs	r2, #1
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	4618      	mov	r0, r3
 8009500:	f001 fb7c 	bl	800abfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a30      	ldr	r2, [pc, #192]	; (80095cc <HAL_TIM_PWM_Start+0x1d4>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d004      	beq.n	8009518 <HAL_TIM_PWM_Start+0x120>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a2f      	ldr	r2, [pc, #188]	; (80095d0 <HAL_TIM_PWM_Start+0x1d8>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d101      	bne.n	800951c <HAL_TIM_PWM_Start+0x124>
 8009518:	2301      	movs	r3, #1
 800951a:	e000      	b.n	800951e <HAL_TIM_PWM_Start+0x126>
 800951c:	2300      	movs	r3, #0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d007      	beq.n	8009532 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009530:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a25      	ldr	r2, [pc, #148]	; (80095cc <HAL_TIM_PWM_Start+0x1d4>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d022      	beq.n	8009582 <HAL_TIM_PWM_Start+0x18a>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009544:	d01d      	beq.n	8009582 <HAL_TIM_PWM_Start+0x18a>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a22      	ldr	r2, [pc, #136]	; (80095d4 <HAL_TIM_PWM_Start+0x1dc>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d018      	beq.n	8009582 <HAL_TIM_PWM_Start+0x18a>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a20      	ldr	r2, [pc, #128]	; (80095d8 <HAL_TIM_PWM_Start+0x1e0>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d013      	beq.n	8009582 <HAL_TIM_PWM_Start+0x18a>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a1f      	ldr	r2, [pc, #124]	; (80095dc <HAL_TIM_PWM_Start+0x1e4>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d00e      	beq.n	8009582 <HAL_TIM_PWM_Start+0x18a>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a19      	ldr	r2, [pc, #100]	; (80095d0 <HAL_TIM_PWM_Start+0x1d8>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d009      	beq.n	8009582 <HAL_TIM_PWM_Start+0x18a>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a1b      	ldr	r2, [pc, #108]	; (80095e0 <HAL_TIM_PWM_Start+0x1e8>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d004      	beq.n	8009582 <HAL_TIM_PWM_Start+0x18a>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a19      	ldr	r2, [pc, #100]	; (80095e4 <HAL_TIM_PWM_Start+0x1ec>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d115      	bne.n	80095ae <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	4b17      	ldr	r3, [pc, #92]	; (80095e8 <HAL_TIM_PWM_Start+0x1f0>)
 800958a:	4013      	ands	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b06      	cmp	r3, #6
 8009592:	d015      	beq.n	80095c0 <HAL_TIM_PWM_Start+0x1c8>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800959a:	d011      	beq.n	80095c0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 0201 	orr.w	r2, r2, #1
 80095aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ac:	e008      	b.n	80095c0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f042 0201 	orr.w	r2, r2, #1
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	e000      	b.n	80095c2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	40010000 	.word	0x40010000
 80095d0:	40010400 	.word	0x40010400
 80095d4:	40000400 	.word	0x40000400
 80095d8:	40000800 	.word	0x40000800
 80095dc:	40000c00 	.word	0x40000c00
 80095e0:	40014000 	.word	0x40014000
 80095e4:	40001800 	.word	0x40001800
 80095e8:	00010007 	.word	0x00010007

080095ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e049      	b.n	8009692 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b00      	cmp	r3, #0
 8009608:	d106      	bne.n	8009618 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f841 	bl	800969a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2202      	movs	r2, #2
 800961c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3304      	adds	r3, #4
 8009628:	4619      	mov	r1, r3
 800962a:	4610      	mov	r0, r2
 800962c:	f000 febe 	bl	800a3ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800969a:	b480      	push	{r7}
 800969c:	b083      	sub	sp, #12
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80096a2:	bf00      	nop
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
	...

080096b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d104      	bne.n	80096ce <HAL_TIM_IC_Start_IT+0x1e>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	e023      	b.n	8009716 <HAL_TIM_IC_Start_IT+0x66>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b04      	cmp	r3, #4
 80096d2:	d104      	bne.n	80096de <HAL_TIM_IC_Start_IT+0x2e>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	e01b      	b.n	8009716 <HAL_TIM_IC_Start_IT+0x66>
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b08      	cmp	r3, #8
 80096e2:	d104      	bne.n	80096ee <HAL_TIM_IC_Start_IT+0x3e>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	e013      	b.n	8009716 <HAL_TIM_IC_Start_IT+0x66>
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b0c      	cmp	r3, #12
 80096f2:	d104      	bne.n	80096fe <HAL_TIM_IC_Start_IT+0x4e>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	e00b      	b.n	8009716 <HAL_TIM_IC_Start_IT+0x66>
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b10      	cmp	r3, #16
 8009702:	d104      	bne.n	800970e <HAL_TIM_IC_Start_IT+0x5e>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800970a:	b2db      	uxtb	r3, r3
 800970c:	e003      	b.n	8009716 <HAL_TIM_IC_Start_IT+0x66>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009714:	b2db      	uxtb	r3, r3
 8009716:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d104      	bne.n	8009728 <HAL_TIM_IC_Start_IT+0x78>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009724:	b2db      	uxtb	r3, r3
 8009726:	e013      	b.n	8009750 <HAL_TIM_IC_Start_IT+0xa0>
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2b04      	cmp	r3, #4
 800972c:	d104      	bne.n	8009738 <HAL_TIM_IC_Start_IT+0x88>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009734:	b2db      	uxtb	r3, r3
 8009736:	e00b      	b.n	8009750 <HAL_TIM_IC_Start_IT+0xa0>
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b08      	cmp	r3, #8
 800973c:	d104      	bne.n	8009748 <HAL_TIM_IC_Start_IT+0x98>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009744:	b2db      	uxtb	r3, r3
 8009746:	e003      	b.n	8009750 <HAL_TIM_IC_Start_IT+0xa0>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800974e:	b2db      	uxtb	r3, r3
 8009750:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d102      	bne.n	800975e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009758:	7b7b      	ldrb	r3, [r7, #13]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d001      	beq.n	8009762 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e0e2      	b.n	8009928 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d104      	bne.n	8009772 <HAL_TIM_IC_Start_IT+0xc2>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009770:	e023      	b.n	80097ba <HAL_TIM_IC_Start_IT+0x10a>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b04      	cmp	r3, #4
 8009776:	d104      	bne.n	8009782 <HAL_TIM_IC_Start_IT+0xd2>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009780:	e01b      	b.n	80097ba <HAL_TIM_IC_Start_IT+0x10a>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b08      	cmp	r3, #8
 8009786:	d104      	bne.n	8009792 <HAL_TIM_IC_Start_IT+0xe2>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009790:	e013      	b.n	80097ba <HAL_TIM_IC_Start_IT+0x10a>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b0c      	cmp	r3, #12
 8009796:	d104      	bne.n	80097a2 <HAL_TIM_IC_Start_IT+0xf2>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2202      	movs	r2, #2
 800979c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097a0:	e00b      	b.n	80097ba <HAL_TIM_IC_Start_IT+0x10a>
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2b10      	cmp	r3, #16
 80097a6:	d104      	bne.n	80097b2 <HAL_TIM_IC_Start_IT+0x102>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2202      	movs	r2, #2
 80097ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097b0:	e003      	b.n	80097ba <HAL_TIM_IC_Start_IT+0x10a>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2202      	movs	r2, #2
 80097b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d104      	bne.n	80097ca <HAL_TIM_IC_Start_IT+0x11a>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2202      	movs	r2, #2
 80097c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097c8:	e013      	b.n	80097f2 <HAL_TIM_IC_Start_IT+0x142>
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	2b04      	cmp	r3, #4
 80097ce:	d104      	bne.n	80097da <HAL_TIM_IC_Start_IT+0x12a>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2202      	movs	r2, #2
 80097d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097d8:	e00b      	b.n	80097f2 <HAL_TIM_IC_Start_IT+0x142>
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2b08      	cmp	r3, #8
 80097de:	d104      	bne.n	80097ea <HAL_TIM_IC_Start_IT+0x13a>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2202      	movs	r2, #2
 80097e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097e8:	e003      	b.n	80097f2 <HAL_TIM_IC_Start_IT+0x142>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2202      	movs	r2, #2
 80097ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2b0c      	cmp	r3, #12
 80097f6:	d841      	bhi.n	800987c <HAL_TIM_IC_Start_IT+0x1cc>
 80097f8:	a201      	add	r2, pc, #4	; (adr r2, 8009800 <HAL_TIM_IC_Start_IT+0x150>)
 80097fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fe:	bf00      	nop
 8009800:	08009835 	.word	0x08009835
 8009804:	0800987d 	.word	0x0800987d
 8009808:	0800987d 	.word	0x0800987d
 800980c:	0800987d 	.word	0x0800987d
 8009810:	08009847 	.word	0x08009847
 8009814:	0800987d 	.word	0x0800987d
 8009818:	0800987d 	.word	0x0800987d
 800981c:	0800987d 	.word	0x0800987d
 8009820:	08009859 	.word	0x08009859
 8009824:	0800987d 	.word	0x0800987d
 8009828:	0800987d 	.word	0x0800987d
 800982c:	0800987d 	.word	0x0800987d
 8009830:	0800986b 	.word	0x0800986b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68da      	ldr	r2, [r3, #12]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 0202 	orr.w	r2, r2, #2
 8009842:	60da      	str	r2, [r3, #12]
      break;
 8009844:	e01d      	b.n	8009882 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68da      	ldr	r2, [r3, #12]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0204 	orr.w	r2, r2, #4
 8009854:	60da      	str	r2, [r3, #12]
      break;
 8009856:	e014      	b.n	8009882 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0208 	orr.w	r2, r2, #8
 8009866:	60da      	str	r2, [r3, #12]
      break;
 8009868:	e00b      	b.n	8009882 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68da      	ldr	r2, [r3, #12]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f042 0210 	orr.w	r2, r2, #16
 8009878:	60da      	str	r2, [r3, #12]
      break;
 800987a:	e002      	b.n	8009882 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	73fb      	strb	r3, [r7, #15]
      break;
 8009880:	bf00      	nop
  }

  if (status == HAL_OK)
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d14e      	bne.n	8009926 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2201      	movs	r2, #1
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	4618      	mov	r0, r3
 8009892:	f001 f9b3 	bl	800abfc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a25      	ldr	r2, [pc, #148]	; (8009930 <HAL_TIM_IC_Start_IT+0x280>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d022      	beq.n	80098e6 <HAL_TIM_IC_Start_IT+0x236>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098a8:	d01d      	beq.n	80098e6 <HAL_TIM_IC_Start_IT+0x236>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a21      	ldr	r2, [pc, #132]	; (8009934 <HAL_TIM_IC_Start_IT+0x284>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d018      	beq.n	80098e6 <HAL_TIM_IC_Start_IT+0x236>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a1f      	ldr	r2, [pc, #124]	; (8009938 <HAL_TIM_IC_Start_IT+0x288>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d013      	beq.n	80098e6 <HAL_TIM_IC_Start_IT+0x236>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a1e      	ldr	r2, [pc, #120]	; (800993c <HAL_TIM_IC_Start_IT+0x28c>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d00e      	beq.n	80098e6 <HAL_TIM_IC_Start_IT+0x236>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a1c      	ldr	r2, [pc, #112]	; (8009940 <HAL_TIM_IC_Start_IT+0x290>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d009      	beq.n	80098e6 <HAL_TIM_IC_Start_IT+0x236>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a1b      	ldr	r2, [pc, #108]	; (8009944 <HAL_TIM_IC_Start_IT+0x294>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d004      	beq.n	80098e6 <HAL_TIM_IC_Start_IT+0x236>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a19      	ldr	r2, [pc, #100]	; (8009948 <HAL_TIM_IC_Start_IT+0x298>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d115      	bne.n	8009912 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	4b17      	ldr	r3, [pc, #92]	; (800994c <HAL_TIM_IC_Start_IT+0x29c>)
 80098ee:	4013      	ands	r3, r2
 80098f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	2b06      	cmp	r3, #6
 80098f6:	d015      	beq.n	8009924 <HAL_TIM_IC_Start_IT+0x274>
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098fe:	d011      	beq.n	8009924 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f042 0201 	orr.w	r2, r2, #1
 800990e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009910:	e008      	b.n	8009924 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f042 0201 	orr.w	r2, r2, #1
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	e000      	b.n	8009926 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009924:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009926:	7bfb      	ldrb	r3, [r7, #15]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	40010000 	.word	0x40010000
 8009934:	40000400 	.word	0x40000400
 8009938:	40000800 	.word	0x40000800
 800993c:	40000c00 	.word	0x40000c00
 8009940:	40010400 	.word	0x40010400
 8009944:	40014000 	.word	0x40014000
 8009948:	40001800 	.word	0x40001800
 800994c:	00010007 	.word	0x00010007

08009950 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b0c      	cmp	r3, #12
 8009962:	d841      	bhi.n	80099e8 <HAL_TIM_IC_Stop_IT+0x98>
 8009964:	a201      	add	r2, pc, #4	; (adr r2, 800996c <HAL_TIM_IC_Stop_IT+0x1c>)
 8009966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996a:	bf00      	nop
 800996c:	080099a1 	.word	0x080099a1
 8009970:	080099e9 	.word	0x080099e9
 8009974:	080099e9 	.word	0x080099e9
 8009978:	080099e9 	.word	0x080099e9
 800997c:	080099b3 	.word	0x080099b3
 8009980:	080099e9 	.word	0x080099e9
 8009984:	080099e9 	.word	0x080099e9
 8009988:	080099e9 	.word	0x080099e9
 800998c:	080099c5 	.word	0x080099c5
 8009990:	080099e9 	.word	0x080099e9
 8009994:	080099e9 	.word	0x080099e9
 8009998:	080099e9 	.word	0x080099e9
 800999c:	080099d7 	.word	0x080099d7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0202 	bic.w	r2, r2, #2
 80099ae:	60da      	str	r2, [r3, #12]
      break;
 80099b0:	e01d      	b.n	80099ee <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68da      	ldr	r2, [r3, #12]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f022 0204 	bic.w	r2, r2, #4
 80099c0:	60da      	str	r2, [r3, #12]
      break;
 80099c2:	e014      	b.n	80099ee <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68da      	ldr	r2, [r3, #12]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f022 0208 	bic.w	r2, r2, #8
 80099d2:	60da      	str	r2, [r3, #12]
      break;
 80099d4:	e00b      	b.n	80099ee <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68da      	ldr	r2, [r3, #12]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f022 0210 	bic.w	r2, r2, #16
 80099e4:	60da      	str	r2, [r3, #12]
      break;
 80099e6:	e002      	b.n	80099ee <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	73fb      	strb	r3, [r7, #15]
      break;
 80099ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d166      	bne.n	8009ac2 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2200      	movs	r2, #0
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f001 f8fd 	bl	800abfc <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6a1a      	ldr	r2, [r3, #32]
 8009a08:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10f      	bne.n	8009a32 <HAL_TIM_IC_Stop_IT+0xe2>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6a1a      	ldr	r2, [r3, #32]
 8009a18:	f240 4344 	movw	r3, #1092	; 0x444
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d107      	bne.n	8009a32 <HAL_TIM_IC_Stop_IT+0xe2>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f022 0201 	bic.w	r2, r2, #1
 8009a30:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d104      	bne.n	8009a42 <HAL_TIM_IC_Stop_IT+0xf2>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a40:	e023      	b.n	8009a8a <HAL_TIM_IC_Stop_IT+0x13a>
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	d104      	bne.n	8009a52 <HAL_TIM_IC_Stop_IT+0x102>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a50:	e01b      	b.n	8009a8a <HAL_TIM_IC_Stop_IT+0x13a>
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b08      	cmp	r3, #8
 8009a56:	d104      	bne.n	8009a62 <HAL_TIM_IC_Stop_IT+0x112>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a60:	e013      	b.n	8009a8a <HAL_TIM_IC_Stop_IT+0x13a>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b0c      	cmp	r3, #12
 8009a66:	d104      	bne.n	8009a72 <HAL_TIM_IC_Stop_IT+0x122>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a70:	e00b      	b.n	8009a8a <HAL_TIM_IC_Stop_IT+0x13a>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b10      	cmp	r3, #16
 8009a76:	d104      	bne.n	8009a82 <HAL_TIM_IC_Stop_IT+0x132>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a80:	e003      	b.n	8009a8a <HAL_TIM_IC_Stop_IT+0x13a>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d104      	bne.n	8009a9a <HAL_TIM_IC_Stop_IT+0x14a>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a98:	e013      	b.n	8009ac2 <HAL_TIM_IC_Stop_IT+0x172>
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b04      	cmp	r3, #4
 8009a9e:	d104      	bne.n	8009aaa <HAL_TIM_IC_Stop_IT+0x15a>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009aa8:	e00b      	b.n	8009ac2 <HAL_TIM_IC_Stop_IT+0x172>
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2b08      	cmp	r3, #8
 8009aae:	d104      	bne.n	8009aba <HAL_TIM_IC_Stop_IT+0x16a>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ab8:	e003      	b.n	8009ac2 <HAL_TIM_IC_Stop_IT+0x172>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d101      	bne.n	8009ae0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e08f      	b.n	8009c00 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d106      	bne.n	8009afa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7fc fcb5 	bl	8006464 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2202      	movs	r2, #2
 8009afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6899      	ldr	r1, [r3, #8]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	4b3e      	ldr	r3, [pc, #248]	; (8009c08 <HAL_TIM_Encoder_Init+0x13c>)
 8009b0e:	400b      	ands	r3, r1
 8009b10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	3304      	adds	r3, #4
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	f000 fc45 	bl	800a3ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	6a1b      	ldr	r3, [r3, #32]
 8009b38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	4b31      	ldr	r3, [pc, #196]	; (8009c0c <HAL_TIM_Encoder_Init+0x140>)
 8009b48:	4013      	ands	r3, r2
 8009b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	021b      	lsls	r3, r3, #8
 8009b56:	4313      	orrs	r3, r2
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	4b2b      	ldr	r3, [pc, #172]	; (8009c10 <HAL_TIM_Encoder_Init+0x144>)
 8009b62:	4013      	ands	r3, r2
 8009b64:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	4b2a      	ldr	r3, [pc, #168]	; (8009c14 <HAL_TIM_Encoder_Init+0x148>)
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	68da      	ldr	r2, [r3, #12]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	021b      	lsls	r3, r3, #8
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	011a      	lsls	r2, r3, #4
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	031b      	lsls	r3, r3, #12
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009b9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009ba2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	685a      	ldr	r2, [r3, #4]
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2201      	movs	r2, #1
 8009bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	fffebff8 	.word	0xfffebff8
 8009c0c:	fffffcfc 	.word	0xfffffcfc
 8009c10:	fffff3f3 	.word	0xfffff3f3
 8009c14:	ffff0f0f 	.word	0xffff0f0f

08009c18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009c30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d110      	bne.n	8009c6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c48:	7bfb      	ldrb	r3, [r7, #15]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d102      	bne.n	8009c54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c4e:	7b7b      	ldrb	r3, [r7, #13]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d001      	beq.n	8009c58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e069      	b.n	8009d2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2202      	movs	r2, #2
 8009c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c68:	e031      	b.n	8009cce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d110      	bne.n	8009c92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c70:	7bbb      	ldrb	r3, [r7, #14]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d102      	bne.n	8009c7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c76:	7b3b      	ldrb	r3, [r7, #12]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d001      	beq.n	8009c80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e055      	b.n	8009d2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2202      	movs	r2, #2
 8009c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c90:	e01d      	b.n	8009cce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d108      	bne.n	8009caa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d105      	bne.n	8009caa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c9e:	7b7b      	ldrb	r3, [r7, #13]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d102      	bne.n	8009caa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ca4:	7b3b      	ldrb	r3, [r7, #12]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d001      	beq.n	8009cae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e03e      	b.n	8009d2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2202      	movs	r2, #2
 8009cba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2202      	movs	r2, #2
 8009cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d003      	beq.n	8009cdc <HAL_TIM_Encoder_Start+0xc4>
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	2b04      	cmp	r3, #4
 8009cd8:	d008      	beq.n	8009cec <HAL_TIM_Encoder_Start+0xd4>
 8009cda:	e00f      	b.n	8009cfc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f000 ff89 	bl	800abfc <TIM_CCxChannelCmd>
      break;
 8009cea:	e016      	b.n	8009d1a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 ff81 	bl	800abfc <TIM_CCxChannelCmd>
      break;
 8009cfa:	e00e      	b.n	8009d1a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2201      	movs	r2, #1
 8009d02:	2100      	movs	r1, #0
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 ff79 	bl	800abfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	2104      	movs	r1, #4
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 ff72 	bl	800abfc <TIM_CCxChannelCmd>
      break;
 8009d18:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f042 0201 	orr.w	r2, r2, #1
 8009d28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	f003 0302 	and.w	r3, r3, #2
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d122      	bne.n	8009d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f003 0302 	and.w	r3, r3, #2
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d11b      	bne.n	8009d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f06f 0202 	mvn.w	r2, #2
 8009d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	f003 0303 	and.w	r3, r3, #3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7f7 ff2a 	bl	8001bd0 <HAL_TIM_IC_CaptureCallback>
 8009d7c:	e005      	b.n	8009d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 faf6 	bl	800a370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fafd 	bl	800a384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	f003 0304 	and.w	r3, r3, #4
 8009d9a:	2b04      	cmp	r3, #4
 8009d9c:	d122      	bne.n	8009de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b04      	cmp	r3, #4
 8009daa:	d11b      	bne.n	8009de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f06f 0204 	mvn.w	r2, #4
 8009db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2202      	movs	r2, #2
 8009dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7f7 ff00 	bl	8001bd0 <HAL_TIM_IC_CaptureCallback>
 8009dd0:	e005      	b.n	8009dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 facc 	bl	800a370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fad3 	bl	800a384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	f003 0308 	and.w	r3, r3, #8
 8009dee:	2b08      	cmp	r3, #8
 8009df0:	d122      	bne.n	8009e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	f003 0308 	and.w	r3, r3, #8
 8009dfc:	2b08      	cmp	r3, #8
 8009dfe:	d11b      	bne.n	8009e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f06f 0208 	mvn.w	r2, #8
 8009e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2204      	movs	r2, #4
 8009e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	f003 0303 	and.w	r3, r3, #3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7f7 fed6 	bl	8001bd0 <HAL_TIM_IC_CaptureCallback>
 8009e24:	e005      	b.n	8009e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 faa2 	bl	800a370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 faa9 	bl	800a384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	f003 0310 	and.w	r3, r3, #16
 8009e42:	2b10      	cmp	r3, #16
 8009e44:	d122      	bne.n	8009e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	f003 0310 	and.w	r3, r3, #16
 8009e50:	2b10      	cmp	r3, #16
 8009e52:	d11b      	bne.n	8009e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f06f 0210 	mvn.w	r2, #16
 8009e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2208      	movs	r2, #8
 8009e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d003      	beq.n	8009e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7f7 feac 	bl	8001bd0 <HAL_TIM_IC_CaptureCallback>
 8009e78:	e005      	b.n	8009e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fa78 	bl	800a370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fa7f 	bl	800a384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d10e      	bne.n	8009eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d107      	bne.n	8009eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f06f 0201 	mvn.w	r2, #1
 8009eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fa52 	bl	800a35c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec2:	2b80      	cmp	r3, #128	; 0x80
 8009ec4:	d10e      	bne.n	8009ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ed0:	2b80      	cmp	r3, #128	; 0x80
 8009ed2:	d107      	bne.n	8009ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 ff4a 	bl	800ad78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ef2:	d10e      	bne.n	8009f12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009efe:	2b80      	cmp	r3, #128	; 0x80
 8009f00:	d107      	bne.n	8009f12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 ff3d 	bl	800ad8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f1c:	2b40      	cmp	r3, #64	; 0x40
 8009f1e:	d10e      	bne.n	8009f3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f2a:	2b40      	cmp	r3, #64	; 0x40
 8009f2c:	d107      	bne.n	8009f3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fa2d 	bl	800a398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	f003 0320 	and.w	r3, r3, #32
 8009f48:	2b20      	cmp	r3, #32
 8009f4a:	d10e      	bne.n	8009f6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	f003 0320 	and.w	r3, r3, #32
 8009f56:	2b20      	cmp	r3, #32
 8009f58:	d107      	bne.n	8009f6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f06f 0220 	mvn.w	r2, #32
 8009f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fefd 	bl	800ad64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f6a:	bf00      	nop
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b086      	sub	sp, #24
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	60f8      	str	r0, [r7, #12]
 8009f7a:	60b9      	str	r1, [r7, #8]
 8009f7c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d101      	bne.n	8009f90 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	e088      	b.n	800a0a2 <HAL_TIM_IC_ConfigChannel+0x130>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d11b      	bne.n	8009fd6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009fae:	f000 fcfb 	bl	800a9a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	699a      	ldr	r2, [r3, #24]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f022 020c 	bic.w	r2, r2, #12
 8009fc0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6999      	ldr	r1, [r3, #24]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	689a      	ldr	r2, [r3, #8]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	619a      	str	r2, [r3, #24]
 8009fd4:	e060      	b.n	800a098 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b04      	cmp	r3, #4
 8009fda:	d11c      	bne.n	800a016 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009fec:	f000 fd50 	bl	800aa90 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	699a      	ldr	r2, [r3, #24]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ffe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6999      	ldr	r1, [r3, #24]
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	021a      	lsls	r2, r3, #8
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	430a      	orrs	r2, r1
 800a012:	619a      	str	r2, [r3, #24]
 800a014:	e040      	b.n	800a098 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2b08      	cmp	r3, #8
 800a01a:	d11b      	bne.n	800a054 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a02c:	f000 fd6d 	bl	800ab0a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	69da      	ldr	r2, [r3, #28]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f022 020c 	bic.w	r2, r2, #12
 800a03e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	69d9      	ldr	r1, [r3, #28]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	61da      	str	r2, [r3, #28]
 800a052:	e021      	b.n	800a098 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b0c      	cmp	r3, #12
 800a058:	d11c      	bne.n	800a094 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a06a:	f000 fd8a 	bl	800ab82 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	69da      	ldr	r2, [r3, #28]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a07c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	69d9      	ldr	r1, [r3, #28]
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	021a      	lsls	r2, r3, #8
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	61da      	str	r2, [r3, #28]
 800a092:	e001      	b.n	800a098 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3718      	adds	r7, #24
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
	...

0800a0ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d101      	bne.n	800a0ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e0ff      	b.n	800a2ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b14      	cmp	r3, #20
 800a0d6:	f200 80f0 	bhi.w	800a2ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a0da:	a201      	add	r2, pc, #4	; (adr r2, 800a0e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e0:	0800a135 	.word	0x0800a135
 800a0e4:	0800a2bb 	.word	0x0800a2bb
 800a0e8:	0800a2bb 	.word	0x0800a2bb
 800a0ec:	0800a2bb 	.word	0x0800a2bb
 800a0f0:	0800a175 	.word	0x0800a175
 800a0f4:	0800a2bb 	.word	0x0800a2bb
 800a0f8:	0800a2bb 	.word	0x0800a2bb
 800a0fc:	0800a2bb 	.word	0x0800a2bb
 800a100:	0800a1b7 	.word	0x0800a1b7
 800a104:	0800a2bb 	.word	0x0800a2bb
 800a108:	0800a2bb 	.word	0x0800a2bb
 800a10c:	0800a2bb 	.word	0x0800a2bb
 800a110:	0800a1f7 	.word	0x0800a1f7
 800a114:	0800a2bb 	.word	0x0800a2bb
 800a118:	0800a2bb 	.word	0x0800a2bb
 800a11c:	0800a2bb 	.word	0x0800a2bb
 800a120:	0800a239 	.word	0x0800a239
 800a124:	0800a2bb 	.word	0x0800a2bb
 800a128:	0800a2bb 	.word	0x0800a2bb
 800a12c:	0800a2bb 	.word	0x0800a2bb
 800a130:	0800a279 	.word	0x0800a279
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68b9      	ldr	r1, [r7, #8]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 f9d6 	bl	800a4ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	699a      	ldr	r2, [r3, #24]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f042 0208 	orr.w	r2, r2, #8
 800a14e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	699a      	ldr	r2, [r3, #24]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f022 0204 	bic.w	r2, r2, #4
 800a15e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6999      	ldr	r1, [r3, #24]
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	691a      	ldr	r2, [r3, #16]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	430a      	orrs	r2, r1
 800a170:	619a      	str	r2, [r3, #24]
      break;
 800a172:	e0a5      	b.n	800a2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68b9      	ldr	r1, [r7, #8]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 fa28 	bl	800a5d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	699a      	ldr	r2, [r3, #24]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a18e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	699a      	ldr	r2, [r3, #24]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a19e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6999      	ldr	r1, [r3, #24]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	021a      	lsls	r2, r3, #8
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	430a      	orrs	r2, r1
 800a1b2:	619a      	str	r2, [r3, #24]
      break;
 800a1b4:	e084      	b.n	800a2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68b9      	ldr	r1, [r7, #8]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 fa7f 	bl	800a6c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	69da      	ldr	r2, [r3, #28]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f042 0208 	orr.w	r2, r2, #8
 800a1d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	69da      	ldr	r2, [r3, #28]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f022 0204 	bic.w	r2, r2, #4
 800a1e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	69d9      	ldr	r1, [r3, #28]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	691a      	ldr	r2, [r3, #16]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	61da      	str	r2, [r3, #28]
      break;
 800a1f4:	e064      	b.n	800a2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68b9      	ldr	r1, [r7, #8]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 fad5 	bl	800a7ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	69da      	ldr	r2, [r3, #28]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	69da      	ldr	r2, [r3, #28]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	69d9      	ldr	r1, [r3, #28]
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	021a      	lsls	r2, r3, #8
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	430a      	orrs	r2, r1
 800a234:	61da      	str	r2, [r3, #28]
      break;
 800a236:	e043      	b.n	800a2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68b9      	ldr	r1, [r7, #8]
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 fb0c 	bl	800a85c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f042 0208 	orr.w	r2, r2, #8
 800a252:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f022 0204 	bic.w	r2, r2, #4
 800a262:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	691a      	ldr	r2, [r3, #16]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	430a      	orrs	r2, r1
 800a274:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a276:	e023      	b.n	800a2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68b9      	ldr	r1, [r7, #8]
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 fb3e 	bl	800a900 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a292:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	021a      	lsls	r2, r3, #8
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	430a      	orrs	r2, r1
 800a2b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a2b8:	e002      	b.n	800a2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	75fb      	strb	r3, [r7, #23]
      break;
 800a2be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop

0800a2d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b0c      	cmp	r3, #12
 800a2e6:	d831      	bhi.n	800a34c <HAL_TIM_ReadCapturedValue+0x78>
 800a2e8:	a201      	add	r2, pc, #4	; (adr r2, 800a2f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ee:	bf00      	nop
 800a2f0:	0800a325 	.word	0x0800a325
 800a2f4:	0800a34d 	.word	0x0800a34d
 800a2f8:	0800a34d 	.word	0x0800a34d
 800a2fc:	0800a34d 	.word	0x0800a34d
 800a300:	0800a32f 	.word	0x0800a32f
 800a304:	0800a34d 	.word	0x0800a34d
 800a308:	0800a34d 	.word	0x0800a34d
 800a30c:	0800a34d 	.word	0x0800a34d
 800a310:	0800a339 	.word	0x0800a339
 800a314:	0800a34d 	.word	0x0800a34d
 800a318:	0800a34d 	.word	0x0800a34d
 800a31c:	0800a34d 	.word	0x0800a34d
 800a320:	0800a343 	.word	0x0800a343
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a32a:	60fb      	str	r3, [r7, #12]

      break;
 800a32c:	e00f      	b.n	800a34e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a334:	60fb      	str	r3, [r7, #12]

      break;
 800a336:	e00a      	b.n	800a34e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33e:	60fb      	str	r3, [r7, #12]

      break;
 800a340:	e005      	b.n	800a34e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a348:	60fb      	str	r3, [r7, #12]

      break;
 800a34a:	e000      	b.n	800a34e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a34c:	bf00      	nop
  }

  return tmpreg;
 800a34e:	68fb      	ldr	r3, [r7, #12]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3714      	adds	r7, #20
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a40      	ldr	r2, [pc, #256]	; (800a4c0 <TIM_Base_SetConfig+0x114>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d013      	beq.n	800a3ec <TIM_Base_SetConfig+0x40>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ca:	d00f      	beq.n	800a3ec <TIM_Base_SetConfig+0x40>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a3d      	ldr	r2, [pc, #244]	; (800a4c4 <TIM_Base_SetConfig+0x118>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d00b      	beq.n	800a3ec <TIM_Base_SetConfig+0x40>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a3c      	ldr	r2, [pc, #240]	; (800a4c8 <TIM_Base_SetConfig+0x11c>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d007      	beq.n	800a3ec <TIM_Base_SetConfig+0x40>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a3b      	ldr	r2, [pc, #236]	; (800a4cc <TIM_Base_SetConfig+0x120>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d003      	beq.n	800a3ec <TIM_Base_SetConfig+0x40>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a3a      	ldr	r2, [pc, #232]	; (800a4d0 <TIM_Base_SetConfig+0x124>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d108      	bne.n	800a3fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a2f      	ldr	r2, [pc, #188]	; (800a4c0 <TIM_Base_SetConfig+0x114>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d02b      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a40c:	d027      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a2c      	ldr	r2, [pc, #176]	; (800a4c4 <TIM_Base_SetConfig+0x118>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d023      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a2b      	ldr	r2, [pc, #172]	; (800a4c8 <TIM_Base_SetConfig+0x11c>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d01f      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a2a      	ldr	r2, [pc, #168]	; (800a4cc <TIM_Base_SetConfig+0x120>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d01b      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a29      	ldr	r2, [pc, #164]	; (800a4d0 <TIM_Base_SetConfig+0x124>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d017      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a28      	ldr	r2, [pc, #160]	; (800a4d4 <TIM_Base_SetConfig+0x128>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d013      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a27      	ldr	r2, [pc, #156]	; (800a4d8 <TIM_Base_SetConfig+0x12c>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d00f      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a26      	ldr	r2, [pc, #152]	; (800a4dc <TIM_Base_SetConfig+0x130>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d00b      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a25      	ldr	r2, [pc, #148]	; (800a4e0 <TIM_Base_SetConfig+0x134>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d007      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a24      	ldr	r2, [pc, #144]	; (800a4e4 <TIM_Base_SetConfig+0x138>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d003      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a23      	ldr	r2, [pc, #140]	; (800a4e8 <TIM_Base_SetConfig+0x13c>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d108      	bne.n	800a470 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	689a      	ldr	r2, [r3, #8]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a0a      	ldr	r2, [pc, #40]	; (800a4c0 <TIM_Base_SetConfig+0x114>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d003      	beq.n	800a4a4 <TIM_Base_SetConfig+0xf8>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a0c      	ldr	r2, [pc, #48]	; (800a4d0 <TIM_Base_SetConfig+0x124>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d103      	bne.n	800a4ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	691a      	ldr	r2, [r3, #16]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	615a      	str	r2, [r3, #20]
}
 800a4b2:	bf00      	nop
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	40010000 	.word	0x40010000
 800a4c4:	40000400 	.word	0x40000400
 800a4c8:	40000800 	.word	0x40000800
 800a4cc:	40000c00 	.word	0x40000c00
 800a4d0:	40010400 	.word	0x40010400
 800a4d4:	40014000 	.word	0x40014000
 800a4d8:	40014400 	.word	0x40014400
 800a4dc:	40014800 	.word	0x40014800
 800a4e0:	40001800 	.word	0x40001800
 800a4e4:	40001c00 	.word	0x40001c00
 800a4e8:	40002000 	.word	0x40002000

0800a4ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	f023 0201 	bic.w	r2, r3, #1
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	4b2b      	ldr	r3, [pc, #172]	; (800a5c4 <TIM_OC1_SetConfig+0xd8>)
 800a518:	4013      	ands	r3, r2
 800a51a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f023 0303 	bic.w	r3, r3, #3
 800a522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f023 0302 	bic.w	r3, r3, #2
 800a534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a21      	ldr	r2, [pc, #132]	; (800a5c8 <TIM_OC1_SetConfig+0xdc>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d003      	beq.n	800a550 <TIM_OC1_SetConfig+0x64>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a20      	ldr	r2, [pc, #128]	; (800a5cc <TIM_OC1_SetConfig+0xe0>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d10c      	bne.n	800a56a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f023 0308 	bic.w	r3, r3, #8
 800a556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	697a      	ldr	r2, [r7, #20]
 800a55e:	4313      	orrs	r3, r2
 800a560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f023 0304 	bic.w	r3, r3, #4
 800a568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a16      	ldr	r2, [pc, #88]	; (800a5c8 <TIM_OC1_SetConfig+0xdc>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d003      	beq.n	800a57a <TIM_OC1_SetConfig+0x8e>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a15      	ldr	r2, [pc, #84]	; (800a5cc <TIM_OC1_SetConfig+0xe0>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d111      	bne.n	800a59e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	695b      	ldr	r3, [r3, #20]
 800a58e:	693a      	ldr	r2, [r7, #16]
 800a590:	4313      	orrs	r3, r2
 800a592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	621a      	str	r2, [r3, #32]
}
 800a5b8:	bf00      	nop
 800a5ba:	371c      	adds	r7, #28
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr
 800a5c4:	fffeff8f 	.word	0xfffeff8f
 800a5c8:	40010000 	.word	0x40010000
 800a5cc:	40010400 	.word	0x40010400

0800a5d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	f023 0210 	bic.w	r2, r3, #16
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	4b2e      	ldr	r3, [pc, #184]	; (800a6b4 <TIM_OC2_SetConfig+0xe4>)
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	021b      	lsls	r3, r3, #8
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	4313      	orrs	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f023 0320 	bic.w	r3, r3, #32
 800a61a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	011b      	lsls	r3, r3, #4
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	4313      	orrs	r3, r2
 800a626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a23      	ldr	r2, [pc, #140]	; (800a6b8 <TIM_OC2_SetConfig+0xe8>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d003      	beq.n	800a638 <TIM_OC2_SetConfig+0x68>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a22      	ldr	r2, [pc, #136]	; (800a6bc <TIM_OC2_SetConfig+0xec>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d10d      	bne.n	800a654 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a63e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	011b      	lsls	r3, r3, #4
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	4313      	orrs	r3, r2
 800a64a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a652:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a18      	ldr	r2, [pc, #96]	; (800a6b8 <TIM_OC2_SetConfig+0xe8>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d003      	beq.n	800a664 <TIM_OC2_SetConfig+0x94>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a17      	ldr	r2, [pc, #92]	; (800a6bc <TIM_OC2_SetConfig+0xec>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d113      	bne.n	800a68c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a66a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	695b      	ldr	r3, [r3, #20]
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	4313      	orrs	r3, r2
 800a68a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	697a      	ldr	r2, [r7, #20]
 800a6a4:	621a      	str	r2, [r3, #32]
}
 800a6a6:	bf00      	nop
 800a6a8:	371c      	adds	r7, #28
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	feff8fff 	.word	0xfeff8fff
 800a6b8:	40010000 	.word	0x40010000
 800a6bc:	40010400 	.word	0x40010400

0800a6c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	4b2d      	ldr	r3, [pc, #180]	; (800a7a0 <TIM_OC3_SetConfig+0xe0>)
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f023 0303 	bic.w	r3, r3, #3
 800a6f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	021b      	lsls	r3, r3, #8
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	4313      	orrs	r3, r2
 800a714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a22      	ldr	r2, [pc, #136]	; (800a7a4 <TIM_OC3_SetConfig+0xe4>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d003      	beq.n	800a726 <TIM_OC3_SetConfig+0x66>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a21      	ldr	r2, [pc, #132]	; (800a7a8 <TIM_OC3_SetConfig+0xe8>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d10d      	bne.n	800a742 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a72c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	021b      	lsls	r3, r3, #8
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	4313      	orrs	r3, r2
 800a738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4a17      	ldr	r2, [pc, #92]	; (800a7a4 <TIM_OC3_SetConfig+0xe4>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d003      	beq.n	800a752 <TIM_OC3_SetConfig+0x92>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4a16      	ldr	r2, [pc, #88]	; (800a7a8 <TIM_OC3_SetConfig+0xe8>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d113      	bne.n	800a77a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	011b      	lsls	r3, r3, #4
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	011b      	lsls	r3, r3, #4
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	4313      	orrs	r3, r2
 800a778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	621a      	str	r2, [r3, #32]
}
 800a794:	bf00      	nop
 800a796:	371c      	adds	r7, #28
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	fffeff8f 	.word	0xfffeff8f
 800a7a4:	40010000 	.word	0x40010000
 800a7a8:	40010400 	.word	0x40010400

0800a7ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a1b      	ldr	r3, [r3, #32]
 800a7ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	69db      	ldr	r3, [r3, #28]
 800a7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	4b1e      	ldr	r3, [pc, #120]	; (800a850 <TIM_OC4_SetConfig+0xa4>)
 800a7d8:	4013      	ands	r3, r2
 800a7da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	021b      	lsls	r3, r3, #8
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	031b      	lsls	r3, r3, #12
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	4313      	orrs	r3, r2
 800a802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a13      	ldr	r2, [pc, #76]	; (800a854 <TIM_OC4_SetConfig+0xa8>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d003      	beq.n	800a814 <TIM_OC4_SetConfig+0x68>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a12      	ldr	r2, [pc, #72]	; (800a858 <TIM_OC4_SetConfig+0xac>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d109      	bne.n	800a828 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a81a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	019b      	lsls	r3, r3, #6
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	4313      	orrs	r3, r2
 800a826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	697a      	ldr	r2, [r7, #20]
 800a82c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	685a      	ldr	r2, [r3, #4]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	621a      	str	r2, [r3, #32]
}
 800a842:	bf00      	nop
 800a844:	371c      	adds	r7, #28
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	feff8fff 	.word	0xfeff8fff
 800a854:	40010000 	.word	0x40010000
 800a858:	40010400 	.word	0x40010400

0800a85c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	4b1b      	ldr	r3, [pc, #108]	; (800a8f4 <TIM_OC5_SetConfig+0x98>)
 800a888:	4013      	ands	r3, r2
 800a88a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	4313      	orrs	r3, r2
 800a894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a89c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	041b      	lsls	r3, r3, #16
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a12      	ldr	r2, [pc, #72]	; (800a8f8 <TIM_OC5_SetConfig+0x9c>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d003      	beq.n	800a8ba <TIM_OC5_SetConfig+0x5e>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a11      	ldr	r2, [pc, #68]	; (800a8fc <TIM_OC5_SetConfig+0xa0>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d109      	bne.n	800a8ce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	695b      	ldr	r3, [r3, #20]
 800a8c6:	021b      	lsls	r3, r3, #8
 800a8c8:	697a      	ldr	r2, [r7, #20]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	685a      	ldr	r2, [r3, #4]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	693a      	ldr	r2, [r7, #16]
 800a8e6:	621a      	str	r2, [r3, #32]
}
 800a8e8:	bf00      	nop
 800a8ea:	371c      	adds	r7, #28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	fffeff8f 	.word	0xfffeff8f
 800a8f8:	40010000 	.word	0x40010000
 800a8fc:	40010400 	.word	0x40010400

0800a900 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a900:	b480      	push	{r7}
 800a902:	b087      	sub	sp, #28
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a1b      	ldr	r3, [r3, #32]
 800a91a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	4b1c      	ldr	r3, [pc, #112]	; (800a99c <TIM_OC6_SetConfig+0x9c>)
 800a92c:	4013      	ands	r3, r2
 800a92e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	021b      	lsls	r3, r3, #8
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	4313      	orrs	r3, r2
 800a93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	051b      	lsls	r3, r3, #20
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a13      	ldr	r2, [pc, #76]	; (800a9a0 <TIM_OC6_SetConfig+0xa0>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d003      	beq.n	800a960 <TIM_OC6_SetConfig+0x60>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a12      	ldr	r2, [pc, #72]	; (800a9a4 <TIM_OC6_SetConfig+0xa4>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d109      	bne.n	800a974 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a966:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	029b      	lsls	r3, r3, #10
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	4313      	orrs	r3, r2
 800a972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	685a      	ldr	r2, [r3, #4]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	621a      	str	r2, [r3, #32]
}
 800a98e:	bf00      	nop
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	feff8fff 	.word	0xfeff8fff
 800a9a0:	40010000 	.word	0x40010000
 800a9a4:	40010400 	.word	0x40010400

0800a9a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b087      	sub	sp, #28
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
 800a9b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	f023 0201 	bic.w	r2, r3, #1
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6a1b      	ldr	r3, [r3, #32]
 800a9cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	4a28      	ldr	r2, [pc, #160]	; (800aa74 <TIM_TI1_SetConfig+0xcc>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d01b      	beq.n	800aa0e <TIM_TI1_SetConfig+0x66>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9dc:	d017      	beq.n	800aa0e <TIM_TI1_SetConfig+0x66>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	4a25      	ldr	r2, [pc, #148]	; (800aa78 <TIM_TI1_SetConfig+0xd0>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d013      	beq.n	800aa0e <TIM_TI1_SetConfig+0x66>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4a24      	ldr	r2, [pc, #144]	; (800aa7c <TIM_TI1_SetConfig+0xd4>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d00f      	beq.n	800aa0e <TIM_TI1_SetConfig+0x66>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4a23      	ldr	r2, [pc, #140]	; (800aa80 <TIM_TI1_SetConfig+0xd8>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d00b      	beq.n	800aa0e <TIM_TI1_SetConfig+0x66>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4a22      	ldr	r2, [pc, #136]	; (800aa84 <TIM_TI1_SetConfig+0xdc>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d007      	beq.n	800aa0e <TIM_TI1_SetConfig+0x66>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	4a21      	ldr	r2, [pc, #132]	; (800aa88 <TIM_TI1_SetConfig+0xe0>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d003      	beq.n	800aa0e <TIM_TI1_SetConfig+0x66>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4a20      	ldr	r2, [pc, #128]	; (800aa8c <TIM_TI1_SetConfig+0xe4>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d101      	bne.n	800aa12 <TIM_TI1_SetConfig+0x6a>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e000      	b.n	800aa14 <TIM_TI1_SetConfig+0x6c>
 800aa12:	2300      	movs	r3, #0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d008      	beq.n	800aa2a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	f023 0303 	bic.w	r3, r3, #3
 800aa1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	e003      	b.n	800aa32 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f043 0301 	orr.w	r3, r3, #1
 800aa30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	011b      	lsls	r3, r3, #4
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	f023 030a 	bic.w	r3, r3, #10
 800aa4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	f003 030a 	and.w	r3, r3, #10
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	621a      	str	r2, [r3, #32]
}
 800aa66:	bf00      	nop
 800aa68:	371c      	adds	r7, #28
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	40010000 	.word	0x40010000
 800aa78:	40000400 	.word	0x40000400
 800aa7c:	40000800 	.word	0x40000800
 800aa80:	40000c00 	.word	0x40000c00
 800aa84:	40010400 	.word	0x40010400
 800aa88:	40014000 	.word	0x40014000
 800aa8c:	40001800 	.word	0x40001800

0800aa90 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b087      	sub	sp, #28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	f023 0210 	bic.w	r2, r3, #16
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6a1b      	ldr	r3, [r3, #32]
 800aab4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aabc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	021b      	lsls	r3, r3, #8
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aace:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	031b      	lsls	r3, r3, #12
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	4313      	orrs	r3, r2
 800aada:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aae2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	011b      	lsls	r3, r3, #4
 800aae8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	621a      	str	r2, [r3, #32]
}
 800aafe:	bf00      	nop
 800ab00:	371c      	adds	r7, #28
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b087      	sub	sp, #28
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	60f8      	str	r0, [r7, #12]
 800ab12:	60b9      	str	r1, [r7, #8]
 800ab14:	607a      	str	r2, [r7, #4]
 800ab16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6a1b      	ldr	r3, [r3, #32]
 800ab1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	69db      	ldr	r3, [r3, #28]
 800ab28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	f023 0303 	bic.w	r3, r3, #3
 800ab36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	011b      	lsls	r3, r3, #4
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ab5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	021b      	lsls	r3, r3, #8
 800ab60:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ab64:	693a      	ldr	r2, [r7, #16]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	693a      	ldr	r2, [r7, #16]
 800ab74:	621a      	str	r2, [r3, #32]
}
 800ab76:	bf00      	nop
 800ab78:	371c      	adds	r7, #28
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b087      	sub	sp, #28
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	60f8      	str	r0, [r7, #12]
 800ab8a:	60b9      	str	r1, [r7, #8]
 800ab8c:	607a      	str	r2, [r7, #4]
 800ab8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6a1b      	ldr	r3, [r3, #32]
 800ab94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	69db      	ldr	r3, [r3, #28]
 800aba0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	021b      	lsls	r3, r3, #8
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800abc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	031b      	lsls	r3, r3, #12
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	4313      	orrs	r3, r2
 800abcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800abd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	031b      	lsls	r3, r3, #12
 800abda:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800abde:	693a      	ldr	r2, [r7, #16]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	621a      	str	r2, [r3, #32]
}
 800abf0:	bf00      	nop
 800abf2:	371c      	adds	r7, #28
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	f003 031f 	and.w	r3, r3, #31
 800ac0e:	2201      	movs	r2, #1
 800ac10:	fa02 f303 	lsl.w	r3, r2, r3
 800ac14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6a1a      	ldr	r2, [r3, #32]
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	43db      	mvns	r3, r3
 800ac1e:	401a      	ands	r2, r3
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6a1a      	ldr	r2, [r3, #32]
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	f003 031f 	and.w	r3, r3, #31
 800ac2e:	6879      	ldr	r1, [r7, #4]
 800ac30:	fa01 f303 	lsl.w	r3, r1, r3
 800ac34:	431a      	orrs	r2, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	621a      	str	r2, [r3, #32]
}
 800ac3a:	bf00      	nop
 800ac3c:	371c      	adds	r7, #28
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
	...

0800ac48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d101      	bne.n	800ac60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	e06d      	b.n	800ad3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a30      	ldr	r2, [pc, #192]	; (800ad48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d004      	beq.n	800ac94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a2f      	ldr	r2, [pc, #188]	; (800ad4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d108      	bne.n	800aca6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ac9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a20      	ldr	r2, [pc, #128]	; (800ad48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d022      	beq.n	800ad10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acd2:	d01d      	beq.n	800ad10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a1d      	ldr	r2, [pc, #116]	; (800ad50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d018      	beq.n	800ad10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a1c      	ldr	r2, [pc, #112]	; (800ad54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d013      	beq.n	800ad10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a1a      	ldr	r2, [pc, #104]	; (800ad58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d00e      	beq.n	800ad10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a15      	ldr	r2, [pc, #84]	; (800ad4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d009      	beq.n	800ad10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a16      	ldr	r2, [pc, #88]	; (800ad5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d004      	beq.n	800ad10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a15      	ldr	r2, [pc, #84]	; (800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d10c      	bne.n	800ad2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr
 800ad48:	40010000 	.word	0x40010000
 800ad4c:	40010400 	.word	0x40010400
 800ad50:	40000400 	.word	0x40000400
 800ad54:	40000800 	.word	0x40000800
 800ad58:	40000c00 	.word	0x40000c00
 800ad5c:	40014000 	.word	0x40014000
 800ad60:	40001800 	.word	0x40001800

0800ad64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad6c:	bf00      	nop
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d101      	bne.n	800adb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e040      	b.n	800ae34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d106      	bne.n	800adc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7fb fd6c 	bl	80068a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2224      	movs	r2, #36	; 0x24
 800adcc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f022 0201 	bic.w	r2, r2, #1
 800addc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f916 	bl	800b010 <UART_SetConfig>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d101      	bne.n	800adee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	e022      	b.n	800ae34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d002      	beq.n	800adfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 fb6e 	bl	800b4d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	685a      	ldr	r2, [r3, #4]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	689a      	ldr	r2, [r3, #8]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f042 0201 	orr.w	r2, r2, #1
 800ae2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fbf5 	bl	800b61c <UART_CheckIdleState>
 800ae32:	4603      	mov	r3, r0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b08a      	sub	sp, #40	; 0x28
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	4613      	mov	r3, r2
 800ae48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae4e:	2b20      	cmp	r3, #32
 800ae50:	d165      	bne.n	800af1e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d002      	beq.n	800ae5e <HAL_UART_Transmit_DMA+0x22>
 800ae58:	88fb      	ldrh	r3, [r7, #6]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d101      	bne.n	800ae62 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e05e      	b.n	800af20 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	88fa      	ldrh	r2, [r7, #6]
 800ae6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	88fa      	ldrh	r2, [r7, #6]
 800ae74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2221      	movs	r2, #33	; 0x21
 800ae84:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d027      	beq.n	800aede <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae92:	4a25      	ldr	r2, [pc, #148]	; (800af28 <HAL_UART_Transmit_DMA+0xec>)
 800ae94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae9a:	4a24      	ldr	r2, [pc, #144]	; (800af2c <HAL_UART_Transmit_DMA+0xf0>)
 800ae9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aea2:	4a23      	ldr	r2, [pc, #140]	; (800af30 <HAL_UART_Transmit_DMA+0xf4>)
 800aea4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeaa:	2200      	movs	r2, #0
 800aeac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3328      	adds	r3, #40	; 0x28
 800aebe:	461a      	mov	r2, r3
 800aec0:	88fb      	ldrh	r3, [r7, #6]
 800aec2:	f7fc f8f6 	bl	80070b2 <HAL_DMA_Start_IT>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d008      	beq.n	800aede <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2210      	movs	r2, #16
 800aed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2220      	movs	r2, #32
 800aed8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e020      	b.n	800af20 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2240      	movs	r2, #64	; 0x40
 800aee4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3308      	adds	r3, #8
 800aeec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	613b      	str	r3, [r7, #16]
   return(result);
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aefc:	627b      	str	r3, [r7, #36]	; 0x24
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3308      	adds	r3, #8
 800af04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af06:	623a      	str	r2, [r7, #32]
 800af08:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	69f9      	ldr	r1, [r7, #28]
 800af0c:	6a3a      	ldr	r2, [r7, #32]
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	61bb      	str	r3, [r7, #24]
   return(result);
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e5      	bne.n	800aee6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	e000      	b.n	800af20 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800af1e:	2302      	movs	r3, #2
  }
}
 800af20:	4618      	mov	r0, r3
 800af22:	3728      	adds	r7, #40	; 0x28
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	0800ba6d 	.word	0x0800ba6d
 800af2c:	0800bb03 	.word	0x0800bb03
 800af30:	0800bc85 	.word	0x0800bc85

0800af34 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b08a      	sub	sp, #40	; 0x28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	4613      	mov	r3, r2
 800af40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af48:	2b20      	cmp	r3, #32
 800af4a:	d132      	bne.n	800afb2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d002      	beq.n	800af58 <HAL_UART_Receive_DMA+0x24>
 800af52:	88fb      	ldrh	r3, [r7, #6]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	e02b      	b.n	800afb4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d018      	beq.n	800afa2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	e853 3f00 	ldrex	r3, [r3]
 800af7c:	613b      	str	r3, [r7, #16]
   return(result);
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af84:	627b      	str	r3, [r7, #36]	; 0x24
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	461a      	mov	r2, r3
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	623b      	str	r3, [r7, #32]
 800af90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af92:	69f9      	ldr	r1, [r7, #28]
 800af94:	6a3a      	ldr	r2, [r7, #32]
 800af96:	e841 2300 	strex	r3, r2, [r1]
 800af9a:	61bb      	str	r3, [r7, #24]
   return(result);
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1e6      	bne.n	800af70 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800afa2:	88fb      	ldrh	r3, [r7, #6]
 800afa4:	461a      	mov	r2, r3
 800afa6:	68b9      	ldr	r1, [r7, #8]
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f000 fc35 	bl	800b818 <UART_Start_Receive_DMA>
 800afae:	4603      	mov	r3, r0
 800afb0:	e000      	b.n	800afb4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800afb2:	2302      	movs	r3, #2
  }
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3728      	adds	r7, #40	; 0x28
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800afd8:	bf00      	nop
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	460b      	mov	r3, r1
 800b002:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b004:	bf00      	nop
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	689a      	ldr	r2, [r3, #8]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	431a      	orrs	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	431a      	orrs	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	69db      	ldr	r3, [r3, #28]
 800b030:	4313      	orrs	r3, r2
 800b032:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	4ba6      	ldr	r3, [pc, #664]	; (800b2d4 <UART_SetConfig+0x2c4>)
 800b03c:	4013      	ands	r3, r2
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	6812      	ldr	r2, [r2, #0]
 800b042:	6979      	ldr	r1, [r7, #20]
 800b044:	430b      	orrs	r3, r1
 800b046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	68da      	ldr	r2, [r3, #12]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	430a      	orrs	r2, r1
 800b05c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	699b      	ldr	r3, [r3, #24]
 800b062:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a1b      	ldr	r3, [r3, #32]
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	697a      	ldr	r2, [r7, #20]
 800b07e:	430a      	orrs	r2, r1
 800b080:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a94      	ldr	r2, [pc, #592]	; (800b2d8 <UART_SetConfig+0x2c8>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d120      	bne.n	800b0ce <UART_SetConfig+0xbe>
 800b08c:	4b93      	ldr	r3, [pc, #588]	; (800b2dc <UART_SetConfig+0x2cc>)
 800b08e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b092:	f003 0303 	and.w	r3, r3, #3
 800b096:	2b03      	cmp	r3, #3
 800b098:	d816      	bhi.n	800b0c8 <UART_SetConfig+0xb8>
 800b09a:	a201      	add	r2, pc, #4	; (adr r2, 800b0a0 <UART_SetConfig+0x90>)
 800b09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a0:	0800b0b1 	.word	0x0800b0b1
 800b0a4:	0800b0bd 	.word	0x0800b0bd
 800b0a8:	0800b0b7 	.word	0x0800b0b7
 800b0ac:	0800b0c3 	.word	0x0800b0c3
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	77fb      	strb	r3, [r7, #31]
 800b0b4:	e150      	b.n	800b358 <UART_SetConfig+0x348>
 800b0b6:	2302      	movs	r3, #2
 800b0b8:	77fb      	strb	r3, [r7, #31]
 800b0ba:	e14d      	b.n	800b358 <UART_SetConfig+0x348>
 800b0bc:	2304      	movs	r3, #4
 800b0be:	77fb      	strb	r3, [r7, #31]
 800b0c0:	e14a      	b.n	800b358 <UART_SetConfig+0x348>
 800b0c2:	2308      	movs	r3, #8
 800b0c4:	77fb      	strb	r3, [r7, #31]
 800b0c6:	e147      	b.n	800b358 <UART_SetConfig+0x348>
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	77fb      	strb	r3, [r7, #31]
 800b0cc:	e144      	b.n	800b358 <UART_SetConfig+0x348>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a83      	ldr	r2, [pc, #524]	; (800b2e0 <UART_SetConfig+0x2d0>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d132      	bne.n	800b13e <UART_SetConfig+0x12e>
 800b0d8:	4b80      	ldr	r3, [pc, #512]	; (800b2dc <UART_SetConfig+0x2cc>)
 800b0da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0de:	f003 030c 	and.w	r3, r3, #12
 800b0e2:	2b0c      	cmp	r3, #12
 800b0e4:	d828      	bhi.n	800b138 <UART_SetConfig+0x128>
 800b0e6:	a201      	add	r2, pc, #4	; (adr r2, 800b0ec <UART_SetConfig+0xdc>)
 800b0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ec:	0800b121 	.word	0x0800b121
 800b0f0:	0800b139 	.word	0x0800b139
 800b0f4:	0800b139 	.word	0x0800b139
 800b0f8:	0800b139 	.word	0x0800b139
 800b0fc:	0800b12d 	.word	0x0800b12d
 800b100:	0800b139 	.word	0x0800b139
 800b104:	0800b139 	.word	0x0800b139
 800b108:	0800b139 	.word	0x0800b139
 800b10c:	0800b127 	.word	0x0800b127
 800b110:	0800b139 	.word	0x0800b139
 800b114:	0800b139 	.word	0x0800b139
 800b118:	0800b139 	.word	0x0800b139
 800b11c:	0800b133 	.word	0x0800b133
 800b120:	2300      	movs	r3, #0
 800b122:	77fb      	strb	r3, [r7, #31]
 800b124:	e118      	b.n	800b358 <UART_SetConfig+0x348>
 800b126:	2302      	movs	r3, #2
 800b128:	77fb      	strb	r3, [r7, #31]
 800b12a:	e115      	b.n	800b358 <UART_SetConfig+0x348>
 800b12c:	2304      	movs	r3, #4
 800b12e:	77fb      	strb	r3, [r7, #31]
 800b130:	e112      	b.n	800b358 <UART_SetConfig+0x348>
 800b132:	2308      	movs	r3, #8
 800b134:	77fb      	strb	r3, [r7, #31]
 800b136:	e10f      	b.n	800b358 <UART_SetConfig+0x348>
 800b138:	2310      	movs	r3, #16
 800b13a:	77fb      	strb	r3, [r7, #31]
 800b13c:	e10c      	b.n	800b358 <UART_SetConfig+0x348>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a68      	ldr	r2, [pc, #416]	; (800b2e4 <UART_SetConfig+0x2d4>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d120      	bne.n	800b18a <UART_SetConfig+0x17a>
 800b148:	4b64      	ldr	r3, [pc, #400]	; (800b2dc <UART_SetConfig+0x2cc>)
 800b14a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b14e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b152:	2b30      	cmp	r3, #48	; 0x30
 800b154:	d013      	beq.n	800b17e <UART_SetConfig+0x16e>
 800b156:	2b30      	cmp	r3, #48	; 0x30
 800b158:	d814      	bhi.n	800b184 <UART_SetConfig+0x174>
 800b15a:	2b20      	cmp	r3, #32
 800b15c:	d009      	beq.n	800b172 <UART_SetConfig+0x162>
 800b15e:	2b20      	cmp	r3, #32
 800b160:	d810      	bhi.n	800b184 <UART_SetConfig+0x174>
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <UART_SetConfig+0x15c>
 800b166:	2b10      	cmp	r3, #16
 800b168:	d006      	beq.n	800b178 <UART_SetConfig+0x168>
 800b16a:	e00b      	b.n	800b184 <UART_SetConfig+0x174>
 800b16c:	2300      	movs	r3, #0
 800b16e:	77fb      	strb	r3, [r7, #31]
 800b170:	e0f2      	b.n	800b358 <UART_SetConfig+0x348>
 800b172:	2302      	movs	r3, #2
 800b174:	77fb      	strb	r3, [r7, #31]
 800b176:	e0ef      	b.n	800b358 <UART_SetConfig+0x348>
 800b178:	2304      	movs	r3, #4
 800b17a:	77fb      	strb	r3, [r7, #31]
 800b17c:	e0ec      	b.n	800b358 <UART_SetConfig+0x348>
 800b17e:	2308      	movs	r3, #8
 800b180:	77fb      	strb	r3, [r7, #31]
 800b182:	e0e9      	b.n	800b358 <UART_SetConfig+0x348>
 800b184:	2310      	movs	r3, #16
 800b186:	77fb      	strb	r3, [r7, #31]
 800b188:	e0e6      	b.n	800b358 <UART_SetConfig+0x348>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a56      	ldr	r2, [pc, #344]	; (800b2e8 <UART_SetConfig+0x2d8>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d120      	bne.n	800b1d6 <UART_SetConfig+0x1c6>
 800b194:	4b51      	ldr	r3, [pc, #324]	; (800b2dc <UART_SetConfig+0x2cc>)
 800b196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b19a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b19e:	2bc0      	cmp	r3, #192	; 0xc0
 800b1a0:	d013      	beq.n	800b1ca <UART_SetConfig+0x1ba>
 800b1a2:	2bc0      	cmp	r3, #192	; 0xc0
 800b1a4:	d814      	bhi.n	800b1d0 <UART_SetConfig+0x1c0>
 800b1a6:	2b80      	cmp	r3, #128	; 0x80
 800b1a8:	d009      	beq.n	800b1be <UART_SetConfig+0x1ae>
 800b1aa:	2b80      	cmp	r3, #128	; 0x80
 800b1ac:	d810      	bhi.n	800b1d0 <UART_SetConfig+0x1c0>
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d002      	beq.n	800b1b8 <UART_SetConfig+0x1a8>
 800b1b2:	2b40      	cmp	r3, #64	; 0x40
 800b1b4:	d006      	beq.n	800b1c4 <UART_SetConfig+0x1b4>
 800b1b6:	e00b      	b.n	800b1d0 <UART_SetConfig+0x1c0>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	77fb      	strb	r3, [r7, #31]
 800b1bc:	e0cc      	b.n	800b358 <UART_SetConfig+0x348>
 800b1be:	2302      	movs	r3, #2
 800b1c0:	77fb      	strb	r3, [r7, #31]
 800b1c2:	e0c9      	b.n	800b358 <UART_SetConfig+0x348>
 800b1c4:	2304      	movs	r3, #4
 800b1c6:	77fb      	strb	r3, [r7, #31]
 800b1c8:	e0c6      	b.n	800b358 <UART_SetConfig+0x348>
 800b1ca:	2308      	movs	r3, #8
 800b1cc:	77fb      	strb	r3, [r7, #31]
 800b1ce:	e0c3      	b.n	800b358 <UART_SetConfig+0x348>
 800b1d0:	2310      	movs	r3, #16
 800b1d2:	77fb      	strb	r3, [r7, #31]
 800b1d4:	e0c0      	b.n	800b358 <UART_SetConfig+0x348>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a44      	ldr	r2, [pc, #272]	; (800b2ec <UART_SetConfig+0x2dc>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d125      	bne.n	800b22c <UART_SetConfig+0x21c>
 800b1e0:	4b3e      	ldr	r3, [pc, #248]	; (800b2dc <UART_SetConfig+0x2cc>)
 800b1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1ee:	d017      	beq.n	800b220 <UART_SetConfig+0x210>
 800b1f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1f4:	d817      	bhi.n	800b226 <UART_SetConfig+0x216>
 800b1f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1fa:	d00b      	beq.n	800b214 <UART_SetConfig+0x204>
 800b1fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b200:	d811      	bhi.n	800b226 <UART_SetConfig+0x216>
 800b202:	2b00      	cmp	r3, #0
 800b204:	d003      	beq.n	800b20e <UART_SetConfig+0x1fe>
 800b206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b20a:	d006      	beq.n	800b21a <UART_SetConfig+0x20a>
 800b20c:	e00b      	b.n	800b226 <UART_SetConfig+0x216>
 800b20e:	2300      	movs	r3, #0
 800b210:	77fb      	strb	r3, [r7, #31]
 800b212:	e0a1      	b.n	800b358 <UART_SetConfig+0x348>
 800b214:	2302      	movs	r3, #2
 800b216:	77fb      	strb	r3, [r7, #31]
 800b218:	e09e      	b.n	800b358 <UART_SetConfig+0x348>
 800b21a:	2304      	movs	r3, #4
 800b21c:	77fb      	strb	r3, [r7, #31]
 800b21e:	e09b      	b.n	800b358 <UART_SetConfig+0x348>
 800b220:	2308      	movs	r3, #8
 800b222:	77fb      	strb	r3, [r7, #31]
 800b224:	e098      	b.n	800b358 <UART_SetConfig+0x348>
 800b226:	2310      	movs	r3, #16
 800b228:	77fb      	strb	r3, [r7, #31]
 800b22a:	e095      	b.n	800b358 <UART_SetConfig+0x348>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a2f      	ldr	r2, [pc, #188]	; (800b2f0 <UART_SetConfig+0x2e0>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d125      	bne.n	800b282 <UART_SetConfig+0x272>
 800b236:	4b29      	ldr	r3, [pc, #164]	; (800b2dc <UART_SetConfig+0x2cc>)
 800b238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b23c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b240:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b244:	d017      	beq.n	800b276 <UART_SetConfig+0x266>
 800b246:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b24a:	d817      	bhi.n	800b27c <UART_SetConfig+0x26c>
 800b24c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b250:	d00b      	beq.n	800b26a <UART_SetConfig+0x25a>
 800b252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b256:	d811      	bhi.n	800b27c <UART_SetConfig+0x26c>
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d003      	beq.n	800b264 <UART_SetConfig+0x254>
 800b25c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b260:	d006      	beq.n	800b270 <UART_SetConfig+0x260>
 800b262:	e00b      	b.n	800b27c <UART_SetConfig+0x26c>
 800b264:	2301      	movs	r3, #1
 800b266:	77fb      	strb	r3, [r7, #31]
 800b268:	e076      	b.n	800b358 <UART_SetConfig+0x348>
 800b26a:	2302      	movs	r3, #2
 800b26c:	77fb      	strb	r3, [r7, #31]
 800b26e:	e073      	b.n	800b358 <UART_SetConfig+0x348>
 800b270:	2304      	movs	r3, #4
 800b272:	77fb      	strb	r3, [r7, #31]
 800b274:	e070      	b.n	800b358 <UART_SetConfig+0x348>
 800b276:	2308      	movs	r3, #8
 800b278:	77fb      	strb	r3, [r7, #31]
 800b27a:	e06d      	b.n	800b358 <UART_SetConfig+0x348>
 800b27c:	2310      	movs	r3, #16
 800b27e:	77fb      	strb	r3, [r7, #31]
 800b280:	e06a      	b.n	800b358 <UART_SetConfig+0x348>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a1b      	ldr	r2, [pc, #108]	; (800b2f4 <UART_SetConfig+0x2e4>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d138      	bne.n	800b2fe <UART_SetConfig+0x2ee>
 800b28c:	4b13      	ldr	r3, [pc, #76]	; (800b2dc <UART_SetConfig+0x2cc>)
 800b28e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b292:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b296:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b29a:	d017      	beq.n	800b2cc <UART_SetConfig+0x2bc>
 800b29c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b2a0:	d82a      	bhi.n	800b2f8 <UART_SetConfig+0x2e8>
 800b2a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2a6:	d00b      	beq.n	800b2c0 <UART_SetConfig+0x2b0>
 800b2a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2ac:	d824      	bhi.n	800b2f8 <UART_SetConfig+0x2e8>
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <UART_SetConfig+0x2aa>
 800b2b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2b6:	d006      	beq.n	800b2c6 <UART_SetConfig+0x2b6>
 800b2b8:	e01e      	b.n	800b2f8 <UART_SetConfig+0x2e8>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	77fb      	strb	r3, [r7, #31]
 800b2be:	e04b      	b.n	800b358 <UART_SetConfig+0x348>
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	77fb      	strb	r3, [r7, #31]
 800b2c4:	e048      	b.n	800b358 <UART_SetConfig+0x348>
 800b2c6:	2304      	movs	r3, #4
 800b2c8:	77fb      	strb	r3, [r7, #31]
 800b2ca:	e045      	b.n	800b358 <UART_SetConfig+0x348>
 800b2cc:	2308      	movs	r3, #8
 800b2ce:	77fb      	strb	r3, [r7, #31]
 800b2d0:	e042      	b.n	800b358 <UART_SetConfig+0x348>
 800b2d2:	bf00      	nop
 800b2d4:	efff69f3 	.word	0xefff69f3
 800b2d8:	40011000 	.word	0x40011000
 800b2dc:	40023800 	.word	0x40023800
 800b2e0:	40004400 	.word	0x40004400
 800b2e4:	40004800 	.word	0x40004800
 800b2e8:	40004c00 	.word	0x40004c00
 800b2ec:	40005000 	.word	0x40005000
 800b2f0:	40011400 	.word	0x40011400
 800b2f4:	40007800 	.word	0x40007800
 800b2f8:	2310      	movs	r3, #16
 800b2fa:	77fb      	strb	r3, [r7, #31]
 800b2fc:	e02c      	b.n	800b358 <UART_SetConfig+0x348>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a72      	ldr	r2, [pc, #456]	; (800b4cc <UART_SetConfig+0x4bc>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d125      	bne.n	800b354 <UART_SetConfig+0x344>
 800b308:	4b71      	ldr	r3, [pc, #452]	; (800b4d0 <UART_SetConfig+0x4c0>)
 800b30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b30e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b312:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b316:	d017      	beq.n	800b348 <UART_SetConfig+0x338>
 800b318:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b31c:	d817      	bhi.n	800b34e <UART_SetConfig+0x33e>
 800b31e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b322:	d00b      	beq.n	800b33c <UART_SetConfig+0x32c>
 800b324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b328:	d811      	bhi.n	800b34e <UART_SetConfig+0x33e>
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <UART_SetConfig+0x326>
 800b32e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b332:	d006      	beq.n	800b342 <UART_SetConfig+0x332>
 800b334:	e00b      	b.n	800b34e <UART_SetConfig+0x33e>
 800b336:	2300      	movs	r3, #0
 800b338:	77fb      	strb	r3, [r7, #31]
 800b33a:	e00d      	b.n	800b358 <UART_SetConfig+0x348>
 800b33c:	2302      	movs	r3, #2
 800b33e:	77fb      	strb	r3, [r7, #31]
 800b340:	e00a      	b.n	800b358 <UART_SetConfig+0x348>
 800b342:	2304      	movs	r3, #4
 800b344:	77fb      	strb	r3, [r7, #31]
 800b346:	e007      	b.n	800b358 <UART_SetConfig+0x348>
 800b348:	2308      	movs	r3, #8
 800b34a:	77fb      	strb	r3, [r7, #31]
 800b34c:	e004      	b.n	800b358 <UART_SetConfig+0x348>
 800b34e:	2310      	movs	r3, #16
 800b350:	77fb      	strb	r3, [r7, #31]
 800b352:	e001      	b.n	800b358 <UART_SetConfig+0x348>
 800b354:	2310      	movs	r3, #16
 800b356:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	69db      	ldr	r3, [r3, #28]
 800b35c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b360:	d15b      	bne.n	800b41a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b362:	7ffb      	ldrb	r3, [r7, #31]
 800b364:	2b08      	cmp	r3, #8
 800b366:	d828      	bhi.n	800b3ba <UART_SetConfig+0x3aa>
 800b368:	a201      	add	r2, pc, #4	; (adr r2, 800b370 <UART_SetConfig+0x360>)
 800b36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36e:	bf00      	nop
 800b370:	0800b395 	.word	0x0800b395
 800b374:	0800b39d 	.word	0x0800b39d
 800b378:	0800b3a5 	.word	0x0800b3a5
 800b37c:	0800b3bb 	.word	0x0800b3bb
 800b380:	0800b3ab 	.word	0x0800b3ab
 800b384:	0800b3bb 	.word	0x0800b3bb
 800b388:	0800b3bb 	.word	0x0800b3bb
 800b38c:	0800b3bb 	.word	0x0800b3bb
 800b390:	0800b3b3 	.word	0x0800b3b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b394:	f7fc ff24 	bl	80081e0 <HAL_RCC_GetPCLK1Freq>
 800b398:	61b8      	str	r0, [r7, #24]
        break;
 800b39a:	e013      	b.n	800b3c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b39c:	f7fc ff34 	bl	8008208 <HAL_RCC_GetPCLK2Freq>
 800b3a0:	61b8      	str	r0, [r7, #24]
        break;
 800b3a2:	e00f      	b.n	800b3c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3a4:	4b4b      	ldr	r3, [pc, #300]	; (800b4d4 <UART_SetConfig+0x4c4>)
 800b3a6:	61bb      	str	r3, [r7, #24]
        break;
 800b3a8:	e00c      	b.n	800b3c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3aa:	f7fc fe07 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 800b3ae:	61b8      	str	r0, [r7, #24]
        break;
 800b3b0:	e008      	b.n	800b3c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3b6:	61bb      	str	r3, [r7, #24]
        break;
 800b3b8:	e004      	b.n	800b3c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	77bb      	strb	r3, [r7, #30]
        break;
 800b3c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d074      	beq.n	800b4b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	005a      	lsls	r2, r3, #1
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	085b      	lsrs	r3, r3, #1
 800b3d4:	441a      	add	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	2b0f      	cmp	r3, #15
 800b3e4:	d916      	bls.n	800b414 <UART_SetConfig+0x404>
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3ec:	d212      	bcs.n	800b414 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	f023 030f 	bic.w	r3, r3, #15
 800b3f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	085b      	lsrs	r3, r3, #1
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	f003 0307 	and.w	r3, r3, #7
 800b402:	b29a      	uxth	r2, r3
 800b404:	89fb      	ldrh	r3, [r7, #14]
 800b406:	4313      	orrs	r3, r2
 800b408:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	89fa      	ldrh	r2, [r7, #14]
 800b410:	60da      	str	r2, [r3, #12]
 800b412:	e04f      	b.n	800b4b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	77bb      	strb	r3, [r7, #30]
 800b418:	e04c      	b.n	800b4b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b41a:	7ffb      	ldrb	r3, [r7, #31]
 800b41c:	2b08      	cmp	r3, #8
 800b41e:	d828      	bhi.n	800b472 <UART_SetConfig+0x462>
 800b420:	a201      	add	r2, pc, #4	; (adr r2, 800b428 <UART_SetConfig+0x418>)
 800b422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b426:	bf00      	nop
 800b428:	0800b44d 	.word	0x0800b44d
 800b42c:	0800b455 	.word	0x0800b455
 800b430:	0800b45d 	.word	0x0800b45d
 800b434:	0800b473 	.word	0x0800b473
 800b438:	0800b463 	.word	0x0800b463
 800b43c:	0800b473 	.word	0x0800b473
 800b440:	0800b473 	.word	0x0800b473
 800b444:	0800b473 	.word	0x0800b473
 800b448:	0800b46b 	.word	0x0800b46b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b44c:	f7fc fec8 	bl	80081e0 <HAL_RCC_GetPCLK1Freq>
 800b450:	61b8      	str	r0, [r7, #24]
        break;
 800b452:	e013      	b.n	800b47c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b454:	f7fc fed8 	bl	8008208 <HAL_RCC_GetPCLK2Freq>
 800b458:	61b8      	str	r0, [r7, #24]
        break;
 800b45a:	e00f      	b.n	800b47c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b45c:	4b1d      	ldr	r3, [pc, #116]	; (800b4d4 <UART_SetConfig+0x4c4>)
 800b45e:	61bb      	str	r3, [r7, #24]
        break;
 800b460:	e00c      	b.n	800b47c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b462:	f7fc fdab 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 800b466:	61b8      	str	r0, [r7, #24]
        break;
 800b468:	e008      	b.n	800b47c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b46a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b46e:	61bb      	str	r3, [r7, #24]
        break;
 800b470:	e004      	b.n	800b47c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	77bb      	strb	r3, [r7, #30]
        break;
 800b47a:	bf00      	nop
    }

    if (pclk != 0U)
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d018      	beq.n	800b4b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	085a      	lsrs	r2, r3, #1
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	441a      	add	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	fbb2 f3f3 	udiv	r3, r2, r3
 800b494:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	2b0f      	cmp	r3, #15
 800b49a:	d909      	bls.n	800b4b0 <UART_SetConfig+0x4a0>
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4a2:	d205      	bcs.n	800b4b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	60da      	str	r2, [r3, #12]
 800b4ae:	e001      	b.n	800b4b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b4c0:	7fbb      	ldrb	r3, [r7, #30]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3720      	adds	r7, #32
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	40007c00 	.word	0x40007c00
 800b4d0:	40023800 	.word	0x40023800
 800b4d4:	00f42400 	.word	0x00f42400

0800b4d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00a      	beq.n	800b502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	430a      	orrs	r2, r1
 800b500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b506:	f003 0302 	and.w	r3, r3, #2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00a      	beq.n	800b524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	430a      	orrs	r2, r1
 800b522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00a      	beq.n	800b546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	430a      	orrs	r2, r1
 800b544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54a:	f003 0308 	and.w	r3, r3, #8
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00a      	beq.n	800b568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	430a      	orrs	r2, r1
 800b566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56c:	f003 0310 	and.w	r3, r3, #16
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00a      	beq.n	800b58a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	430a      	orrs	r2, r1
 800b588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58e:	f003 0320 	and.w	r3, r3, #32
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00a      	beq.n	800b5ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	430a      	orrs	r2, r1
 800b5aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d01a      	beq.n	800b5ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	430a      	orrs	r2, r1
 800b5cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5d6:	d10a      	bne.n	800b5ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	430a      	orrs	r2, r1
 800b60e:	605a      	str	r2, [r3, #4]
  }
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af02      	add	r7, sp, #8
 800b622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b62c:	f7fb fb04 	bl	8006c38 <HAL_GetTick>
 800b630:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 0308 	and.w	r3, r3, #8
 800b63c:	2b08      	cmp	r3, #8
 800b63e:	d10e      	bne.n	800b65e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f81b 	bl	800b68a <UART_WaitOnFlagUntilTimeout>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d001      	beq.n	800b65e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b65a:	2303      	movs	r3, #3
 800b65c:	e011      	b.n	800b682 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2220      	movs	r2, #32
 800b662:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2220      	movs	r2, #32
 800b668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b09c      	sub	sp, #112	; 0x70
 800b68e:	af00      	add	r7, sp, #0
 800b690:	60f8      	str	r0, [r7, #12]
 800b692:	60b9      	str	r1, [r7, #8]
 800b694:	603b      	str	r3, [r7, #0]
 800b696:	4613      	mov	r3, r2
 800b698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b69a:	e0a7      	b.n	800b7ec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b69c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a2:	f000 80a3 	beq.w	800b7ec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6a6:	f7fb fac7 	bl	8006c38 <HAL_GetTick>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	1ad3      	subs	r3, r2, r3
 800b6b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d302      	bcc.n	800b6bc <UART_WaitOnFlagUntilTimeout+0x32>
 800b6b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d13f      	bne.n	800b73c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6c4:	e853 3f00 	ldrex	r3, [r3]
 800b6c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b6ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b6d0:	667b      	str	r3, [r7, #100]	; 0x64
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b6e2:	e841 2300 	strex	r3, r2, [r1]
 800b6e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b6e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1e6      	bne.n	800b6bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3308      	adds	r3, #8
 800b6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6f8:	e853 3f00 	ldrex	r3, [r3]
 800b6fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b700:	f023 0301 	bic.w	r3, r3, #1
 800b704:	663b      	str	r3, [r7, #96]	; 0x60
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3308      	adds	r3, #8
 800b70c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b70e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b710:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b716:	e841 2300 	strex	r3, r2, [r1]
 800b71a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1e5      	bne.n	800b6ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2220      	movs	r2, #32
 800b726:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2220      	movs	r2, #32
 800b72c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800b738:	2303      	movs	r3, #3
 800b73a:	e068      	b.n	800b80e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f003 0304 	and.w	r3, r3, #4
 800b746:	2b00      	cmp	r3, #0
 800b748:	d050      	beq.n	800b7ec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	69db      	ldr	r3, [r3, #28]
 800b750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b758:	d148      	bne.n	800b7ec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b762:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76c:	e853 3f00 	ldrex	r3, [r3]
 800b770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b778:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	461a      	mov	r2, r3
 800b780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b782:	637b      	str	r3, [r7, #52]	; 0x34
 800b784:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b786:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b78a:	e841 2300 	strex	r3, r2, [r1]
 800b78e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1e6      	bne.n	800b764 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	3308      	adds	r3, #8
 800b79c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	e853 3f00 	ldrex	r3, [r3]
 800b7a4:	613b      	str	r3, [r7, #16]
   return(result);
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	f023 0301 	bic.w	r3, r3, #1
 800b7ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b7b6:	623a      	str	r2, [r7, #32]
 800b7b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ba:	69f9      	ldr	r1, [r7, #28]
 800b7bc:	6a3a      	ldr	r2, [r7, #32]
 800b7be:	e841 2300 	strex	r3, r2, [r1]
 800b7c2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1e5      	bne.n	800b796 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2220      	movs	r2, #32
 800b7ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2220      	movs	r2, #32
 800b7d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2220      	movs	r2, #32
 800b7dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	e010      	b.n	800b80e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	69da      	ldr	r2, [r3, #28]
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	4013      	ands	r3, r2
 800b7f6:	68ba      	ldr	r2, [r7, #8]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	bf0c      	ite	eq
 800b7fc:	2301      	moveq	r3, #1
 800b7fe:	2300      	movne	r3, #0
 800b800:	b2db      	uxtb	r3, r3
 800b802:	461a      	mov	r2, r3
 800b804:	79fb      	ldrb	r3, [r7, #7]
 800b806:	429a      	cmp	r2, r3
 800b808:	f43f af48 	beq.w	800b69c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3770      	adds	r7, #112	; 0x70
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
	...

0800b818 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b096      	sub	sp, #88	; 0x58
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	4613      	mov	r3, r2
 800b824:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	88fa      	ldrh	r2, [r7, #6]
 800b830:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2200      	movs	r2, #0
 800b838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2222      	movs	r2, #34	; 0x22
 800b840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d028      	beq.n	800b89e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b850:	4a3e      	ldr	r2, [pc, #248]	; (800b94c <UART_Start_Receive_DMA+0x134>)
 800b852:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b858:	4a3d      	ldr	r2, [pc, #244]	; (800b950 <UART_Start_Receive_DMA+0x138>)
 800b85a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b860:	4a3c      	ldr	r2, [pc, #240]	; (800b954 <UART_Start_Receive_DMA+0x13c>)
 800b862:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b868:	2200      	movs	r2, #0
 800b86a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3324      	adds	r3, #36	; 0x24
 800b876:	4619      	mov	r1, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b87c:	461a      	mov	r2, r3
 800b87e:	88fb      	ldrh	r3, [r7, #6]
 800b880:	f7fb fc17 	bl	80070b2 <HAL_DMA_Start_IT>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d009      	beq.n	800b89e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2210      	movs	r2, #16
 800b88e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2220      	movs	r2, #32
 800b896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	e051      	b.n	800b942 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d018      	beq.n	800b8d8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ae:	e853 3f00 	ldrex	r3, [r3]
 800b8b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8ba:	657b      	str	r3, [r7, #84]	; 0x54
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8c6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b8ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8cc:	e841 2300 	strex	r3, r2, [r1]
 800b8d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1e6      	bne.n	800b8a6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	3308      	adds	r3, #8
 800b8de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e2:	e853 3f00 	ldrex	r3, [r3]
 800b8e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	f043 0301 	orr.w	r3, r3, #1
 800b8ee:	653b      	str	r3, [r7, #80]	; 0x50
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	3308      	adds	r3, #8
 800b8f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8f8:	637a      	str	r2, [r7, #52]	; 0x34
 800b8fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b900:	e841 2300 	strex	r3, r2, [r1]
 800b904:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1e5      	bne.n	800b8d8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3308      	adds	r3, #8
 800b912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	e853 3f00 	ldrex	r3, [r3]
 800b91a:	613b      	str	r3, [r7, #16]
   return(result);
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b922:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	3308      	adds	r3, #8
 800b92a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b92c:	623a      	str	r2, [r7, #32]
 800b92e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b930:	69f9      	ldr	r1, [r7, #28]
 800b932:	6a3a      	ldr	r2, [r7, #32]
 800b934:	e841 2300 	strex	r3, r2, [r1]
 800b938:	61bb      	str	r3, [r7, #24]
   return(result);
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1e5      	bne.n	800b90c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3758      	adds	r7, #88	; 0x58
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	0800bb1f 	.word	0x0800bb1f
 800b950:	0800bc47 	.word	0x0800bc47
 800b954:	0800bc85 	.word	0x0800bc85

0800b958 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b958:	b480      	push	{r7}
 800b95a:	b089      	sub	sp, #36	; 0x24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	e853 3f00 	ldrex	r3, [r3]
 800b96c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b974:	61fb      	str	r3, [r7, #28]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	461a      	mov	r2, r3
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	61bb      	str	r3, [r7, #24]
 800b980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b982:	6979      	ldr	r1, [r7, #20]
 800b984:	69ba      	ldr	r2, [r7, #24]
 800b986:	e841 2300 	strex	r3, r2, [r1]
 800b98a:	613b      	str	r3, [r7, #16]
   return(result);
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1e6      	bne.n	800b960 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2220      	movs	r2, #32
 800b996:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b998:	bf00      	nop
 800b99a:	3724      	adds	r7, #36	; 0x24
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b095      	sub	sp, #84	; 0x54
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b4:	e853 3f00 	ldrex	r3, [r3]
 800b9b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ca:	643b      	str	r3, [r7, #64]	; 0x40
 800b9cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9d2:	e841 2300 	strex	r3, r2, [r1]
 800b9d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1e6      	bne.n	800b9ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	e853 3f00 	ldrex	r3, [r3]
 800b9ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	f023 0301 	bic.w	r3, r3, #1
 800b9f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	3308      	adds	r3, #8
 800b9fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba06:	e841 2300 	strex	r3, r2, [r1]
 800ba0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1e5      	bne.n	800b9de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d118      	bne.n	800ba4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	e853 3f00 	ldrex	r3, [r3]
 800ba26:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	f023 0310 	bic.w	r3, r3, #16
 800ba2e:	647b      	str	r3, [r7, #68]	; 0x44
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	461a      	mov	r2, r3
 800ba36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba38:	61bb      	str	r3, [r7, #24]
 800ba3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3c:	6979      	ldr	r1, [r7, #20]
 800ba3e:	69ba      	ldr	r2, [r7, #24]
 800ba40:	e841 2300 	strex	r3, r2, [r1]
 800ba44:	613b      	str	r3, [r7, #16]
   return(result);
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d1e6      	bne.n	800ba1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2220      	movs	r2, #32
 800ba50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ba60:	bf00      	nop
 800ba62:	3754      	adds	r7, #84	; 0x54
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b090      	sub	sp, #64	; 0x40
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba78:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	69db      	ldr	r3, [r3, #28]
 800ba7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba82:	d037      	beq.n	800baf4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ba84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba86:	2200      	movs	r2, #0
 800ba88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3308      	adds	r3, #8
 800ba92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	e853 3f00 	ldrex	r3, [r3]
 800ba9a:	623b      	str	r3, [r7, #32]
   return(result);
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800baa2:	63bb      	str	r3, [r7, #56]	; 0x38
 800baa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	3308      	adds	r3, #8
 800baaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baac:	633a      	str	r2, [r7, #48]	; 0x30
 800baae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bab4:	e841 2300 	strex	r3, r2, [r1]
 800bab8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800baba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1e5      	bne.n	800ba8c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	e853 3f00 	ldrex	r3, [r3]
 800bacc:	60fb      	str	r3, [r7, #12]
   return(result);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bad4:	637b      	str	r3, [r7, #52]	; 0x34
 800bad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	461a      	mov	r2, r3
 800badc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bade:	61fb      	str	r3, [r7, #28]
 800bae0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae2:	69b9      	ldr	r1, [r7, #24]
 800bae4:	69fa      	ldr	r2, [r7, #28]
 800bae6:	e841 2300 	strex	r3, r2, [r1]
 800baea:	617b      	str	r3, [r7, #20]
   return(result);
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1e6      	bne.n	800bac0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800baf2:	e002      	b.n	800bafa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800baf4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800baf6:	f7f8 fa71 	bl	8003fdc <HAL_UART_TxCpltCallback>
}
 800bafa:	bf00      	nop
 800bafc:	3740      	adds	r7, #64	; 0x40
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b084      	sub	sp, #16
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb0e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f7ff fa53 	bl	800afbc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb16:	bf00      	nop
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b09c      	sub	sp, #112	; 0x70
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb2a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	69db      	ldr	r3, [r3, #28]
 800bb30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb34:	d071      	beq.n	800bc1a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800bb36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb46:	e853 3f00 	ldrex	r3, [r3]
 800bb4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb52:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	461a      	mov	r2, r3
 800bb5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb5c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb64:	e841 2300 	strex	r3, r2, [r1]
 800bb68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1e6      	bne.n	800bb3e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3308      	adds	r3, #8
 800bb76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7a:	e853 3f00 	ldrex	r3, [r3]
 800bb7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb82:	f023 0301 	bic.w	r3, r3, #1
 800bb86:	667b      	str	r3, [r7, #100]	; 0x64
 800bb88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3308      	adds	r3, #8
 800bb8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb90:	647a      	str	r2, [r7, #68]	; 0x44
 800bb92:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb98:	e841 2300 	strex	r3, r2, [r1]
 800bb9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d1e5      	bne.n	800bb70 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3308      	adds	r3, #8
 800bbaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbae:	e853 3f00 	ldrex	r3, [r3]
 800bbb2:	623b      	str	r3, [r7, #32]
   return(result);
 800bbb4:	6a3b      	ldr	r3, [r7, #32]
 800bbb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbba:	663b      	str	r3, [r7, #96]	; 0x60
 800bbbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3308      	adds	r3, #8
 800bbc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bbc4:	633a      	str	r2, [r7, #48]	; 0x30
 800bbc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbcc:	e841 2300 	strex	r3, r2, [r1]
 800bbd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d1e5      	bne.n	800bba4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bbd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbda:	2220      	movs	r2, #32
 800bbdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d118      	bne.n	800bc1a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	e853 3f00 	ldrex	r3, [r3]
 800bbf4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f023 0310 	bic.w	r3, r3, #16
 800bbfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	461a      	mov	r2, r3
 800bc04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc06:	61fb      	str	r3, [r7, #28]
 800bc08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0a:	69b9      	ldr	r1, [r7, #24]
 800bc0c:	69fa      	ldr	r2, [r7, #28]
 800bc0e:	e841 2300 	strex	r3, r2, [r1]
 800bc12:	617b      	str	r3, [r7, #20]
   return(result);
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1e6      	bne.n	800bbe8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d107      	bne.n	800bc38 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bc2e:	4619      	mov	r1, r3
 800bc30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bc32:	f7ff f9e1 	bl	800aff8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc36:	e002      	b.n	800bc3e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800bc38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bc3a:	f7f8 f9eb 	bl	8004014 <HAL_UART_RxCpltCallback>
}
 800bc3e:	bf00      	nop
 800bc40:	3770      	adds	r7, #112	; 0x70
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b084      	sub	sp, #16
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc52:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2201      	movs	r2, #1
 800bc58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d109      	bne.n	800bc76 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bc68:	085b      	lsrs	r3, r3, #1
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f7ff f9c2 	bl	800aff8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc74:	e002      	b.n	800bc7c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f7ff f9aa 	bl	800afd0 <HAL_UART_RxHalfCpltCallback>
}
 800bc7c:	bf00      	nop
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc90:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc96:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc9e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcaa:	2b80      	cmp	r3, #128	; 0x80
 800bcac:	d109      	bne.n	800bcc2 <UART_DMAError+0x3e>
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	2b21      	cmp	r3, #33	; 0x21
 800bcb2:	d106      	bne.n	800bcc2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800bcbc:	6978      	ldr	r0, [r7, #20]
 800bcbe:	f7ff fe4b 	bl	800b958 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bccc:	2b40      	cmp	r3, #64	; 0x40
 800bcce:	d109      	bne.n	800bce4 <UART_DMAError+0x60>
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2b22      	cmp	r3, #34	; 0x22
 800bcd4:	d106      	bne.n	800bce4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800bcde:	6978      	ldr	r0, [r7, #20]
 800bce0:	f7ff fe60 	bl	800b9a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcea:	f043 0210 	orr.w	r2, r3, #16
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcf4:	6978      	ldr	r0, [r7, #20]
 800bcf6:	f7ff f975 	bl	800afe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcfa:	bf00      	nop
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bd02:	b480      	push	{r7}
 800bd04:	b085      	sub	sp, #20
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	4603      	mov	r3, r0
 800bd0a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bd10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd14:	2b84      	cmp	r3, #132	; 0x84
 800bd16:	d005      	beq.n	800bd24 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bd18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4413      	add	r3, r2
 800bd20:	3303      	adds	r3, #3
 800bd22:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bd24:	68fb      	ldr	r3, [r7, #12]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3714      	adds	r7, #20
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bd36:	f000 fae9 	bl	800c30c <vTaskStartScheduler>
  
  return osOK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bd40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd42:	b089      	sub	sp, #36	; 0x24
 800bd44:	af04      	add	r7, sp, #16
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d020      	beq.n	800bd94 <osThreadCreate+0x54>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d01c      	beq.n	800bd94 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685c      	ldr	r4, [r3, #4]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	691e      	ldr	r6, [r3, #16]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7ff ffc8 	bl	800bd02 <makeFreeRtosPriority>
 800bd72:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	695b      	ldr	r3, [r3, #20]
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bd7c:	9202      	str	r2, [sp, #8]
 800bd7e:	9301      	str	r3, [sp, #4]
 800bd80:	9100      	str	r1, [sp, #0]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	4632      	mov	r2, r6
 800bd86:	4629      	mov	r1, r5
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 f8ed 	bl	800bf68 <xTaskCreateStatic>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	60fb      	str	r3, [r7, #12]
 800bd92:	e01c      	b.n	800bdce <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	685c      	ldr	r4, [r3, #4]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bda0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7ff ffaa 	bl	800bd02 <makeFreeRtosPriority>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	f107 030c 	add.w	r3, r7, #12
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	9200      	str	r2, [sp, #0]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	4632      	mov	r2, r6
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f000 f935 	bl	800c02e <xTaskCreate>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d001      	beq.n	800bdce <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	e000      	b.n	800bdd0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bdce:	68fb      	ldr	r3, [r7, #12]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bdd8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <osDelay+0x16>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	e000      	b.n	800bdf0 <osDelay+0x18>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f000 fa55 	bl	800c2a0 <vTaskDelay>
  
  return osOK;
 800bdf6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f103 0208 	add.w	r2, r3, #8
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f04f 32ff 	mov.w	r2, #4294967295
 800be18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f103 0208 	add.w	r2, r3, #8
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f103 0208 	add.w	r2, r3, #8
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be4e:	bf00      	nop
 800be50:	370c      	adds	r7, #12
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr

0800be5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be5a:	b480      	push	{r7}
 800be5c:	b085      	sub	sp, #20
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	689a      	ldr	r2, [r3, #8]
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	683a      	ldr	r2, [r7, #0]
 800be84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	1c5a      	adds	r2, r3, #1
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	601a      	str	r2, [r3, #0]
}
 800be96:	bf00      	nop
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr

0800bea2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bea2:	b480      	push	{r7}
 800bea4:	b085      	sub	sp, #20
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb8:	d103      	bne.n	800bec2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	60fb      	str	r3, [r7, #12]
 800bec0:	e00c      	b.n	800bedc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	3308      	adds	r3, #8
 800bec6:	60fb      	str	r3, [r7, #12]
 800bec8:	e002      	b.n	800bed0 <vListInsert+0x2e>
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68ba      	ldr	r2, [r7, #8]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d2f6      	bcs.n	800beca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	685a      	ldr	r2, [r3, #4]
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	683a      	ldr	r2, [r7, #0]
 800bef6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	1c5a      	adds	r2, r3, #1
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	601a      	str	r2, [r3, #0]
}
 800bf08:	bf00      	nop
 800bf0a:	3714      	adds	r7, #20
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	6892      	ldr	r2, [r2, #8]
 800bf2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	6852      	ldr	r2, [r2, #4]
 800bf34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d103      	bne.n	800bf48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	689a      	ldr	r2, [r3, #8]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	1e5a      	subs	r2, r3, #1
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3714      	adds	r7, #20
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b08e      	sub	sp, #56	; 0x38
 800bf6c:	af04      	add	r7, sp, #16
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10c      	bne.n	800bf96 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf80:	b672      	cpsid	i
 800bf82:	f383 8811 	msr	BASEPRI, r3
 800bf86:	f3bf 8f6f 	isb	sy
 800bf8a:	f3bf 8f4f 	dsb	sy
 800bf8e:	b662      	cpsie	i
 800bf90:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bf92:	bf00      	nop
 800bf94:	e7fe      	b.n	800bf94 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10c      	bne.n	800bfb6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800bf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa0:	b672      	cpsid	i
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	b662      	cpsie	i
 800bfb0:	61fb      	str	r3, [r7, #28]
}
 800bfb2:	bf00      	nop
 800bfb4:	e7fe      	b.n	800bfb4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bfb6:	2354      	movs	r3, #84	; 0x54
 800bfb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	2b54      	cmp	r3, #84	; 0x54
 800bfbe:	d00c      	beq.n	800bfda <xTaskCreateStatic+0x72>
	__asm volatile
 800bfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc4:	b672      	cpsid	i
 800bfc6:	f383 8811 	msr	BASEPRI, r3
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	b662      	cpsie	i
 800bfd4:	61bb      	str	r3, [r7, #24]
}
 800bfd6:	bf00      	nop
 800bfd8:	e7fe      	b.n	800bfd8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bfda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d01e      	beq.n	800c020 <xTaskCreateStatic+0xb8>
 800bfe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d01b      	beq.n	800c020 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bff0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff4:	2202      	movs	r2, #2
 800bff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bffa:	2300      	movs	r3, #0
 800bffc:	9303      	str	r3, [sp, #12]
 800bffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c000:	9302      	str	r3, [sp, #8]
 800c002:	f107 0314 	add.w	r3, r7, #20
 800c006:	9301      	str	r3, [sp, #4]
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	9300      	str	r3, [sp, #0]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	68b9      	ldr	r1, [r7, #8]
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f000 f850 	bl	800c0b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c01a:	f000 f8d7 	bl	800c1cc <prvAddNewTaskToReadyList>
 800c01e:	e001      	b.n	800c024 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c020:	2300      	movs	r3, #0
 800c022:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c024:	697b      	ldr	r3, [r7, #20]
	}
 800c026:	4618      	mov	r0, r3
 800c028:	3728      	adds	r7, #40	; 0x28
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b08c      	sub	sp, #48	; 0x30
 800c032:	af04      	add	r7, sp, #16
 800c034:	60f8      	str	r0, [r7, #12]
 800c036:	60b9      	str	r1, [r7, #8]
 800c038:	603b      	str	r3, [r7, #0]
 800c03a:	4613      	mov	r3, r2
 800c03c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c03e:	88fb      	ldrh	r3, [r7, #6]
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4618      	mov	r0, r3
 800c044:	f000 feda 	bl	800cdfc <pvPortMalloc>
 800c048:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00e      	beq.n	800c06e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c050:	2054      	movs	r0, #84	; 0x54
 800c052:	f000 fed3 	bl	800cdfc <pvPortMalloc>
 800c056:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c058:	69fb      	ldr	r3, [r7, #28]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	697a      	ldr	r2, [r7, #20]
 800c062:	631a      	str	r2, [r3, #48]	; 0x30
 800c064:	e005      	b.n	800c072 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c066:	6978      	ldr	r0, [r7, #20]
 800c068:	f000 ff92 	bl	800cf90 <vPortFree>
 800c06c:	e001      	b.n	800c072 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c06e:	2300      	movs	r3, #0
 800c070:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d017      	beq.n	800c0a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	2200      	movs	r2, #0
 800c07c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c080:	88fa      	ldrh	r2, [r7, #6]
 800c082:	2300      	movs	r3, #0
 800c084:	9303      	str	r3, [sp, #12]
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	9302      	str	r3, [sp, #8]
 800c08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08c:	9301      	str	r3, [sp, #4]
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	9300      	str	r3, [sp, #0]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	68b9      	ldr	r1, [r7, #8]
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f000 f80e 	bl	800c0b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c09c:	69f8      	ldr	r0, [r7, #28]
 800c09e:	f000 f895 	bl	800c1cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	61bb      	str	r3, [r7, #24]
 800c0a6:	e002      	b.n	800c0ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c0ae:	69bb      	ldr	r3, [r7, #24]
	}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3720      	adds	r7, #32
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b088      	sub	sp, #32
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
 800c0c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0ca:	6879      	ldr	r1, [r7, #4]
 800c0cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c0d0:	440b      	add	r3, r1
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	f023 0307 	bic.w	r3, r3, #7
 800c0de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	f003 0307 	and.w	r3, r3, #7
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00c      	beq.n	800c104 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ee:	b672      	cpsid	i
 800c0f0:	f383 8811 	msr	BASEPRI, r3
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	b662      	cpsie	i
 800c0fe:	617b      	str	r3, [r7, #20]
}
 800c100:	bf00      	nop
 800c102:	e7fe      	b.n	800c102 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d01f      	beq.n	800c14a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c10a:	2300      	movs	r3, #0
 800c10c:	61fb      	str	r3, [r7, #28]
 800c10e:	e012      	b.n	800c136 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	4413      	add	r3, r2
 800c116:	7819      	ldrb	r1, [r3, #0]
 800c118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	4413      	add	r3, r2
 800c11e:	3334      	adds	r3, #52	; 0x34
 800c120:	460a      	mov	r2, r1
 800c122:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	4413      	add	r3, r2
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d006      	beq.n	800c13e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	3301      	adds	r3, #1
 800c134:	61fb      	str	r3, [r7, #28]
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	2b0f      	cmp	r3, #15
 800c13a:	d9e9      	bls.n	800c110 <prvInitialiseNewTask+0x58>
 800c13c:	e000      	b.n	800c140 <prvInitialiseNewTask+0x88>
			{
				break;
 800c13e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	2200      	movs	r2, #0
 800c144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c148:	e003      	b.n	800c152 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14c:	2200      	movs	r2, #0
 800c14e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c154:	2b06      	cmp	r3, #6
 800c156:	d901      	bls.n	800c15c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c158:	2306      	movs	r3, #6
 800c15a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c160:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c166:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16a:	2200      	movs	r2, #0
 800c16c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c170:	3304      	adds	r3, #4
 800c172:	4618      	mov	r0, r3
 800c174:	f7ff fe64 	bl	800be40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	3318      	adds	r3, #24
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7ff fe5f 	bl	800be40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c186:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	f1c3 0207 	rsb	r2, r3, #7
 800c18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c190:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c196:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	2200      	movs	r2, #0
 800c19c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	68f9      	ldr	r1, [r7, #12]
 800c1aa:	69b8      	ldr	r0, [r7, #24]
 800c1ac:	f000 fc32 	bl	800ca14 <pxPortInitialiseStack>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d002      	beq.n	800c1c2 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1c2:	bf00      	nop
 800c1c4:	3720      	adds	r7, #32
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c1d4:	f000 fd2a 	bl	800cc2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c1d8:	4b2a      	ldr	r3, [pc, #168]	; (800c284 <prvAddNewTaskToReadyList+0xb8>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	4a29      	ldr	r2, [pc, #164]	; (800c284 <prvAddNewTaskToReadyList+0xb8>)
 800c1e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c1e2:	4b29      	ldr	r3, [pc, #164]	; (800c288 <prvAddNewTaskToReadyList+0xbc>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d109      	bne.n	800c1fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c1ea:	4a27      	ldr	r2, [pc, #156]	; (800c288 <prvAddNewTaskToReadyList+0xbc>)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c1f0:	4b24      	ldr	r3, [pc, #144]	; (800c284 <prvAddNewTaskToReadyList+0xb8>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d110      	bne.n	800c21a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c1f8:	f000 fac8 	bl	800c78c <prvInitialiseTaskLists>
 800c1fc:	e00d      	b.n	800c21a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c1fe:	4b23      	ldr	r3, [pc, #140]	; (800c28c <prvAddNewTaskToReadyList+0xc0>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d109      	bne.n	800c21a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c206:	4b20      	ldr	r3, [pc, #128]	; (800c288 <prvAddNewTaskToReadyList+0xbc>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c210:	429a      	cmp	r2, r3
 800c212:	d802      	bhi.n	800c21a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c214:	4a1c      	ldr	r2, [pc, #112]	; (800c288 <prvAddNewTaskToReadyList+0xbc>)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c21a:	4b1d      	ldr	r3, [pc, #116]	; (800c290 <prvAddNewTaskToReadyList+0xc4>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3301      	adds	r3, #1
 800c220:	4a1b      	ldr	r2, [pc, #108]	; (800c290 <prvAddNewTaskToReadyList+0xc4>)
 800c222:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c228:	2201      	movs	r2, #1
 800c22a:	409a      	lsls	r2, r3
 800c22c:	4b19      	ldr	r3, [pc, #100]	; (800c294 <prvAddNewTaskToReadyList+0xc8>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4313      	orrs	r3, r2
 800c232:	4a18      	ldr	r2, [pc, #96]	; (800c294 <prvAddNewTaskToReadyList+0xc8>)
 800c234:	6013      	str	r3, [r2, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c23a:	4613      	mov	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4413      	add	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4a15      	ldr	r2, [pc, #84]	; (800c298 <prvAddNewTaskToReadyList+0xcc>)
 800c244:	441a      	add	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	3304      	adds	r3, #4
 800c24a:	4619      	mov	r1, r3
 800c24c:	4610      	mov	r0, r2
 800c24e:	f7ff fe04 	bl	800be5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c252:	f000 fd1f 	bl	800cc94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c256:	4b0d      	ldr	r3, [pc, #52]	; (800c28c <prvAddNewTaskToReadyList+0xc0>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00e      	beq.n	800c27c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c25e:	4b0a      	ldr	r3, [pc, #40]	; (800c288 <prvAddNewTaskToReadyList+0xbc>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c268:	429a      	cmp	r2, r3
 800c26a:	d207      	bcs.n	800c27c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c26c:	4b0b      	ldr	r3, [pc, #44]	; (800c29c <prvAddNewTaskToReadyList+0xd0>)
 800c26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	f3bf 8f4f 	dsb	sy
 800c278:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c27c:	bf00      	nop
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	20001fa0 	.word	0x20001fa0
 800c288:	20001ea0 	.word	0x20001ea0
 800c28c:	20001fac 	.word	0x20001fac
 800c290:	20001fbc 	.word	0x20001fbc
 800c294:	20001fa8 	.word	0x20001fa8
 800c298:	20001ea4 	.word	0x20001ea4
 800c29c:	e000ed04 	.word	0xe000ed04

0800c2a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d019      	beq.n	800c2e6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c2b2:	4b14      	ldr	r3, [pc, #80]	; (800c304 <vTaskDelay+0x64>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00c      	beq.n	800c2d4 <vTaskDelay+0x34>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2be:	b672      	cpsid	i
 800c2c0:	f383 8811 	msr	BASEPRI, r3
 800c2c4:	f3bf 8f6f 	isb	sy
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	b662      	cpsie	i
 800c2ce:	60bb      	str	r3, [r7, #8]
}
 800c2d0:	bf00      	nop
 800c2d2:	e7fe      	b.n	800c2d2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c2d4:	f000 f87e 	bl	800c3d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c2d8:	2100      	movs	r1, #0
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fb34 	bl	800c948 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c2e0:	f000 f886 	bl	800c3f0 <xTaskResumeAll>
 800c2e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d107      	bne.n	800c2fc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c2ec:	4b06      	ldr	r3, [pc, #24]	; (800c308 <vTaskDelay+0x68>)
 800c2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2f2:	601a      	str	r2, [r3, #0]
 800c2f4:	f3bf 8f4f 	dsb	sy
 800c2f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2fc:	bf00      	nop
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	20001fc8 	.word	0x20001fc8
 800c308:	e000ed04 	.word	0xe000ed04

0800c30c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b08a      	sub	sp, #40	; 0x28
 800c310:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c312:	2300      	movs	r3, #0
 800c314:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c316:	2300      	movs	r3, #0
 800c318:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c31a:	463a      	mov	r2, r7
 800c31c:	1d39      	adds	r1, r7, #4
 800c31e:	f107 0308 	add.w	r3, r7, #8
 800c322:	4618      	mov	r0, r3
 800c324:	f7f4 fd8e 	bl	8000e44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	68ba      	ldr	r2, [r7, #8]
 800c32e:	9202      	str	r2, [sp, #8]
 800c330:	9301      	str	r3, [sp, #4]
 800c332:	2300      	movs	r3, #0
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	2300      	movs	r3, #0
 800c338:	460a      	mov	r2, r1
 800c33a:	4920      	ldr	r1, [pc, #128]	; (800c3bc <vTaskStartScheduler+0xb0>)
 800c33c:	4820      	ldr	r0, [pc, #128]	; (800c3c0 <vTaskStartScheduler+0xb4>)
 800c33e:	f7ff fe13 	bl	800bf68 <xTaskCreateStatic>
 800c342:	4603      	mov	r3, r0
 800c344:	4a1f      	ldr	r2, [pc, #124]	; (800c3c4 <vTaskStartScheduler+0xb8>)
 800c346:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c348:	4b1e      	ldr	r3, [pc, #120]	; (800c3c4 <vTaskStartScheduler+0xb8>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d002      	beq.n	800c356 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c350:	2301      	movs	r3, #1
 800c352:	617b      	str	r3, [r7, #20]
 800c354:	e001      	b.n	800c35a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c356:	2300      	movs	r3, #0
 800c358:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d118      	bne.n	800c392 <vTaskStartScheduler+0x86>
	__asm volatile
 800c360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c364:	b672      	cpsid	i
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	b662      	cpsie	i
 800c374:	613b      	str	r3, [r7, #16]
}
 800c376:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c378:	4b13      	ldr	r3, [pc, #76]	; (800c3c8 <vTaskStartScheduler+0xbc>)
 800c37a:	f04f 32ff 	mov.w	r2, #4294967295
 800c37e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c380:	4b12      	ldr	r3, [pc, #72]	; (800c3cc <vTaskStartScheduler+0xc0>)
 800c382:	2201      	movs	r2, #1
 800c384:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c386:	4b12      	ldr	r3, [pc, #72]	; (800c3d0 <vTaskStartScheduler+0xc4>)
 800c388:	2200      	movs	r2, #0
 800c38a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c38c:	f000 fbd0 	bl	800cb30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c390:	e010      	b.n	800c3b4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c398:	d10c      	bne.n	800c3b4 <vTaskStartScheduler+0xa8>
	__asm volatile
 800c39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39e:	b672      	cpsid	i
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	b662      	cpsie	i
 800c3ae:	60fb      	str	r3, [r7, #12]
}
 800c3b0:	bf00      	nop
 800c3b2:	e7fe      	b.n	800c3b2 <vTaskStartScheduler+0xa6>
}
 800c3b4:	bf00      	nop
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	0800f068 	.word	0x0800f068
 800c3c0:	0800c75d 	.word	0x0800c75d
 800c3c4:	20001fc4 	.word	0x20001fc4
 800c3c8:	20001fc0 	.word	0x20001fc0
 800c3cc:	20001fac 	.word	0x20001fac
 800c3d0:	20001fa4 	.word	0x20001fa4

0800c3d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c3d8:	4b04      	ldr	r3, [pc, #16]	; (800c3ec <vTaskSuspendAll+0x18>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	4a03      	ldr	r2, [pc, #12]	; (800c3ec <vTaskSuspendAll+0x18>)
 800c3e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c3e2:	bf00      	nop
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr
 800c3ec:	20001fc8 	.word	0x20001fc8

0800c3f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c3fe:	4b42      	ldr	r3, [pc, #264]	; (800c508 <xTaskResumeAll+0x118>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d10c      	bne.n	800c420 <xTaskResumeAll+0x30>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40a:	b672      	cpsid	i
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	b662      	cpsie	i
 800c41a:	603b      	str	r3, [r7, #0]
}
 800c41c:	bf00      	nop
 800c41e:	e7fe      	b.n	800c41e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c420:	f000 fc04 	bl	800cc2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c424:	4b38      	ldr	r3, [pc, #224]	; (800c508 <xTaskResumeAll+0x118>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	3b01      	subs	r3, #1
 800c42a:	4a37      	ldr	r2, [pc, #220]	; (800c508 <xTaskResumeAll+0x118>)
 800c42c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c42e:	4b36      	ldr	r3, [pc, #216]	; (800c508 <xTaskResumeAll+0x118>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d161      	bne.n	800c4fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c436:	4b35      	ldr	r3, [pc, #212]	; (800c50c <xTaskResumeAll+0x11c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d05d      	beq.n	800c4fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c43e:	e02e      	b.n	800c49e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c440:	4b33      	ldr	r3, [pc, #204]	; (800c510 <xTaskResumeAll+0x120>)
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	3318      	adds	r3, #24
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7ff fd61 	bl	800bf14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	3304      	adds	r3, #4
 800c456:	4618      	mov	r0, r3
 800c458:	f7ff fd5c 	bl	800bf14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c460:	2201      	movs	r2, #1
 800c462:	409a      	lsls	r2, r3
 800c464:	4b2b      	ldr	r3, [pc, #172]	; (800c514 <xTaskResumeAll+0x124>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4313      	orrs	r3, r2
 800c46a:	4a2a      	ldr	r2, [pc, #168]	; (800c514 <xTaskResumeAll+0x124>)
 800c46c:	6013      	str	r3, [r2, #0]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c472:	4613      	mov	r3, r2
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4413      	add	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4a27      	ldr	r2, [pc, #156]	; (800c518 <xTaskResumeAll+0x128>)
 800c47c:	441a      	add	r2, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3304      	adds	r3, #4
 800c482:	4619      	mov	r1, r3
 800c484:	4610      	mov	r0, r2
 800c486:	f7ff fce8 	bl	800be5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c48e:	4b23      	ldr	r3, [pc, #140]	; (800c51c <xTaskResumeAll+0x12c>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c494:	429a      	cmp	r2, r3
 800c496:	d302      	bcc.n	800c49e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c498:	4b21      	ldr	r3, [pc, #132]	; (800c520 <xTaskResumeAll+0x130>)
 800c49a:	2201      	movs	r2, #1
 800c49c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c49e:	4b1c      	ldr	r3, [pc, #112]	; (800c510 <xTaskResumeAll+0x120>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1cc      	bne.n	800c440 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d001      	beq.n	800c4b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c4ac:	f000 fa0e 	bl	800c8cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c4b0:	4b1c      	ldr	r3, [pc, #112]	; (800c524 <xTaskResumeAll+0x134>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d010      	beq.n	800c4de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c4bc:	f000 f836 	bl	800c52c <xTaskIncrementTick>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d002      	beq.n	800c4cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c4c6:	4b16      	ldr	r3, [pc, #88]	; (800c520 <xTaskResumeAll+0x130>)
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1f1      	bne.n	800c4bc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800c4d8:	4b12      	ldr	r3, [pc, #72]	; (800c524 <xTaskResumeAll+0x134>)
 800c4da:	2200      	movs	r2, #0
 800c4dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c4de:	4b10      	ldr	r3, [pc, #64]	; (800c520 <xTaskResumeAll+0x130>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d009      	beq.n	800c4fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c4ea:	4b0f      	ldr	r3, [pc, #60]	; (800c528 <xTaskResumeAll+0x138>)
 800c4ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f0:	601a      	str	r2, [r3, #0]
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4fa:	f000 fbcb 	bl	800cc94 <vPortExitCritical>

	return xAlreadyYielded;
 800c4fe:	68bb      	ldr	r3, [r7, #8]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	20001fc8 	.word	0x20001fc8
 800c50c:	20001fa0 	.word	0x20001fa0
 800c510:	20001f60 	.word	0x20001f60
 800c514:	20001fa8 	.word	0x20001fa8
 800c518:	20001ea4 	.word	0x20001ea4
 800c51c:	20001ea0 	.word	0x20001ea0
 800c520:	20001fb4 	.word	0x20001fb4
 800c524:	20001fb0 	.word	0x20001fb0
 800c528:	e000ed04 	.word	0xe000ed04

0800c52c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c532:	2300      	movs	r3, #0
 800c534:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c536:	4b4f      	ldr	r3, [pc, #316]	; (800c674 <xTaskIncrementTick+0x148>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f040 808a 	bne.w	800c654 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c540:	4b4d      	ldr	r3, [pc, #308]	; (800c678 <xTaskIncrementTick+0x14c>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	3301      	adds	r3, #1
 800c546:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c548:	4a4b      	ldr	r2, [pc, #300]	; (800c678 <xTaskIncrementTick+0x14c>)
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d122      	bne.n	800c59a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c554:	4b49      	ldr	r3, [pc, #292]	; (800c67c <xTaskIncrementTick+0x150>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00c      	beq.n	800c578 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c562:	b672      	cpsid	i
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	b662      	cpsie	i
 800c572:	603b      	str	r3, [r7, #0]
}
 800c574:	bf00      	nop
 800c576:	e7fe      	b.n	800c576 <xTaskIncrementTick+0x4a>
 800c578:	4b40      	ldr	r3, [pc, #256]	; (800c67c <xTaskIncrementTick+0x150>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	60fb      	str	r3, [r7, #12]
 800c57e:	4b40      	ldr	r3, [pc, #256]	; (800c680 <xTaskIncrementTick+0x154>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a3e      	ldr	r2, [pc, #248]	; (800c67c <xTaskIncrementTick+0x150>)
 800c584:	6013      	str	r3, [r2, #0]
 800c586:	4a3e      	ldr	r2, [pc, #248]	; (800c680 <xTaskIncrementTick+0x154>)
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	6013      	str	r3, [r2, #0]
 800c58c:	4b3d      	ldr	r3, [pc, #244]	; (800c684 <xTaskIncrementTick+0x158>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3301      	adds	r3, #1
 800c592:	4a3c      	ldr	r2, [pc, #240]	; (800c684 <xTaskIncrementTick+0x158>)
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	f000 f999 	bl	800c8cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c59a:	4b3b      	ldr	r3, [pc, #236]	; (800c688 <xTaskIncrementTick+0x15c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	693a      	ldr	r2, [r7, #16]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d348      	bcc.n	800c636 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5a4:	4b35      	ldr	r3, [pc, #212]	; (800c67c <xTaskIncrementTick+0x150>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d104      	bne.n	800c5b8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5ae:	4b36      	ldr	r3, [pc, #216]	; (800c688 <xTaskIncrementTick+0x15c>)
 800c5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b4:	601a      	str	r2, [r3, #0]
					break;
 800c5b6:	e03e      	b.n	800c636 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5b8:	4b30      	ldr	r3, [pc, #192]	; (800c67c <xTaskIncrementTick+0x150>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c5c8:	693a      	ldr	r2, [r7, #16]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d203      	bcs.n	800c5d8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c5d0:	4a2d      	ldr	r2, [pc, #180]	; (800c688 <xTaskIncrementTick+0x15c>)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c5d6:	e02e      	b.n	800c636 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	3304      	adds	r3, #4
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff fc99 	bl	800bf14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d004      	beq.n	800c5f4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	3318      	adds	r3, #24
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7ff fc90 	bl	800bf14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	409a      	lsls	r2, r3
 800c5fc:	4b23      	ldr	r3, [pc, #140]	; (800c68c <xTaskIncrementTick+0x160>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4313      	orrs	r3, r2
 800c602:	4a22      	ldr	r2, [pc, #136]	; (800c68c <xTaskIncrementTick+0x160>)
 800c604:	6013      	str	r3, [r2, #0]
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c60a:	4613      	mov	r3, r2
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	4a1f      	ldr	r2, [pc, #124]	; (800c690 <xTaskIncrementTick+0x164>)
 800c614:	441a      	add	r2, r3
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	3304      	adds	r3, #4
 800c61a:	4619      	mov	r1, r3
 800c61c:	4610      	mov	r0, r2
 800c61e:	f7ff fc1c 	bl	800be5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c626:	4b1b      	ldr	r3, [pc, #108]	; (800c694 <xTaskIncrementTick+0x168>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d3b9      	bcc.n	800c5a4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c630:	2301      	movs	r3, #1
 800c632:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c634:	e7b6      	b.n	800c5a4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c636:	4b17      	ldr	r3, [pc, #92]	; (800c694 <xTaskIncrementTick+0x168>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c63c:	4914      	ldr	r1, [pc, #80]	; (800c690 <xTaskIncrementTick+0x164>)
 800c63e:	4613      	mov	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4413      	add	r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	440b      	add	r3, r1
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d907      	bls.n	800c65e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800c64e:	2301      	movs	r3, #1
 800c650:	617b      	str	r3, [r7, #20]
 800c652:	e004      	b.n	800c65e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c654:	4b10      	ldr	r3, [pc, #64]	; (800c698 <xTaskIncrementTick+0x16c>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	3301      	adds	r3, #1
 800c65a:	4a0f      	ldr	r2, [pc, #60]	; (800c698 <xTaskIncrementTick+0x16c>)
 800c65c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c65e:	4b0f      	ldr	r3, [pc, #60]	; (800c69c <xTaskIncrementTick+0x170>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d001      	beq.n	800c66a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800c666:	2301      	movs	r3, #1
 800c668:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c66a:	697b      	ldr	r3, [r7, #20]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3718      	adds	r7, #24
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	20001fc8 	.word	0x20001fc8
 800c678:	20001fa4 	.word	0x20001fa4
 800c67c:	20001f58 	.word	0x20001f58
 800c680:	20001f5c 	.word	0x20001f5c
 800c684:	20001fb8 	.word	0x20001fb8
 800c688:	20001fc0 	.word	0x20001fc0
 800c68c:	20001fa8 	.word	0x20001fa8
 800c690:	20001ea4 	.word	0x20001ea4
 800c694:	20001ea0 	.word	0x20001ea0
 800c698:	20001fb0 	.word	0x20001fb0
 800c69c:	20001fb4 	.word	0x20001fb4

0800c6a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b087      	sub	sp, #28
 800c6a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c6a6:	4b28      	ldr	r3, [pc, #160]	; (800c748 <vTaskSwitchContext+0xa8>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d003      	beq.n	800c6b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c6ae:	4b27      	ldr	r3, [pc, #156]	; (800c74c <vTaskSwitchContext+0xac>)
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c6b4:	e041      	b.n	800c73a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c6b6:	4b25      	ldr	r3, [pc, #148]	; (800c74c <vTaskSwitchContext+0xac>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6bc:	4b24      	ldr	r3, [pc, #144]	; (800c750 <vTaskSwitchContext+0xb0>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	fab3 f383 	clz	r3, r3
 800c6c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c6ca:	7afb      	ldrb	r3, [r7, #11]
 800c6cc:	f1c3 031f 	rsb	r3, r3, #31
 800c6d0:	617b      	str	r3, [r7, #20]
 800c6d2:	4920      	ldr	r1, [pc, #128]	; (800c754 <vTaskSwitchContext+0xb4>)
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4413      	add	r3, r2
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	440b      	add	r3, r1
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10c      	bne.n	800c700 <vTaskSwitchContext+0x60>
	__asm volatile
 800c6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ea:	b672      	cpsid	i
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	b662      	cpsie	i
 800c6fa:	607b      	str	r3, [r7, #4]
}
 800c6fc:	bf00      	nop
 800c6fe:	e7fe      	b.n	800c6fe <vTaskSwitchContext+0x5e>
 800c700:	697a      	ldr	r2, [r7, #20]
 800c702:	4613      	mov	r3, r2
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4413      	add	r3, r2
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	4a12      	ldr	r2, [pc, #72]	; (800c754 <vTaskSwitchContext+0xb4>)
 800c70c:	4413      	add	r3, r2
 800c70e:	613b      	str	r3, [r7, #16]
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	605a      	str	r2, [r3, #4]
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	3308      	adds	r3, #8
 800c722:	429a      	cmp	r2, r3
 800c724:	d104      	bne.n	800c730 <vTaskSwitchContext+0x90>
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	605a      	str	r2, [r3, #4]
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	4a08      	ldr	r2, [pc, #32]	; (800c758 <vTaskSwitchContext+0xb8>)
 800c738:	6013      	str	r3, [r2, #0]
}
 800c73a:	bf00      	nop
 800c73c:	371c      	adds	r7, #28
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop
 800c748:	20001fc8 	.word	0x20001fc8
 800c74c:	20001fb4 	.word	0x20001fb4
 800c750:	20001fa8 	.word	0x20001fa8
 800c754:	20001ea4 	.word	0x20001ea4
 800c758:	20001ea0 	.word	0x20001ea0

0800c75c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c764:	f000 f852 	bl	800c80c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c768:	4b06      	ldr	r3, [pc, #24]	; (800c784 <prvIdleTask+0x28>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d9f9      	bls.n	800c764 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c770:	4b05      	ldr	r3, [pc, #20]	; (800c788 <prvIdleTask+0x2c>)
 800c772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c776:	601a      	str	r2, [r3, #0]
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c780:	e7f0      	b.n	800c764 <prvIdleTask+0x8>
 800c782:	bf00      	nop
 800c784:	20001ea4 	.word	0x20001ea4
 800c788:	e000ed04 	.word	0xe000ed04

0800c78c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c792:	2300      	movs	r3, #0
 800c794:	607b      	str	r3, [r7, #4]
 800c796:	e00c      	b.n	800c7b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	4613      	mov	r3, r2
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	4413      	add	r3, r2
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	4a12      	ldr	r2, [pc, #72]	; (800c7ec <prvInitialiseTaskLists+0x60>)
 800c7a4:	4413      	add	r3, r2
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7ff fb2a 	bl	800be00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	607b      	str	r3, [r7, #4]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2b06      	cmp	r3, #6
 800c7b6:	d9ef      	bls.n	800c798 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c7b8:	480d      	ldr	r0, [pc, #52]	; (800c7f0 <prvInitialiseTaskLists+0x64>)
 800c7ba:	f7ff fb21 	bl	800be00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c7be:	480d      	ldr	r0, [pc, #52]	; (800c7f4 <prvInitialiseTaskLists+0x68>)
 800c7c0:	f7ff fb1e 	bl	800be00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c7c4:	480c      	ldr	r0, [pc, #48]	; (800c7f8 <prvInitialiseTaskLists+0x6c>)
 800c7c6:	f7ff fb1b 	bl	800be00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c7ca:	480c      	ldr	r0, [pc, #48]	; (800c7fc <prvInitialiseTaskLists+0x70>)
 800c7cc:	f7ff fb18 	bl	800be00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c7d0:	480b      	ldr	r0, [pc, #44]	; (800c800 <prvInitialiseTaskLists+0x74>)
 800c7d2:	f7ff fb15 	bl	800be00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c7d6:	4b0b      	ldr	r3, [pc, #44]	; (800c804 <prvInitialiseTaskLists+0x78>)
 800c7d8:	4a05      	ldr	r2, [pc, #20]	; (800c7f0 <prvInitialiseTaskLists+0x64>)
 800c7da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c7dc:	4b0a      	ldr	r3, [pc, #40]	; (800c808 <prvInitialiseTaskLists+0x7c>)
 800c7de:	4a05      	ldr	r2, [pc, #20]	; (800c7f4 <prvInitialiseTaskLists+0x68>)
 800c7e0:	601a      	str	r2, [r3, #0]
}
 800c7e2:	bf00      	nop
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	20001ea4 	.word	0x20001ea4
 800c7f0:	20001f30 	.word	0x20001f30
 800c7f4:	20001f44 	.word	0x20001f44
 800c7f8:	20001f60 	.word	0x20001f60
 800c7fc:	20001f74 	.word	0x20001f74
 800c800:	20001f8c 	.word	0x20001f8c
 800c804:	20001f58 	.word	0x20001f58
 800c808:	20001f5c 	.word	0x20001f5c

0800c80c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c812:	e019      	b.n	800c848 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c814:	f000 fa0a 	bl	800cc2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c818:	4b10      	ldr	r3, [pc, #64]	; (800c85c <prvCheckTasksWaitingTermination+0x50>)
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	3304      	adds	r3, #4
 800c824:	4618      	mov	r0, r3
 800c826:	f7ff fb75 	bl	800bf14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c82a:	4b0d      	ldr	r3, [pc, #52]	; (800c860 <prvCheckTasksWaitingTermination+0x54>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	3b01      	subs	r3, #1
 800c830:	4a0b      	ldr	r2, [pc, #44]	; (800c860 <prvCheckTasksWaitingTermination+0x54>)
 800c832:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c834:	4b0b      	ldr	r3, [pc, #44]	; (800c864 <prvCheckTasksWaitingTermination+0x58>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	3b01      	subs	r3, #1
 800c83a:	4a0a      	ldr	r2, [pc, #40]	; (800c864 <prvCheckTasksWaitingTermination+0x58>)
 800c83c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c83e:	f000 fa29 	bl	800cc94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f810 	bl	800c868 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c848:	4b06      	ldr	r3, [pc, #24]	; (800c864 <prvCheckTasksWaitingTermination+0x58>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1e1      	bne.n	800c814 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c850:	bf00      	nop
 800c852:	bf00      	nop
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	20001f74 	.word	0x20001f74
 800c860:	20001fa0 	.word	0x20001fa0
 800c864:	20001f88 	.word	0x20001f88

0800c868 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c876:	2b00      	cmp	r3, #0
 800c878:	d108      	bne.n	800c88c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c87e:	4618      	mov	r0, r3
 800c880:	f000 fb86 	bl	800cf90 <vPortFree>
				vPortFree( pxTCB );
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 fb83 	bl	800cf90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c88a:	e01a      	b.n	800c8c2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c892:	2b01      	cmp	r3, #1
 800c894:	d103      	bne.n	800c89e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fb7a 	bl	800cf90 <vPortFree>
	}
 800c89c:	e011      	b.n	800c8c2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d00c      	beq.n	800c8c2 <prvDeleteTCB+0x5a>
	__asm volatile
 800c8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ac:	b672      	cpsid	i
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	b662      	cpsie	i
 800c8bc:	60fb      	str	r3, [r7, #12]
}
 800c8be:	bf00      	nop
 800c8c0:	e7fe      	b.n	800c8c0 <prvDeleteTCB+0x58>
	}
 800c8c2:	bf00      	nop
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
	...

0800c8cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8d2:	4b0c      	ldr	r3, [pc, #48]	; (800c904 <prvResetNextTaskUnblockTime+0x38>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d104      	bne.n	800c8e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c8dc:	4b0a      	ldr	r3, [pc, #40]	; (800c908 <prvResetNextTaskUnblockTime+0x3c>)
 800c8de:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c8e4:	e008      	b.n	800c8f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8e6:	4b07      	ldr	r3, [pc, #28]	; (800c904 <prvResetNextTaskUnblockTime+0x38>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	4a04      	ldr	r2, [pc, #16]	; (800c908 <prvResetNextTaskUnblockTime+0x3c>)
 800c8f6:	6013      	str	r3, [r2, #0]
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr
 800c904:	20001f58 	.word	0x20001f58
 800c908:	20001fc0 	.word	0x20001fc0

0800c90c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c912:	4b0b      	ldr	r3, [pc, #44]	; (800c940 <xTaskGetSchedulerState+0x34>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d102      	bne.n	800c920 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c91a:	2301      	movs	r3, #1
 800c91c:	607b      	str	r3, [r7, #4]
 800c91e:	e008      	b.n	800c932 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c920:	4b08      	ldr	r3, [pc, #32]	; (800c944 <xTaskGetSchedulerState+0x38>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d102      	bne.n	800c92e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c928:	2302      	movs	r3, #2
 800c92a:	607b      	str	r3, [r7, #4]
 800c92c:	e001      	b.n	800c932 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c92e:	2300      	movs	r3, #0
 800c930:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c932:	687b      	ldr	r3, [r7, #4]
	}
 800c934:	4618      	mov	r0, r3
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr
 800c940:	20001fac 	.word	0x20001fac
 800c944:	20001fc8 	.word	0x20001fc8

0800c948 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c952:	4b29      	ldr	r3, [pc, #164]	; (800c9f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c958:	4b28      	ldr	r3, [pc, #160]	; (800c9fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3304      	adds	r3, #4
 800c95e:	4618      	mov	r0, r3
 800c960:	f7ff fad8 	bl	800bf14 <uxListRemove>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10b      	bne.n	800c982 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c96a:	4b24      	ldr	r3, [pc, #144]	; (800c9fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c970:	2201      	movs	r2, #1
 800c972:	fa02 f303 	lsl.w	r3, r2, r3
 800c976:	43da      	mvns	r2, r3
 800c978:	4b21      	ldr	r3, [pc, #132]	; (800ca00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4013      	ands	r3, r2
 800c97e:	4a20      	ldr	r2, [pc, #128]	; (800ca00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c980:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c988:	d10a      	bne.n	800c9a0 <prvAddCurrentTaskToDelayedList+0x58>
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d007      	beq.n	800c9a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c990:	4b1a      	ldr	r3, [pc, #104]	; (800c9fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	3304      	adds	r3, #4
 800c996:	4619      	mov	r1, r3
 800c998:	481a      	ldr	r0, [pc, #104]	; (800ca04 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c99a:	f7ff fa5e 	bl	800be5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c99e:	e026      	b.n	800c9ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c9a8:	4b14      	ldr	r3, [pc, #80]	; (800c9fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d209      	bcs.n	800c9cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9b8:	4b13      	ldr	r3, [pc, #76]	; (800ca08 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	4b0f      	ldr	r3, [pc, #60]	; (800c9fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	3304      	adds	r3, #4
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	4610      	mov	r0, r2
 800c9c6:	f7ff fa6c 	bl	800bea2 <vListInsert>
}
 800c9ca:	e010      	b.n	800c9ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9cc:	4b0f      	ldr	r3, [pc, #60]	; (800ca0c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	4b0a      	ldr	r3, [pc, #40]	; (800c9fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	4610      	mov	r0, r2
 800c9da:	f7ff fa62 	bl	800bea2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c9de:	4b0c      	ldr	r3, [pc, #48]	; (800ca10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d202      	bcs.n	800c9ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c9e8:	4a09      	ldr	r2, [pc, #36]	; (800ca10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	6013      	str	r3, [r2, #0]
}
 800c9ee:	bf00      	nop
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	20001fa4 	.word	0x20001fa4
 800c9fc:	20001ea0 	.word	0x20001ea0
 800ca00:	20001fa8 	.word	0x20001fa8
 800ca04:	20001f8c 	.word	0x20001f8c
 800ca08:	20001f5c 	.word	0x20001f5c
 800ca0c:	20001f58 	.word	0x20001f58
 800ca10:	20001fc0 	.word	0x20001fc0

0800ca14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	3b04      	subs	r3, #4
 800ca24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3b04      	subs	r3, #4
 800ca32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	f023 0201 	bic.w	r2, r3, #1
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	3b04      	subs	r3, #4
 800ca42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca44:	4a0c      	ldr	r2, [pc, #48]	; (800ca78 <pxPortInitialiseStack+0x64>)
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3b14      	subs	r3, #20
 800ca4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	3b04      	subs	r3, #4
 800ca5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f06f 0202 	mvn.w	r2, #2
 800ca62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3b20      	subs	r3, #32
 800ca68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3714      	adds	r7, #20
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr
 800ca78:	0800ca7d 	.word	0x0800ca7d

0800ca7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca82:	2300      	movs	r3, #0
 800ca84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca86:	4b14      	ldr	r3, [pc, #80]	; (800cad8 <prvTaskExitError+0x5c>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8e:	d00c      	beq.n	800caaa <prvTaskExitError+0x2e>
	__asm volatile
 800ca90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca94:	b672      	cpsid	i
 800ca96:	f383 8811 	msr	BASEPRI, r3
 800ca9a:	f3bf 8f6f 	isb	sy
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	b662      	cpsie	i
 800caa4:	60fb      	str	r3, [r7, #12]
}
 800caa6:	bf00      	nop
 800caa8:	e7fe      	b.n	800caa8 <prvTaskExitError+0x2c>
	__asm volatile
 800caaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caae:	b672      	cpsid	i
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	b662      	cpsie	i
 800cabe:	60bb      	str	r3, [r7, #8]
}
 800cac0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cac2:	bf00      	nop
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d0fc      	beq.n	800cac4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800caca:	bf00      	nop
 800cacc:	bf00      	nop
 800cace:	3714      	adds	r7, #20
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr
 800cad8:	20000020 	.word	0x20000020
 800cadc:	00000000 	.word	0x00000000

0800cae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cae0:	4b07      	ldr	r3, [pc, #28]	; (800cb00 <pxCurrentTCBConst2>)
 800cae2:	6819      	ldr	r1, [r3, #0]
 800cae4:	6808      	ldr	r0, [r1, #0]
 800cae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caea:	f380 8809 	msr	PSP, r0
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f04f 0000 	mov.w	r0, #0
 800caf6:	f380 8811 	msr	BASEPRI, r0
 800cafa:	4770      	bx	lr
 800cafc:	f3af 8000 	nop.w

0800cb00 <pxCurrentTCBConst2>:
 800cb00:	20001ea0 	.word	0x20001ea0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop

0800cb08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb08:	4808      	ldr	r0, [pc, #32]	; (800cb2c <prvPortStartFirstTask+0x24>)
 800cb0a:	6800      	ldr	r0, [r0, #0]
 800cb0c:	6800      	ldr	r0, [r0, #0]
 800cb0e:	f380 8808 	msr	MSP, r0
 800cb12:	f04f 0000 	mov.w	r0, #0
 800cb16:	f380 8814 	msr	CONTROL, r0
 800cb1a:	b662      	cpsie	i
 800cb1c:	b661      	cpsie	f
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	df00      	svc	0
 800cb28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb2a:	bf00      	nop
 800cb2c:	e000ed08 	.word	0xe000ed08

0800cb30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb36:	4b37      	ldr	r3, [pc, #220]	; (800cc14 <xPortStartScheduler+0xe4>)
 800cb38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	22ff      	movs	r2, #255	; 0xff
 800cb46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb50:	78fb      	ldrb	r3, [r7, #3]
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb58:	b2da      	uxtb	r2, r3
 800cb5a:	4b2f      	ldr	r3, [pc, #188]	; (800cc18 <xPortStartScheduler+0xe8>)
 800cb5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb5e:	4b2f      	ldr	r3, [pc, #188]	; (800cc1c <xPortStartScheduler+0xec>)
 800cb60:	2207      	movs	r2, #7
 800cb62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb64:	e009      	b.n	800cb7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cb66:	4b2d      	ldr	r3, [pc, #180]	; (800cc1c <xPortStartScheduler+0xec>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	3b01      	subs	r3, #1
 800cb6c:	4a2b      	ldr	r2, [pc, #172]	; (800cc1c <xPortStartScheduler+0xec>)
 800cb6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb70:	78fb      	ldrb	r3, [r7, #3]
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	005b      	lsls	r3, r3, #1
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb7a:	78fb      	ldrb	r3, [r7, #3]
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb82:	2b80      	cmp	r3, #128	; 0x80
 800cb84:	d0ef      	beq.n	800cb66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb86:	4b25      	ldr	r3, [pc, #148]	; (800cc1c <xPortStartScheduler+0xec>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f1c3 0307 	rsb	r3, r3, #7
 800cb8e:	2b04      	cmp	r3, #4
 800cb90:	d00c      	beq.n	800cbac <xPortStartScheduler+0x7c>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	b672      	cpsid	i
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	b662      	cpsie	i
 800cba6:	60bb      	str	r3, [r7, #8]
}
 800cba8:	bf00      	nop
 800cbaa:	e7fe      	b.n	800cbaa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbac:	4b1b      	ldr	r3, [pc, #108]	; (800cc1c <xPortStartScheduler+0xec>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	021b      	lsls	r3, r3, #8
 800cbb2:	4a1a      	ldr	r2, [pc, #104]	; (800cc1c <xPortStartScheduler+0xec>)
 800cbb4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cbb6:	4b19      	ldr	r3, [pc, #100]	; (800cc1c <xPortStartScheduler+0xec>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cbbe:	4a17      	ldr	r2, [pc, #92]	; (800cc1c <xPortStartScheduler+0xec>)
 800cbc0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	b2da      	uxtb	r2, r3
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbca:	4b15      	ldr	r3, [pc, #84]	; (800cc20 <xPortStartScheduler+0xf0>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a14      	ldr	r2, [pc, #80]	; (800cc20 <xPortStartScheduler+0xf0>)
 800cbd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cbd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cbd6:	4b12      	ldr	r3, [pc, #72]	; (800cc20 <xPortStartScheduler+0xf0>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a11      	ldr	r2, [pc, #68]	; (800cc20 <xPortStartScheduler+0xf0>)
 800cbdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cbe0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cbe2:	f000 f8dd 	bl	800cda0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cbe6:	4b0f      	ldr	r3, [pc, #60]	; (800cc24 <xPortStartScheduler+0xf4>)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cbec:	f000 f8fc 	bl	800cde8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cbf0:	4b0d      	ldr	r3, [pc, #52]	; (800cc28 <xPortStartScheduler+0xf8>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a0c      	ldr	r2, [pc, #48]	; (800cc28 <xPortStartScheduler+0xf8>)
 800cbf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cbfa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cbfc:	f7ff ff84 	bl	800cb08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc00:	f7ff fd4e 	bl	800c6a0 <vTaskSwitchContext>
	prvTaskExitError();
 800cc04:	f7ff ff3a 	bl	800ca7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc08:	2300      	movs	r3, #0
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	e000e400 	.word	0xe000e400
 800cc18:	20001fcc 	.word	0x20001fcc
 800cc1c:	20001fd0 	.word	0x20001fd0
 800cc20:	e000ed20 	.word	0xe000ed20
 800cc24:	20000020 	.word	0x20000020
 800cc28:	e000ef34 	.word	0xe000ef34

0800cc2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
	__asm volatile
 800cc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc36:	b672      	cpsid	i
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	b662      	cpsie	i
 800cc46:	607b      	str	r3, [r7, #4]
}
 800cc48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc4a:	4b10      	ldr	r3, [pc, #64]	; (800cc8c <vPortEnterCritical+0x60>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	4a0e      	ldr	r2, [pc, #56]	; (800cc8c <vPortEnterCritical+0x60>)
 800cc52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc54:	4b0d      	ldr	r3, [pc, #52]	; (800cc8c <vPortEnterCritical+0x60>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d111      	bne.n	800cc80 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc5c:	4b0c      	ldr	r3, [pc, #48]	; (800cc90 <vPortEnterCritical+0x64>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00c      	beq.n	800cc80 <vPortEnterCritical+0x54>
	__asm volatile
 800cc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6a:	b672      	cpsid	i
 800cc6c:	f383 8811 	msr	BASEPRI, r3
 800cc70:	f3bf 8f6f 	isb	sy
 800cc74:	f3bf 8f4f 	dsb	sy
 800cc78:	b662      	cpsie	i
 800cc7a:	603b      	str	r3, [r7, #0]
}
 800cc7c:	bf00      	nop
 800cc7e:	e7fe      	b.n	800cc7e <vPortEnterCritical+0x52>
	}
}
 800cc80:	bf00      	nop
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	20000020 	.word	0x20000020
 800cc90:	e000ed04 	.word	0xe000ed04

0800cc94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc9a:	4b13      	ldr	r3, [pc, #76]	; (800cce8 <vPortExitCritical+0x54>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d10c      	bne.n	800ccbc <vPortExitCritical+0x28>
	__asm volatile
 800cca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca6:	b672      	cpsid	i
 800cca8:	f383 8811 	msr	BASEPRI, r3
 800ccac:	f3bf 8f6f 	isb	sy
 800ccb0:	f3bf 8f4f 	dsb	sy
 800ccb4:	b662      	cpsie	i
 800ccb6:	607b      	str	r3, [r7, #4]
}
 800ccb8:	bf00      	nop
 800ccba:	e7fe      	b.n	800ccba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ccbc:	4b0a      	ldr	r3, [pc, #40]	; (800cce8 <vPortExitCritical+0x54>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	4a09      	ldr	r2, [pc, #36]	; (800cce8 <vPortExitCritical+0x54>)
 800ccc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ccc6:	4b08      	ldr	r3, [pc, #32]	; (800cce8 <vPortExitCritical+0x54>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d105      	bne.n	800ccda <vPortExitCritical+0x46>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ccd8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ccda:	bf00      	nop
 800ccdc:	370c      	adds	r7, #12
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	20000020 	.word	0x20000020
 800ccec:	00000000 	.word	0x00000000

0800ccf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ccf0:	f3ef 8009 	mrs	r0, PSP
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	4b15      	ldr	r3, [pc, #84]	; (800cd50 <pxCurrentTCBConst>)
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	f01e 0f10 	tst.w	lr, #16
 800cd00:	bf08      	it	eq
 800cd02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0a:	6010      	str	r0, [r2, #0]
 800cd0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd14:	b672      	cpsid	i
 800cd16:	f380 8811 	msr	BASEPRI, r0
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	b662      	cpsie	i
 800cd24:	f7ff fcbc 	bl	800c6a0 <vTaskSwitchContext>
 800cd28:	f04f 0000 	mov.w	r0, #0
 800cd2c:	f380 8811 	msr	BASEPRI, r0
 800cd30:	bc09      	pop	{r0, r3}
 800cd32:	6819      	ldr	r1, [r3, #0]
 800cd34:	6808      	ldr	r0, [r1, #0]
 800cd36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3a:	f01e 0f10 	tst.w	lr, #16
 800cd3e:	bf08      	it	eq
 800cd40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd44:	f380 8809 	msr	PSP, r0
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop

0800cd50 <pxCurrentTCBConst>:
 800cd50:	20001ea0 	.word	0x20001ea0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd54:	bf00      	nop
 800cd56:	bf00      	nop

0800cd58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	b672      	cpsid	i
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	b662      	cpsie	i
 800cd72:	607b      	str	r3, [r7, #4]
}
 800cd74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd76:	f7ff fbd9 	bl	800c52c <xTaskIncrementTick>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d003      	beq.n	800cd88 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd80:	4b06      	ldr	r3, [pc, #24]	; (800cd9c <xPortSysTickHandler+0x44>)
 800cd82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd86:	601a      	str	r2, [r3, #0]
 800cd88:	2300      	movs	r3, #0
 800cd8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	f383 8811 	msr	BASEPRI, r3
}
 800cd92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd94:	bf00      	nop
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	e000ed04 	.word	0xe000ed04

0800cda0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cda0:	b480      	push	{r7}
 800cda2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cda4:	4b0b      	ldr	r3, [pc, #44]	; (800cdd4 <vPortSetupTimerInterrupt+0x34>)
 800cda6:	2200      	movs	r2, #0
 800cda8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdaa:	4b0b      	ldr	r3, [pc, #44]	; (800cdd8 <vPortSetupTimerInterrupt+0x38>)
 800cdac:	2200      	movs	r2, #0
 800cdae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdb0:	4b0a      	ldr	r3, [pc, #40]	; (800cddc <vPortSetupTimerInterrupt+0x3c>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a0a      	ldr	r2, [pc, #40]	; (800cde0 <vPortSetupTimerInterrupt+0x40>)
 800cdb6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdba:	099b      	lsrs	r3, r3, #6
 800cdbc:	4a09      	ldr	r2, [pc, #36]	; (800cde4 <vPortSetupTimerInterrupt+0x44>)
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cdc2:	4b04      	ldr	r3, [pc, #16]	; (800cdd4 <vPortSetupTimerInterrupt+0x34>)
 800cdc4:	2207      	movs	r2, #7
 800cdc6:	601a      	str	r2, [r3, #0]
}
 800cdc8:	bf00      	nop
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	e000e010 	.word	0xe000e010
 800cdd8:	e000e018 	.word	0xe000e018
 800cddc:	20000014 	.word	0x20000014
 800cde0:	10624dd3 	.word	0x10624dd3
 800cde4:	e000e014 	.word	0xe000e014

0800cde8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cde8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cdf8 <vPortEnableVFP+0x10>
 800cdec:	6801      	ldr	r1, [r0, #0]
 800cdee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cdf2:	6001      	str	r1, [r0, #0]
 800cdf4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cdf6:	bf00      	nop
 800cdf8:	e000ed88 	.word	0xe000ed88

0800cdfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b08a      	sub	sp, #40	; 0x28
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce04:	2300      	movs	r3, #0
 800ce06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce08:	f7ff fae4 	bl	800c3d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce0c:	4b5b      	ldr	r3, [pc, #364]	; (800cf7c <pvPortMalloc+0x180>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d101      	bne.n	800ce18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce14:	f000 f91a 	bl	800d04c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce18:	4b59      	ldr	r3, [pc, #356]	; (800cf80 <pvPortMalloc+0x184>)
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4013      	ands	r3, r2
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f040 8092 	bne.w	800cf4a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d01f      	beq.n	800ce6c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ce2c:	2208      	movs	r2, #8
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4413      	add	r3, r2
 800ce32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f003 0307 	and.w	r3, r3, #7
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d016      	beq.n	800ce6c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f023 0307 	bic.w	r3, r3, #7
 800ce44:	3308      	adds	r3, #8
 800ce46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f003 0307 	and.w	r3, r3, #7
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00c      	beq.n	800ce6c <pvPortMalloc+0x70>
	__asm volatile
 800ce52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce56:	b672      	cpsid	i
 800ce58:	f383 8811 	msr	BASEPRI, r3
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	b662      	cpsie	i
 800ce66:	617b      	str	r3, [r7, #20]
}
 800ce68:	bf00      	nop
 800ce6a:	e7fe      	b.n	800ce6a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d06b      	beq.n	800cf4a <pvPortMalloc+0x14e>
 800ce72:	4b44      	ldr	r3, [pc, #272]	; (800cf84 <pvPortMalloc+0x188>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d866      	bhi.n	800cf4a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce7c:	4b42      	ldr	r3, [pc, #264]	; (800cf88 <pvPortMalloc+0x18c>)
 800ce7e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce80:	4b41      	ldr	r3, [pc, #260]	; (800cf88 <pvPortMalloc+0x18c>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce86:	e004      	b.n	800ce92 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d903      	bls.n	800cea4 <pvPortMalloc+0xa8>
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d1f1      	bne.n	800ce88 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cea4:	4b35      	ldr	r3, [pc, #212]	; (800cf7c <pvPortMalloc+0x180>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d04d      	beq.n	800cf4a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ceae:	6a3b      	ldr	r3, [r7, #32]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2208      	movs	r2, #8
 800ceb4:	4413      	add	r3, r2
 800ceb6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	6a3b      	ldr	r3, [r7, #32]
 800cebe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec2:	685a      	ldr	r2, [r3, #4]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	1ad2      	subs	r2, r2, r3
 800cec8:	2308      	movs	r3, #8
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	429a      	cmp	r2, r3
 800cece:	d921      	bls.n	800cf14 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ced0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4413      	add	r3, r2
 800ced6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	f003 0307 	and.w	r3, r3, #7
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00c      	beq.n	800cefc <pvPortMalloc+0x100>
	__asm volatile
 800cee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee6:	b672      	cpsid	i
 800cee8:	f383 8811 	msr	BASEPRI, r3
 800ceec:	f3bf 8f6f 	isb	sy
 800cef0:	f3bf 8f4f 	dsb	sy
 800cef4:	b662      	cpsie	i
 800cef6:	613b      	str	r3, [r7, #16]
}
 800cef8:	bf00      	nop
 800cefa:	e7fe      	b.n	800cefa <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefe:	685a      	ldr	r2, [r3, #4]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	1ad2      	subs	r2, r2, r3
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf0e:	69b8      	ldr	r0, [r7, #24]
 800cf10:	f000 f8fe 	bl	800d110 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf14:	4b1b      	ldr	r3, [pc, #108]	; (800cf84 <pvPortMalloc+0x188>)
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	1ad3      	subs	r3, r2, r3
 800cf1e:	4a19      	ldr	r2, [pc, #100]	; (800cf84 <pvPortMalloc+0x188>)
 800cf20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf22:	4b18      	ldr	r3, [pc, #96]	; (800cf84 <pvPortMalloc+0x188>)
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	4b19      	ldr	r3, [pc, #100]	; (800cf8c <pvPortMalloc+0x190>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d203      	bcs.n	800cf36 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf2e:	4b15      	ldr	r3, [pc, #84]	; (800cf84 <pvPortMalloc+0x188>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a16      	ldr	r2, [pc, #88]	; (800cf8c <pvPortMalloc+0x190>)
 800cf34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf38:	685a      	ldr	r2, [r3, #4]
 800cf3a:	4b11      	ldr	r3, [pc, #68]	; (800cf80 <pvPortMalloc+0x184>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	431a      	orrs	r2, r3
 800cf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf46:	2200      	movs	r2, #0
 800cf48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf4a:	f7ff fa51 	bl	800c3f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	f003 0307 	and.w	r3, r3, #7
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00c      	beq.n	800cf72 <pvPortMalloc+0x176>
	__asm volatile
 800cf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5c:	b672      	cpsid	i
 800cf5e:	f383 8811 	msr	BASEPRI, r3
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	b662      	cpsie	i
 800cf6c:	60fb      	str	r3, [r7, #12]
}
 800cf6e:	bf00      	nop
 800cf70:	e7fe      	b.n	800cf70 <pvPortMalloc+0x174>
	return pvReturn;
 800cf72:	69fb      	ldr	r3, [r7, #28]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3728      	adds	r7, #40	; 0x28
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	20005bdc 	.word	0x20005bdc
 800cf80:	20005be8 	.word	0x20005be8
 800cf84:	20005be0 	.word	0x20005be0
 800cf88:	20005bd4 	.word	0x20005bd4
 800cf8c:	20005be4 	.word	0x20005be4

0800cf90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d04c      	beq.n	800d03c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cfa2:	2308      	movs	r3, #8
 800cfa4:	425b      	negs	r3, r3
 800cfa6:	697a      	ldr	r2, [r7, #20]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	685a      	ldr	r2, [r3, #4]
 800cfb4:	4b23      	ldr	r3, [pc, #140]	; (800d044 <vPortFree+0xb4>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4013      	ands	r3, r2
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10c      	bne.n	800cfd8 <vPortFree+0x48>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	b672      	cpsid	i
 800cfc4:	f383 8811 	msr	BASEPRI, r3
 800cfc8:	f3bf 8f6f 	isb	sy
 800cfcc:	f3bf 8f4f 	dsb	sy
 800cfd0:	b662      	cpsie	i
 800cfd2:	60fb      	str	r3, [r7, #12]
}
 800cfd4:	bf00      	nop
 800cfd6:	e7fe      	b.n	800cfd6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d00c      	beq.n	800cffa <vPortFree+0x6a>
	__asm volatile
 800cfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe4:	b672      	cpsid	i
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	b662      	cpsie	i
 800cff4:	60bb      	str	r3, [r7, #8]
}
 800cff6:	bf00      	nop
 800cff8:	e7fe      	b.n	800cff8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	685a      	ldr	r2, [r3, #4]
 800cffe:	4b11      	ldr	r3, [pc, #68]	; (800d044 <vPortFree+0xb4>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4013      	ands	r3, r2
 800d004:	2b00      	cmp	r3, #0
 800d006:	d019      	beq.n	800d03c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d115      	bne.n	800d03c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	685a      	ldr	r2, [r3, #4]
 800d014:	4b0b      	ldr	r3, [pc, #44]	; (800d044 <vPortFree+0xb4>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	43db      	mvns	r3, r3
 800d01a:	401a      	ands	r2, r3
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d020:	f7ff f9d8 	bl	800c3d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	685a      	ldr	r2, [r3, #4]
 800d028:	4b07      	ldr	r3, [pc, #28]	; (800d048 <vPortFree+0xb8>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4413      	add	r3, r2
 800d02e:	4a06      	ldr	r2, [pc, #24]	; (800d048 <vPortFree+0xb8>)
 800d030:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d032:	6938      	ldr	r0, [r7, #16]
 800d034:	f000 f86c 	bl	800d110 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d038:	f7ff f9da 	bl	800c3f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d03c:	bf00      	nop
 800d03e:	3718      	adds	r7, #24
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	20005be8 	.word	0x20005be8
 800d048:	20005be0 	.word	0x20005be0

0800d04c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d04c:	b480      	push	{r7}
 800d04e:	b085      	sub	sp, #20
 800d050:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d052:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d056:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d058:	4b27      	ldr	r3, [pc, #156]	; (800d0f8 <prvHeapInit+0xac>)
 800d05a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f003 0307 	and.w	r3, r3, #7
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00c      	beq.n	800d080 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	3307      	adds	r3, #7
 800d06a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f023 0307 	bic.w	r3, r3, #7
 800d072:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d074:	68ba      	ldr	r2, [r7, #8]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	4a1f      	ldr	r2, [pc, #124]	; (800d0f8 <prvHeapInit+0xac>)
 800d07c:	4413      	add	r3, r2
 800d07e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d084:	4a1d      	ldr	r2, [pc, #116]	; (800d0fc <prvHeapInit+0xb0>)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d08a:	4b1c      	ldr	r3, [pc, #112]	; (800d0fc <prvHeapInit+0xb0>)
 800d08c:	2200      	movs	r2, #0
 800d08e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	68ba      	ldr	r2, [r7, #8]
 800d094:	4413      	add	r3, r2
 800d096:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d098:	2208      	movs	r2, #8
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	1a9b      	subs	r3, r3, r2
 800d09e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f023 0307 	bic.w	r3, r3, #7
 800d0a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	4a15      	ldr	r2, [pc, #84]	; (800d100 <prvHeapInit+0xb4>)
 800d0ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d0ae:	4b14      	ldr	r3, [pc, #80]	; (800d100 <prvHeapInit+0xb4>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d0b6:	4b12      	ldr	r3, [pc, #72]	; (800d100 <prvHeapInit+0xb4>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	68fa      	ldr	r2, [r7, #12]
 800d0c6:	1ad2      	subs	r2, r2, r3
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0cc:	4b0c      	ldr	r3, [pc, #48]	; (800d100 <prvHeapInit+0xb4>)
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	4a0a      	ldr	r2, [pc, #40]	; (800d104 <prvHeapInit+0xb8>)
 800d0da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	4a09      	ldr	r2, [pc, #36]	; (800d108 <prvHeapInit+0xbc>)
 800d0e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0e4:	4b09      	ldr	r3, [pc, #36]	; (800d10c <prvHeapInit+0xc0>)
 800d0e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0ea:	601a      	str	r2, [r3, #0]
}
 800d0ec:	bf00      	nop
 800d0ee:	3714      	adds	r7, #20
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr
 800d0f8:	20001fd4 	.word	0x20001fd4
 800d0fc:	20005bd4 	.word	0x20005bd4
 800d100:	20005bdc 	.word	0x20005bdc
 800d104:	20005be4 	.word	0x20005be4
 800d108:	20005be0 	.word	0x20005be0
 800d10c:	20005be8 	.word	0x20005be8

0800d110 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d110:	b480      	push	{r7}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d118:	4b28      	ldr	r3, [pc, #160]	; (800d1bc <prvInsertBlockIntoFreeList+0xac>)
 800d11a:	60fb      	str	r3, [r7, #12]
 800d11c:	e002      	b.n	800d124 <prvInsertBlockIntoFreeList+0x14>
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	60fb      	str	r3, [r7, #12]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d8f7      	bhi.n	800d11e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	68ba      	ldr	r2, [r7, #8]
 800d138:	4413      	add	r3, r2
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d108      	bne.n	800d152 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	441a      	add	r2, r3
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	441a      	add	r2, r3
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	429a      	cmp	r2, r3
 800d164:	d118      	bne.n	800d198 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	4b15      	ldr	r3, [pc, #84]	; (800d1c0 <prvInsertBlockIntoFreeList+0xb0>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d00d      	beq.n	800d18e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	441a      	add	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	601a      	str	r2, [r3, #0]
 800d18c:	e008      	b.n	800d1a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d18e:	4b0c      	ldr	r3, [pc, #48]	; (800d1c0 <prvInsertBlockIntoFreeList+0xb0>)
 800d190:	681a      	ldr	r2, [r3, #0]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	e003      	b.n	800d1a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d002      	beq.n	800d1ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1ae:	bf00      	nop
 800d1b0:	3714      	adds	r7, #20
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	20005bd4 	.word	0x20005bd4
 800d1c0:	20005bdc 	.word	0x20005bdc

0800d1c4 <atan2>:
 800d1c4:	f000 bb3c 	b.w	800d840 <__ieee754_atan2>

0800d1c8 <sqrt>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	ed2d 8b02 	vpush	{d8}
 800d1ce:	ec55 4b10 	vmov	r4, r5, d0
 800d1d2:	f000 f8d1 	bl	800d378 <__ieee754_sqrt>
 800d1d6:	4622      	mov	r2, r4
 800d1d8:	462b      	mov	r3, r5
 800d1da:	4620      	mov	r0, r4
 800d1dc:	4629      	mov	r1, r5
 800d1de:	eeb0 8a40 	vmov.f32	s16, s0
 800d1e2:	eef0 8a60 	vmov.f32	s17, s1
 800d1e6:	f7f3 fc71 	bl	8000acc <__aeabi_dcmpun>
 800d1ea:	b990      	cbnz	r0, 800d212 <sqrt+0x4a>
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	f7f3 fc42 	bl	8000a7c <__aeabi_dcmplt>
 800d1f8:	b158      	cbz	r0, 800d212 <sqrt+0x4a>
 800d1fa:	f001 fc2d 	bl	800ea58 <__errno>
 800d1fe:	2321      	movs	r3, #33	; 0x21
 800d200:	6003      	str	r3, [r0, #0]
 800d202:	2200      	movs	r2, #0
 800d204:	2300      	movs	r3, #0
 800d206:	4610      	mov	r0, r2
 800d208:	4619      	mov	r1, r3
 800d20a:	f7f3 faef 	bl	80007ec <__aeabi_ddiv>
 800d20e:	ec41 0b18 	vmov	d8, r0, r1
 800d212:	eeb0 0a48 	vmov.f32	s0, s16
 800d216:	eef0 0a68 	vmov.f32	s1, s17
 800d21a:	ecbd 8b02 	vpop	{d8}
 800d21e:	bd38      	pop	{r3, r4, r5, pc}

0800d220 <cos>:
 800d220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d222:	ec53 2b10 	vmov	r2, r3, d0
 800d226:	4826      	ldr	r0, [pc, #152]	; (800d2c0 <cos+0xa0>)
 800d228:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d22c:	4281      	cmp	r1, r0
 800d22e:	dc06      	bgt.n	800d23e <cos+0x1e>
 800d230:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d2b8 <cos+0x98>
 800d234:	b005      	add	sp, #20
 800d236:	f85d eb04 	ldr.w	lr, [sp], #4
 800d23a:	f000 b979 	b.w	800d530 <__kernel_cos>
 800d23e:	4821      	ldr	r0, [pc, #132]	; (800d2c4 <cos+0xa4>)
 800d240:	4281      	cmp	r1, r0
 800d242:	dd09      	ble.n	800d258 <cos+0x38>
 800d244:	ee10 0a10 	vmov	r0, s0
 800d248:	4619      	mov	r1, r3
 800d24a:	f7f2 ffed 	bl	8000228 <__aeabi_dsub>
 800d24e:	ec41 0b10 	vmov	d0, r0, r1
 800d252:	b005      	add	sp, #20
 800d254:	f85d fb04 	ldr.w	pc, [sp], #4
 800d258:	4668      	mov	r0, sp
 800d25a:	f000 fbb9 	bl	800d9d0 <__ieee754_rem_pio2>
 800d25e:	f000 0003 	and.w	r0, r0, #3
 800d262:	2801      	cmp	r0, #1
 800d264:	d00b      	beq.n	800d27e <cos+0x5e>
 800d266:	2802      	cmp	r0, #2
 800d268:	d016      	beq.n	800d298 <cos+0x78>
 800d26a:	b9e0      	cbnz	r0, 800d2a6 <cos+0x86>
 800d26c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d270:	ed9d 0b00 	vldr	d0, [sp]
 800d274:	f000 f95c 	bl	800d530 <__kernel_cos>
 800d278:	ec51 0b10 	vmov	r0, r1, d0
 800d27c:	e7e7      	b.n	800d24e <cos+0x2e>
 800d27e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d282:	ed9d 0b00 	vldr	d0, [sp]
 800d286:	f000 fa1b 	bl	800d6c0 <__kernel_sin>
 800d28a:	ec53 2b10 	vmov	r2, r3, d0
 800d28e:	ee10 0a10 	vmov	r0, s0
 800d292:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d296:	e7da      	b.n	800d24e <cos+0x2e>
 800d298:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d29c:	ed9d 0b00 	vldr	d0, [sp]
 800d2a0:	f000 f946 	bl	800d530 <__kernel_cos>
 800d2a4:	e7f1      	b.n	800d28a <cos+0x6a>
 800d2a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2aa:	ed9d 0b00 	vldr	d0, [sp]
 800d2ae:	2001      	movs	r0, #1
 800d2b0:	f000 fa06 	bl	800d6c0 <__kernel_sin>
 800d2b4:	e7e0      	b.n	800d278 <cos+0x58>
 800d2b6:	bf00      	nop
	...
 800d2c0:	3fe921fb 	.word	0x3fe921fb
 800d2c4:	7fefffff 	.word	0x7fefffff

0800d2c8 <sin>:
 800d2c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2ca:	ec53 2b10 	vmov	r2, r3, d0
 800d2ce:	4828      	ldr	r0, [pc, #160]	; (800d370 <sin+0xa8>)
 800d2d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d2d4:	4281      	cmp	r1, r0
 800d2d6:	dc07      	bgt.n	800d2e8 <sin+0x20>
 800d2d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d368 <sin+0xa0>
 800d2dc:	2000      	movs	r0, #0
 800d2de:	b005      	add	sp, #20
 800d2e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2e4:	f000 b9ec 	b.w	800d6c0 <__kernel_sin>
 800d2e8:	4822      	ldr	r0, [pc, #136]	; (800d374 <sin+0xac>)
 800d2ea:	4281      	cmp	r1, r0
 800d2ec:	dd09      	ble.n	800d302 <sin+0x3a>
 800d2ee:	ee10 0a10 	vmov	r0, s0
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	f7f2 ff98 	bl	8000228 <__aeabi_dsub>
 800d2f8:	ec41 0b10 	vmov	d0, r0, r1
 800d2fc:	b005      	add	sp, #20
 800d2fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800d302:	4668      	mov	r0, sp
 800d304:	f000 fb64 	bl	800d9d0 <__ieee754_rem_pio2>
 800d308:	f000 0003 	and.w	r0, r0, #3
 800d30c:	2801      	cmp	r0, #1
 800d30e:	d00c      	beq.n	800d32a <sin+0x62>
 800d310:	2802      	cmp	r0, #2
 800d312:	d011      	beq.n	800d338 <sin+0x70>
 800d314:	b9f0      	cbnz	r0, 800d354 <sin+0x8c>
 800d316:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d31a:	ed9d 0b00 	vldr	d0, [sp]
 800d31e:	2001      	movs	r0, #1
 800d320:	f000 f9ce 	bl	800d6c0 <__kernel_sin>
 800d324:	ec51 0b10 	vmov	r0, r1, d0
 800d328:	e7e6      	b.n	800d2f8 <sin+0x30>
 800d32a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d32e:	ed9d 0b00 	vldr	d0, [sp]
 800d332:	f000 f8fd 	bl	800d530 <__kernel_cos>
 800d336:	e7f5      	b.n	800d324 <sin+0x5c>
 800d338:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d33c:	ed9d 0b00 	vldr	d0, [sp]
 800d340:	2001      	movs	r0, #1
 800d342:	f000 f9bd 	bl	800d6c0 <__kernel_sin>
 800d346:	ec53 2b10 	vmov	r2, r3, d0
 800d34a:	ee10 0a10 	vmov	r0, s0
 800d34e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d352:	e7d1      	b.n	800d2f8 <sin+0x30>
 800d354:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d358:	ed9d 0b00 	vldr	d0, [sp]
 800d35c:	f000 f8e8 	bl	800d530 <__kernel_cos>
 800d360:	e7f1      	b.n	800d346 <sin+0x7e>
 800d362:	bf00      	nop
 800d364:	f3af 8000 	nop.w
	...
 800d370:	3fe921fb 	.word	0x3fe921fb
 800d374:	7fefffff 	.word	0x7fefffff

0800d378 <__ieee754_sqrt>:
 800d378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	ec55 4b10 	vmov	r4, r5, d0
 800d380:	4e67      	ldr	r6, [pc, #412]	; (800d520 <__ieee754_sqrt+0x1a8>)
 800d382:	43ae      	bics	r6, r5
 800d384:	ee10 0a10 	vmov	r0, s0
 800d388:	ee10 2a10 	vmov	r2, s0
 800d38c:	4629      	mov	r1, r5
 800d38e:	462b      	mov	r3, r5
 800d390:	d10d      	bne.n	800d3ae <__ieee754_sqrt+0x36>
 800d392:	f7f3 f901 	bl	8000598 <__aeabi_dmul>
 800d396:	4602      	mov	r2, r0
 800d398:	460b      	mov	r3, r1
 800d39a:	4620      	mov	r0, r4
 800d39c:	4629      	mov	r1, r5
 800d39e:	f7f2 ff45 	bl	800022c <__adddf3>
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	460d      	mov	r5, r1
 800d3a6:	ec45 4b10 	vmov	d0, r4, r5
 800d3aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ae:	2d00      	cmp	r5, #0
 800d3b0:	dc0b      	bgt.n	800d3ca <__ieee754_sqrt+0x52>
 800d3b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d3b6:	4326      	orrs	r6, r4
 800d3b8:	d0f5      	beq.n	800d3a6 <__ieee754_sqrt+0x2e>
 800d3ba:	b135      	cbz	r5, 800d3ca <__ieee754_sqrt+0x52>
 800d3bc:	f7f2 ff34 	bl	8000228 <__aeabi_dsub>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	f7f3 fa12 	bl	80007ec <__aeabi_ddiv>
 800d3c8:	e7eb      	b.n	800d3a2 <__ieee754_sqrt+0x2a>
 800d3ca:	1509      	asrs	r1, r1, #20
 800d3cc:	f000 808d 	beq.w	800d4ea <__ieee754_sqrt+0x172>
 800d3d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3d4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d3d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3dc:	07c9      	lsls	r1, r1, #31
 800d3de:	bf5c      	itt	pl
 800d3e0:	005b      	lslpl	r3, r3, #1
 800d3e2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d3e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d3ea:	bf58      	it	pl
 800d3ec:	0052      	lslpl	r2, r2, #1
 800d3ee:	2500      	movs	r5, #0
 800d3f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d3f4:	1076      	asrs	r6, r6, #1
 800d3f6:	0052      	lsls	r2, r2, #1
 800d3f8:	f04f 0e16 	mov.w	lr, #22
 800d3fc:	46ac      	mov	ip, r5
 800d3fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d402:	eb0c 0001 	add.w	r0, ip, r1
 800d406:	4298      	cmp	r0, r3
 800d408:	bfde      	ittt	le
 800d40a:	1a1b      	suble	r3, r3, r0
 800d40c:	eb00 0c01 	addle.w	ip, r0, r1
 800d410:	186d      	addle	r5, r5, r1
 800d412:	005b      	lsls	r3, r3, #1
 800d414:	f1be 0e01 	subs.w	lr, lr, #1
 800d418:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d41c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d420:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d424:	d1ed      	bne.n	800d402 <__ieee754_sqrt+0x8a>
 800d426:	4674      	mov	r4, lr
 800d428:	2720      	movs	r7, #32
 800d42a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d42e:	4563      	cmp	r3, ip
 800d430:	eb01 000e 	add.w	r0, r1, lr
 800d434:	dc02      	bgt.n	800d43c <__ieee754_sqrt+0xc4>
 800d436:	d113      	bne.n	800d460 <__ieee754_sqrt+0xe8>
 800d438:	4290      	cmp	r0, r2
 800d43a:	d811      	bhi.n	800d460 <__ieee754_sqrt+0xe8>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	eb00 0e01 	add.w	lr, r0, r1
 800d442:	da57      	bge.n	800d4f4 <__ieee754_sqrt+0x17c>
 800d444:	f1be 0f00 	cmp.w	lr, #0
 800d448:	db54      	blt.n	800d4f4 <__ieee754_sqrt+0x17c>
 800d44a:	f10c 0801 	add.w	r8, ip, #1
 800d44e:	eba3 030c 	sub.w	r3, r3, ip
 800d452:	4290      	cmp	r0, r2
 800d454:	bf88      	it	hi
 800d456:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d45a:	1a12      	subs	r2, r2, r0
 800d45c:	440c      	add	r4, r1
 800d45e:	46c4      	mov	ip, r8
 800d460:	005b      	lsls	r3, r3, #1
 800d462:	3f01      	subs	r7, #1
 800d464:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d468:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d46c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d470:	d1dd      	bne.n	800d42e <__ieee754_sqrt+0xb6>
 800d472:	4313      	orrs	r3, r2
 800d474:	d01b      	beq.n	800d4ae <__ieee754_sqrt+0x136>
 800d476:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d524 <__ieee754_sqrt+0x1ac>
 800d47a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d528 <__ieee754_sqrt+0x1b0>
 800d47e:	e9da 0100 	ldrd	r0, r1, [sl]
 800d482:	e9db 2300 	ldrd	r2, r3, [fp]
 800d486:	f7f2 fecf 	bl	8000228 <__aeabi_dsub>
 800d48a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d48e:	4602      	mov	r2, r0
 800d490:	460b      	mov	r3, r1
 800d492:	4640      	mov	r0, r8
 800d494:	4649      	mov	r1, r9
 800d496:	f7f3 fafb 	bl	8000a90 <__aeabi_dcmple>
 800d49a:	b140      	cbz	r0, 800d4ae <__ieee754_sqrt+0x136>
 800d49c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d4a0:	e9da 0100 	ldrd	r0, r1, [sl]
 800d4a4:	e9db 2300 	ldrd	r2, r3, [fp]
 800d4a8:	d126      	bne.n	800d4f8 <__ieee754_sqrt+0x180>
 800d4aa:	3501      	adds	r5, #1
 800d4ac:	463c      	mov	r4, r7
 800d4ae:	106a      	asrs	r2, r5, #1
 800d4b0:	0863      	lsrs	r3, r4, #1
 800d4b2:	07e9      	lsls	r1, r5, #31
 800d4b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d4b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d4bc:	bf48      	it	mi
 800d4be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d4c2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d4c6:	461c      	mov	r4, r3
 800d4c8:	e76d      	b.n	800d3a6 <__ieee754_sqrt+0x2e>
 800d4ca:	0ad3      	lsrs	r3, r2, #11
 800d4cc:	3815      	subs	r0, #21
 800d4ce:	0552      	lsls	r2, r2, #21
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d0fa      	beq.n	800d4ca <__ieee754_sqrt+0x152>
 800d4d4:	02dc      	lsls	r4, r3, #11
 800d4d6:	d50a      	bpl.n	800d4ee <__ieee754_sqrt+0x176>
 800d4d8:	f1c1 0420 	rsb	r4, r1, #32
 800d4dc:	fa22 f404 	lsr.w	r4, r2, r4
 800d4e0:	1e4d      	subs	r5, r1, #1
 800d4e2:	408a      	lsls	r2, r1
 800d4e4:	4323      	orrs	r3, r4
 800d4e6:	1b41      	subs	r1, r0, r5
 800d4e8:	e772      	b.n	800d3d0 <__ieee754_sqrt+0x58>
 800d4ea:	4608      	mov	r0, r1
 800d4ec:	e7f0      	b.n	800d4d0 <__ieee754_sqrt+0x158>
 800d4ee:	005b      	lsls	r3, r3, #1
 800d4f0:	3101      	adds	r1, #1
 800d4f2:	e7ef      	b.n	800d4d4 <__ieee754_sqrt+0x15c>
 800d4f4:	46e0      	mov	r8, ip
 800d4f6:	e7aa      	b.n	800d44e <__ieee754_sqrt+0xd6>
 800d4f8:	f7f2 fe98 	bl	800022c <__adddf3>
 800d4fc:	e9da 8900 	ldrd	r8, r9, [sl]
 800d500:	4602      	mov	r2, r0
 800d502:	460b      	mov	r3, r1
 800d504:	4640      	mov	r0, r8
 800d506:	4649      	mov	r1, r9
 800d508:	f7f3 fab8 	bl	8000a7c <__aeabi_dcmplt>
 800d50c:	b120      	cbz	r0, 800d518 <__ieee754_sqrt+0x1a0>
 800d50e:	1ca0      	adds	r0, r4, #2
 800d510:	bf08      	it	eq
 800d512:	3501      	addeq	r5, #1
 800d514:	3402      	adds	r4, #2
 800d516:	e7ca      	b.n	800d4ae <__ieee754_sqrt+0x136>
 800d518:	3401      	adds	r4, #1
 800d51a:	f024 0401 	bic.w	r4, r4, #1
 800d51e:	e7c6      	b.n	800d4ae <__ieee754_sqrt+0x136>
 800d520:	7ff00000 	.word	0x7ff00000
 800d524:	20000028 	.word	0x20000028
 800d528:	20000030 	.word	0x20000030
 800d52c:	00000000 	.word	0x00000000

0800d530 <__kernel_cos>:
 800d530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d534:	ec57 6b10 	vmov	r6, r7, d0
 800d538:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d53c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d540:	ed8d 1b00 	vstr	d1, [sp]
 800d544:	da07      	bge.n	800d556 <__kernel_cos+0x26>
 800d546:	ee10 0a10 	vmov	r0, s0
 800d54a:	4639      	mov	r1, r7
 800d54c:	f7f3 fad4 	bl	8000af8 <__aeabi_d2iz>
 800d550:	2800      	cmp	r0, #0
 800d552:	f000 8088 	beq.w	800d666 <__kernel_cos+0x136>
 800d556:	4632      	mov	r2, r6
 800d558:	463b      	mov	r3, r7
 800d55a:	4630      	mov	r0, r6
 800d55c:	4639      	mov	r1, r7
 800d55e:	f7f3 f81b 	bl	8000598 <__aeabi_dmul>
 800d562:	4b51      	ldr	r3, [pc, #324]	; (800d6a8 <__kernel_cos+0x178>)
 800d564:	2200      	movs	r2, #0
 800d566:	4604      	mov	r4, r0
 800d568:	460d      	mov	r5, r1
 800d56a:	f7f3 f815 	bl	8000598 <__aeabi_dmul>
 800d56e:	a340      	add	r3, pc, #256	; (adr r3, 800d670 <__kernel_cos+0x140>)
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	4682      	mov	sl, r0
 800d576:	468b      	mov	fp, r1
 800d578:	4620      	mov	r0, r4
 800d57a:	4629      	mov	r1, r5
 800d57c:	f7f3 f80c 	bl	8000598 <__aeabi_dmul>
 800d580:	a33d      	add	r3, pc, #244	; (adr r3, 800d678 <__kernel_cos+0x148>)
 800d582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d586:	f7f2 fe51 	bl	800022c <__adddf3>
 800d58a:	4622      	mov	r2, r4
 800d58c:	462b      	mov	r3, r5
 800d58e:	f7f3 f803 	bl	8000598 <__aeabi_dmul>
 800d592:	a33b      	add	r3, pc, #236	; (adr r3, 800d680 <__kernel_cos+0x150>)
 800d594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d598:	f7f2 fe46 	bl	8000228 <__aeabi_dsub>
 800d59c:	4622      	mov	r2, r4
 800d59e:	462b      	mov	r3, r5
 800d5a0:	f7f2 fffa 	bl	8000598 <__aeabi_dmul>
 800d5a4:	a338      	add	r3, pc, #224	; (adr r3, 800d688 <__kernel_cos+0x158>)
 800d5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5aa:	f7f2 fe3f 	bl	800022c <__adddf3>
 800d5ae:	4622      	mov	r2, r4
 800d5b0:	462b      	mov	r3, r5
 800d5b2:	f7f2 fff1 	bl	8000598 <__aeabi_dmul>
 800d5b6:	a336      	add	r3, pc, #216	; (adr r3, 800d690 <__kernel_cos+0x160>)
 800d5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5bc:	f7f2 fe34 	bl	8000228 <__aeabi_dsub>
 800d5c0:	4622      	mov	r2, r4
 800d5c2:	462b      	mov	r3, r5
 800d5c4:	f7f2 ffe8 	bl	8000598 <__aeabi_dmul>
 800d5c8:	a333      	add	r3, pc, #204	; (adr r3, 800d698 <__kernel_cos+0x168>)
 800d5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ce:	f7f2 fe2d 	bl	800022c <__adddf3>
 800d5d2:	4622      	mov	r2, r4
 800d5d4:	462b      	mov	r3, r5
 800d5d6:	f7f2 ffdf 	bl	8000598 <__aeabi_dmul>
 800d5da:	4622      	mov	r2, r4
 800d5dc:	462b      	mov	r3, r5
 800d5de:	f7f2 ffdb 	bl	8000598 <__aeabi_dmul>
 800d5e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	460d      	mov	r5, r1
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	4639      	mov	r1, r7
 800d5ee:	f7f2 ffd3 	bl	8000598 <__aeabi_dmul>
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	4629      	mov	r1, r5
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f7f2 fe15 	bl	8000228 <__aeabi_dsub>
 800d5fe:	4b2b      	ldr	r3, [pc, #172]	; (800d6ac <__kernel_cos+0x17c>)
 800d600:	4598      	cmp	r8, r3
 800d602:	4606      	mov	r6, r0
 800d604:	460f      	mov	r7, r1
 800d606:	dc10      	bgt.n	800d62a <__kernel_cos+0xfa>
 800d608:	4602      	mov	r2, r0
 800d60a:	460b      	mov	r3, r1
 800d60c:	4650      	mov	r0, sl
 800d60e:	4659      	mov	r1, fp
 800d610:	f7f2 fe0a 	bl	8000228 <__aeabi_dsub>
 800d614:	460b      	mov	r3, r1
 800d616:	4926      	ldr	r1, [pc, #152]	; (800d6b0 <__kernel_cos+0x180>)
 800d618:	4602      	mov	r2, r0
 800d61a:	2000      	movs	r0, #0
 800d61c:	f7f2 fe04 	bl	8000228 <__aeabi_dsub>
 800d620:	ec41 0b10 	vmov	d0, r0, r1
 800d624:	b003      	add	sp, #12
 800d626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d62a:	4b22      	ldr	r3, [pc, #136]	; (800d6b4 <__kernel_cos+0x184>)
 800d62c:	4920      	ldr	r1, [pc, #128]	; (800d6b0 <__kernel_cos+0x180>)
 800d62e:	4598      	cmp	r8, r3
 800d630:	bfcc      	ite	gt
 800d632:	4d21      	ldrgt	r5, [pc, #132]	; (800d6b8 <__kernel_cos+0x188>)
 800d634:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d638:	2400      	movs	r4, #0
 800d63a:	4622      	mov	r2, r4
 800d63c:	462b      	mov	r3, r5
 800d63e:	2000      	movs	r0, #0
 800d640:	f7f2 fdf2 	bl	8000228 <__aeabi_dsub>
 800d644:	4622      	mov	r2, r4
 800d646:	4680      	mov	r8, r0
 800d648:	4689      	mov	r9, r1
 800d64a:	462b      	mov	r3, r5
 800d64c:	4650      	mov	r0, sl
 800d64e:	4659      	mov	r1, fp
 800d650:	f7f2 fdea 	bl	8000228 <__aeabi_dsub>
 800d654:	4632      	mov	r2, r6
 800d656:	463b      	mov	r3, r7
 800d658:	f7f2 fde6 	bl	8000228 <__aeabi_dsub>
 800d65c:	4602      	mov	r2, r0
 800d65e:	460b      	mov	r3, r1
 800d660:	4640      	mov	r0, r8
 800d662:	4649      	mov	r1, r9
 800d664:	e7da      	b.n	800d61c <__kernel_cos+0xec>
 800d666:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d6a0 <__kernel_cos+0x170>
 800d66a:	e7db      	b.n	800d624 <__kernel_cos+0xf4>
 800d66c:	f3af 8000 	nop.w
 800d670:	be8838d4 	.word	0xbe8838d4
 800d674:	bda8fae9 	.word	0xbda8fae9
 800d678:	bdb4b1c4 	.word	0xbdb4b1c4
 800d67c:	3e21ee9e 	.word	0x3e21ee9e
 800d680:	809c52ad 	.word	0x809c52ad
 800d684:	3e927e4f 	.word	0x3e927e4f
 800d688:	19cb1590 	.word	0x19cb1590
 800d68c:	3efa01a0 	.word	0x3efa01a0
 800d690:	16c15177 	.word	0x16c15177
 800d694:	3f56c16c 	.word	0x3f56c16c
 800d698:	5555554c 	.word	0x5555554c
 800d69c:	3fa55555 	.word	0x3fa55555
 800d6a0:	00000000 	.word	0x00000000
 800d6a4:	3ff00000 	.word	0x3ff00000
 800d6a8:	3fe00000 	.word	0x3fe00000
 800d6ac:	3fd33332 	.word	0x3fd33332
 800d6b0:	3ff00000 	.word	0x3ff00000
 800d6b4:	3fe90000 	.word	0x3fe90000
 800d6b8:	3fd20000 	.word	0x3fd20000
 800d6bc:	00000000 	.word	0x00000000

0800d6c0 <__kernel_sin>:
 800d6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c4:	ed2d 8b04 	vpush	{d8-d9}
 800d6c8:	eeb0 8a41 	vmov.f32	s16, s2
 800d6cc:	eef0 8a61 	vmov.f32	s17, s3
 800d6d0:	ec55 4b10 	vmov	r4, r5, d0
 800d6d4:	b083      	sub	sp, #12
 800d6d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d6da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d6de:	9001      	str	r0, [sp, #4]
 800d6e0:	da06      	bge.n	800d6f0 <__kernel_sin+0x30>
 800d6e2:	ee10 0a10 	vmov	r0, s0
 800d6e6:	4629      	mov	r1, r5
 800d6e8:	f7f3 fa06 	bl	8000af8 <__aeabi_d2iz>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d051      	beq.n	800d794 <__kernel_sin+0xd4>
 800d6f0:	4622      	mov	r2, r4
 800d6f2:	462b      	mov	r3, r5
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	4629      	mov	r1, r5
 800d6f8:	f7f2 ff4e 	bl	8000598 <__aeabi_dmul>
 800d6fc:	4682      	mov	sl, r0
 800d6fe:	468b      	mov	fp, r1
 800d700:	4602      	mov	r2, r0
 800d702:	460b      	mov	r3, r1
 800d704:	4620      	mov	r0, r4
 800d706:	4629      	mov	r1, r5
 800d708:	f7f2 ff46 	bl	8000598 <__aeabi_dmul>
 800d70c:	a341      	add	r3, pc, #260	; (adr r3, 800d814 <__kernel_sin+0x154>)
 800d70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d712:	4680      	mov	r8, r0
 800d714:	4689      	mov	r9, r1
 800d716:	4650      	mov	r0, sl
 800d718:	4659      	mov	r1, fp
 800d71a:	f7f2 ff3d 	bl	8000598 <__aeabi_dmul>
 800d71e:	a33f      	add	r3, pc, #252	; (adr r3, 800d81c <__kernel_sin+0x15c>)
 800d720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d724:	f7f2 fd80 	bl	8000228 <__aeabi_dsub>
 800d728:	4652      	mov	r2, sl
 800d72a:	465b      	mov	r3, fp
 800d72c:	f7f2 ff34 	bl	8000598 <__aeabi_dmul>
 800d730:	a33c      	add	r3, pc, #240	; (adr r3, 800d824 <__kernel_sin+0x164>)
 800d732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d736:	f7f2 fd79 	bl	800022c <__adddf3>
 800d73a:	4652      	mov	r2, sl
 800d73c:	465b      	mov	r3, fp
 800d73e:	f7f2 ff2b 	bl	8000598 <__aeabi_dmul>
 800d742:	a33a      	add	r3, pc, #232	; (adr r3, 800d82c <__kernel_sin+0x16c>)
 800d744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d748:	f7f2 fd6e 	bl	8000228 <__aeabi_dsub>
 800d74c:	4652      	mov	r2, sl
 800d74e:	465b      	mov	r3, fp
 800d750:	f7f2 ff22 	bl	8000598 <__aeabi_dmul>
 800d754:	a337      	add	r3, pc, #220	; (adr r3, 800d834 <__kernel_sin+0x174>)
 800d756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75a:	f7f2 fd67 	bl	800022c <__adddf3>
 800d75e:	9b01      	ldr	r3, [sp, #4]
 800d760:	4606      	mov	r6, r0
 800d762:	460f      	mov	r7, r1
 800d764:	b9eb      	cbnz	r3, 800d7a2 <__kernel_sin+0xe2>
 800d766:	4602      	mov	r2, r0
 800d768:	460b      	mov	r3, r1
 800d76a:	4650      	mov	r0, sl
 800d76c:	4659      	mov	r1, fp
 800d76e:	f7f2 ff13 	bl	8000598 <__aeabi_dmul>
 800d772:	a325      	add	r3, pc, #148	; (adr r3, 800d808 <__kernel_sin+0x148>)
 800d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d778:	f7f2 fd56 	bl	8000228 <__aeabi_dsub>
 800d77c:	4642      	mov	r2, r8
 800d77e:	464b      	mov	r3, r9
 800d780:	f7f2 ff0a 	bl	8000598 <__aeabi_dmul>
 800d784:	4602      	mov	r2, r0
 800d786:	460b      	mov	r3, r1
 800d788:	4620      	mov	r0, r4
 800d78a:	4629      	mov	r1, r5
 800d78c:	f7f2 fd4e 	bl	800022c <__adddf3>
 800d790:	4604      	mov	r4, r0
 800d792:	460d      	mov	r5, r1
 800d794:	ec45 4b10 	vmov	d0, r4, r5
 800d798:	b003      	add	sp, #12
 800d79a:	ecbd 8b04 	vpop	{d8-d9}
 800d79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a2:	4b1b      	ldr	r3, [pc, #108]	; (800d810 <__kernel_sin+0x150>)
 800d7a4:	ec51 0b18 	vmov	r0, r1, d8
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f7f2 fef5 	bl	8000598 <__aeabi_dmul>
 800d7ae:	4632      	mov	r2, r6
 800d7b0:	ec41 0b19 	vmov	d9, r0, r1
 800d7b4:	463b      	mov	r3, r7
 800d7b6:	4640      	mov	r0, r8
 800d7b8:	4649      	mov	r1, r9
 800d7ba:	f7f2 feed 	bl	8000598 <__aeabi_dmul>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	ec51 0b19 	vmov	r0, r1, d9
 800d7c6:	f7f2 fd2f 	bl	8000228 <__aeabi_dsub>
 800d7ca:	4652      	mov	r2, sl
 800d7cc:	465b      	mov	r3, fp
 800d7ce:	f7f2 fee3 	bl	8000598 <__aeabi_dmul>
 800d7d2:	ec53 2b18 	vmov	r2, r3, d8
 800d7d6:	f7f2 fd27 	bl	8000228 <__aeabi_dsub>
 800d7da:	a30b      	add	r3, pc, #44	; (adr r3, 800d808 <__kernel_sin+0x148>)
 800d7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e0:	4606      	mov	r6, r0
 800d7e2:	460f      	mov	r7, r1
 800d7e4:	4640      	mov	r0, r8
 800d7e6:	4649      	mov	r1, r9
 800d7e8:	f7f2 fed6 	bl	8000598 <__aeabi_dmul>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	4639      	mov	r1, r7
 800d7f4:	f7f2 fd1a 	bl	800022c <__adddf3>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	4629      	mov	r1, r5
 800d800:	f7f2 fd12 	bl	8000228 <__aeabi_dsub>
 800d804:	e7c4      	b.n	800d790 <__kernel_sin+0xd0>
 800d806:	bf00      	nop
 800d808:	55555549 	.word	0x55555549
 800d80c:	3fc55555 	.word	0x3fc55555
 800d810:	3fe00000 	.word	0x3fe00000
 800d814:	5acfd57c 	.word	0x5acfd57c
 800d818:	3de5d93a 	.word	0x3de5d93a
 800d81c:	8a2b9ceb 	.word	0x8a2b9ceb
 800d820:	3e5ae5e6 	.word	0x3e5ae5e6
 800d824:	57b1fe7d 	.word	0x57b1fe7d
 800d828:	3ec71de3 	.word	0x3ec71de3
 800d82c:	19c161d5 	.word	0x19c161d5
 800d830:	3f2a01a0 	.word	0x3f2a01a0
 800d834:	1110f8a6 	.word	0x1110f8a6
 800d838:	3f811111 	.word	0x3f811111
 800d83c:	00000000 	.word	0x00000000

0800d840 <__ieee754_atan2>:
 800d840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d844:	ec57 6b11 	vmov	r6, r7, d1
 800d848:	4273      	negs	r3, r6
 800d84a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800d9c8 <__ieee754_atan2+0x188>
 800d84e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d852:	4333      	orrs	r3, r6
 800d854:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d858:	4543      	cmp	r3, r8
 800d85a:	ec51 0b10 	vmov	r0, r1, d0
 800d85e:	ee11 5a10 	vmov	r5, s2
 800d862:	d80a      	bhi.n	800d87a <__ieee754_atan2+0x3a>
 800d864:	4244      	negs	r4, r0
 800d866:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d86a:	4304      	orrs	r4, r0
 800d86c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d870:	4544      	cmp	r4, r8
 800d872:	ee10 9a10 	vmov	r9, s0
 800d876:	468e      	mov	lr, r1
 800d878:	d907      	bls.n	800d88a <__ieee754_atan2+0x4a>
 800d87a:	4632      	mov	r2, r6
 800d87c:	463b      	mov	r3, r7
 800d87e:	f7f2 fcd5 	bl	800022c <__adddf3>
 800d882:	ec41 0b10 	vmov	d0, r0, r1
 800d886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d88a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d88e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d892:	4334      	orrs	r4, r6
 800d894:	d103      	bne.n	800d89e <__ieee754_atan2+0x5e>
 800d896:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d89a:	f000 baa1 	b.w	800dde0 <atan>
 800d89e:	17bc      	asrs	r4, r7, #30
 800d8a0:	f004 0402 	and.w	r4, r4, #2
 800d8a4:	ea53 0909 	orrs.w	r9, r3, r9
 800d8a8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d8ac:	d107      	bne.n	800d8be <__ieee754_atan2+0x7e>
 800d8ae:	2c02      	cmp	r4, #2
 800d8b0:	d05f      	beq.n	800d972 <__ieee754_atan2+0x132>
 800d8b2:	2c03      	cmp	r4, #3
 800d8b4:	d1e5      	bne.n	800d882 <__ieee754_atan2+0x42>
 800d8b6:	a140      	add	r1, pc, #256	; (adr r1, 800d9b8 <__ieee754_atan2+0x178>)
 800d8b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8bc:	e7e1      	b.n	800d882 <__ieee754_atan2+0x42>
 800d8be:	4315      	orrs	r5, r2
 800d8c0:	d106      	bne.n	800d8d0 <__ieee754_atan2+0x90>
 800d8c2:	f1be 0f00 	cmp.w	lr, #0
 800d8c6:	da5f      	bge.n	800d988 <__ieee754_atan2+0x148>
 800d8c8:	a13d      	add	r1, pc, #244	; (adr r1, 800d9c0 <__ieee754_atan2+0x180>)
 800d8ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8ce:	e7d8      	b.n	800d882 <__ieee754_atan2+0x42>
 800d8d0:	4542      	cmp	r2, r8
 800d8d2:	d10f      	bne.n	800d8f4 <__ieee754_atan2+0xb4>
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	f104 34ff 	add.w	r4, r4, #4294967295
 800d8da:	d107      	bne.n	800d8ec <__ieee754_atan2+0xac>
 800d8dc:	2c02      	cmp	r4, #2
 800d8de:	d84c      	bhi.n	800d97a <__ieee754_atan2+0x13a>
 800d8e0:	4b33      	ldr	r3, [pc, #204]	; (800d9b0 <__ieee754_atan2+0x170>)
 800d8e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d8ea:	e7ca      	b.n	800d882 <__ieee754_atan2+0x42>
 800d8ec:	2c02      	cmp	r4, #2
 800d8ee:	d848      	bhi.n	800d982 <__ieee754_atan2+0x142>
 800d8f0:	4b30      	ldr	r3, [pc, #192]	; (800d9b4 <__ieee754_atan2+0x174>)
 800d8f2:	e7f6      	b.n	800d8e2 <__ieee754_atan2+0xa2>
 800d8f4:	4543      	cmp	r3, r8
 800d8f6:	d0e4      	beq.n	800d8c2 <__ieee754_atan2+0x82>
 800d8f8:	1a9b      	subs	r3, r3, r2
 800d8fa:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d8fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d902:	da1e      	bge.n	800d942 <__ieee754_atan2+0x102>
 800d904:	2f00      	cmp	r7, #0
 800d906:	da01      	bge.n	800d90c <__ieee754_atan2+0xcc>
 800d908:	323c      	adds	r2, #60	; 0x3c
 800d90a:	db1e      	blt.n	800d94a <__ieee754_atan2+0x10a>
 800d90c:	4632      	mov	r2, r6
 800d90e:	463b      	mov	r3, r7
 800d910:	f7f2 ff6c 	bl	80007ec <__aeabi_ddiv>
 800d914:	ec41 0b10 	vmov	d0, r0, r1
 800d918:	f000 fc02 	bl	800e120 <fabs>
 800d91c:	f000 fa60 	bl	800dde0 <atan>
 800d920:	ec51 0b10 	vmov	r0, r1, d0
 800d924:	2c01      	cmp	r4, #1
 800d926:	d013      	beq.n	800d950 <__ieee754_atan2+0x110>
 800d928:	2c02      	cmp	r4, #2
 800d92a:	d015      	beq.n	800d958 <__ieee754_atan2+0x118>
 800d92c:	2c00      	cmp	r4, #0
 800d92e:	d0a8      	beq.n	800d882 <__ieee754_atan2+0x42>
 800d930:	a317      	add	r3, pc, #92	; (adr r3, 800d990 <__ieee754_atan2+0x150>)
 800d932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d936:	f7f2 fc77 	bl	8000228 <__aeabi_dsub>
 800d93a:	a317      	add	r3, pc, #92	; (adr r3, 800d998 <__ieee754_atan2+0x158>)
 800d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d940:	e014      	b.n	800d96c <__ieee754_atan2+0x12c>
 800d942:	a117      	add	r1, pc, #92	; (adr r1, 800d9a0 <__ieee754_atan2+0x160>)
 800d944:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d948:	e7ec      	b.n	800d924 <__ieee754_atan2+0xe4>
 800d94a:	2000      	movs	r0, #0
 800d94c:	2100      	movs	r1, #0
 800d94e:	e7e9      	b.n	800d924 <__ieee754_atan2+0xe4>
 800d950:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d954:	4619      	mov	r1, r3
 800d956:	e794      	b.n	800d882 <__ieee754_atan2+0x42>
 800d958:	a30d      	add	r3, pc, #52	; (adr r3, 800d990 <__ieee754_atan2+0x150>)
 800d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95e:	f7f2 fc63 	bl	8000228 <__aeabi_dsub>
 800d962:	4602      	mov	r2, r0
 800d964:	460b      	mov	r3, r1
 800d966:	a10c      	add	r1, pc, #48	; (adr r1, 800d998 <__ieee754_atan2+0x158>)
 800d968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d96c:	f7f2 fc5c 	bl	8000228 <__aeabi_dsub>
 800d970:	e787      	b.n	800d882 <__ieee754_atan2+0x42>
 800d972:	a109      	add	r1, pc, #36	; (adr r1, 800d998 <__ieee754_atan2+0x158>)
 800d974:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d978:	e783      	b.n	800d882 <__ieee754_atan2+0x42>
 800d97a:	a10b      	add	r1, pc, #44	; (adr r1, 800d9a8 <__ieee754_atan2+0x168>)
 800d97c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d980:	e77f      	b.n	800d882 <__ieee754_atan2+0x42>
 800d982:	2000      	movs	r0, #0
 800d984:	2100      	movs	r1, #0
 800d986:	e77c      	b.n	800d882 <__ieee754_atan2+0x42>
 800d988:	a105      	add	r1, pc, #20	; (adr r1, 800d9a0 <__ieee754_atan2+0x160>)
 800d98a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d98e:	e778      	b.n	800d882 <__ieee754_atan2+0x42>
 800d990:	33145c07 	.word	0x33145c07
 800d994:	3ca1a626 	.word	0x3ca1a626
 800d998:	54442d18 	.word	0x54442d18
 800d99c:	400921fb 	.word	0x400921fb
 800d9a0:	54442d18 	.word	0x54442d18
 800d9a4:	3ff921fb 	.word	0x3ff921fb
 800d9a8:	54442d18 	.word	0x54442d18
 800d9ac:	3fe921fb 	.word	0x3fe921fb
 800d9b0:	0800f208 	.word	0x0800f208
 800d9b4:	0800f220 	.word	0x0800f220
 800d9b8:	54442d18 	.word	0x54442d18
 800d9bc:	c00921fb 	.word	0xc00921fb
 800d9c0:	54442d18 	.word	0x54442d18
 800d9c4:	bff921fb 	.word	0xbff921fb
 800d9c8:	7ff00000 	.word	0x7ff00000
 800d9cc:	00000000 	.word	0x00000000

0800d9d0 <__ieee754_rem_pio2>:
 800d9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d4:	ed2d 8b02 	vpush	{d8}
 800d9d8:	ec55 4b10 	vmov	r4, r5, d0
 800d9dc:	4bca      	ldr	r3, [pc, #808]	; (800dd08 <__ieee754_rem_pio2+0x338>)
 800d9de:	b08b      	sub	sp, #44	; 0x2c
 800d9e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d9e4:	4598      	cmp	r8, r3
 800d9e6:	4682      	mov	sl, r0
 800d9e8:	9502      	str	r5, [sp, #8]
 800d9ea:	dc08      	bgt.n	800d9fe <__ieee754_rem_pio2+0x2e>
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	ed80 0b00 	vstr	d0, [r0]
 800d9f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d9f8:	f04f 0b00 	mov.w	fp, #0
 800d9fc:	e028      	b.n	800da50 <__ieee754_rem_pio2+0x80>
 800d9fe:	4bc3      	ldr	r3, [pc, #780]	; (800dd0c <__ieee754_rem_pio2+0x33c>)
 800da00:	4598      	cmp	r8, r3
 800da02:	dc78      	bgt.n	800daf6 <__ieee754_rem_pio2+0x126>
 800da04:	9b02      	ldr	r3, [sp, #8]
 800da06:	4ec2      	ldr	r6, [pc, #776]	; (800dd10 <__ieee754_rem_pio2+0x340>)
 800da08:	2b00      	cmp	r3, #0
 800da0a:	ee10 0a10 	vmov	r0, s0
 800da0e:	a3b0      	add	r3, pc, #704	; (adr r3, 800dcd0 <__ieee754_rem_pio2+0x300>)
 800da10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da14:	4629      	mov	r1, r5
 800da16:	dd39      	ble.n	800da8c <__ieee754_rem_pio2+0xbc>
 800da18:	f7f2 fc06 	bl	8000228 <__aeabi_dsub>
 800da1c:	45b0      	cmp	r8, r6
 800da1e:	4604      	mov	r4, r0
 800da20:	460d      	mov	r5, r1
 800da22:	d01b      	beq.n	800da5c <__ieee754_rem_pio2+0x8c>
 800da24:	a3ac      	add	r3, pc, #688	; (adr r3, 800dcd8 <__ieee754_rem_pio2+0x308>)
 800da26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2a:	f7f2 fbfd 	bl	8000228 <__aeabi_dsub>
 800da2e:	4602      	mov	r2, r0
 800da30:	460b      	mov	r3, r1
 800da32:	e9ca 2300 	strd	r2, r3, [sl]
 800da36:	4620      	mov	r0, r4
 800da38:	4629      	mov	r1, r5
 800da3a:	f7f2 fbf5 	bl	8000228 <__aeabi_dsub>
 800da3e:	a3a6      	add	r3, pc, #664	; (adr r3, 800dcd8 <__ieee754_rem_pio2+0x308>)
 800da40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da44:	f7f2 fbf0 	bl	8000228 <__aeabi_dsub>
 800da48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800da4c:	f04f 0b01 	mov.w	fp, #1
 800da50:	4658      	mov	r0, fp
 800da52:	b00b      	add	sp, #44	; 0x2c
 800da54:	ecbd 8b02 	vpop	{d8}
 800da58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da5c:	a3a0      	add	r3, pc, #640	; (adr r3, 800dce0 <__ieee754_rem_pio2+0x310>)
 800da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da62:	f7f2 fbe1 	bl	8000228 <__aeabi_dsub>
 800da66:	a3a0      	add	r3, pc, #640	; (adr r3, 800dce8 <__ieee754_rem_pio2+0x318>)
 800da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6c:	4604      	mov	r4, r0
 800da6e:	460d      	mov	r5, r1
 800da70:	f7f2 fbda 	bl	8000228 <__aeabi_dsub>
 800da74:	4602      	mov	r2, r0
 800da76:	460b      	mov	r3, r1
 800da78:	e9ca 2300 	strd	r2, r3, [sl]
 800da7c:	4620      	mov	r0, r4
 800da7e:	4629      	mov	r1, r5
 800da80:	f7f2 fbd2 	bl	8000228 <__aeabi_dsub>
 800da84:	a398      	add	r3, pc, #608	; (adr r3, 800dce8 <__ieee754_rem_pio2+0x318>)
 800da86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8a:	e7db      	b.n	800da44 <__ieee754_rem_pio2+0x74>
 800da8c:	f7f2 fbce 	bl	800022c <__adddf3>
 800da90:	45b0      	cmp	r8, r6
 800da92:	4604      	mov	r4, r0
 800da94:	460d      	mov	r5, r1
 800da96:	d016      	beq.n	800dac6 <__ieee754_rem_pio2+0xf6>
 800da98:	a38f      	add	r3, pc, #572	; (adr r3, 800dcd8 <__ieee754_rem_pio2+0x308>)
 800da9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9e:	f7f2 fbc5 	bl	800022c <__adddf3>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	e9ca 2300 	strd	r2, r3, [sl]
 800daaa:	4620      	mov	r0, r4
 800daac:	4629      	mov	r1, r5
 800daae:	f7f2 fbbb 	bl	8000228 <__aeabi_dsub>
 800dab2:	a389      	add	r3, pc, #548	; (adr r3, 800dcd8 <__ieee754_rem_pio2+0x308>)
 800dab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab8:	f7f2 fbb8 	bl	800022c <__adddf3>
 800dabc:	f04f 3bff 	mov.w	fp, #4294967295
 800dac0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dac4:	e7c4      	b.n	800da50 <__ieee754_rem_pio2+0x80>
 800dac6:	a386      	add	r3, pc, #536	; (adr r3, 800dce0 <__ieee754_rem_pio2+0x310>)
 800dac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dacc:	f7f2 fbae 	bl	800022c <__adddf3>
 800dad0:	a385      	add	r3, pc, #532	; (adr r3, 800dce8 <__ieee754_rem_pio2+0x318>)
 800dad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad6:	4604      	mov	r4, r0
 800dad8:	460d      	mov	r5, r1
 800dada:	f7f2 fba7 	bl	800022c <__adddf3>
 800dade:	4602      	mov	r2, r0
 800dae0:	460b      	mov	r3, r1
 800dae2:	e9ca 2300 	strd	r2, r3, [sl]
 800dae6:	4620      	mov	r0, r4
 800dae8:	4629      	mov	r1, r5
 800daea:	f7f2 fb9d 	bl	8000228 <__aeabi_dsub>
 800daee:	a37e      	add	r3, pc, #504	; (adr r3, 800dce8 <__ieee754_rem_pio2+0x318>)
 800daf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf4:	e7e0      	b.n	800dab8 <__ieee754_rem_pio2+0xe8>
 800daf6:	4b87      	ldr	r3, [pc, #540]	; (800dd14 <__ieee754_rem_pio2+0x344>)
 800daf8:	4598      	cmp	r8, r3
 800dafa:	f300 80d8 	bgt.w	800dcae <__ieee754_rem_pio2+0x2de>
 800dafe:	f000 fb0f 	bl	800e120 <fabs>
 800db02:	ec55 4b10 	vmov	r4, r5, d0
 800db06:	ee10 0a10 	vmov	r0, s0
 800db0a:	a379      	add	r3, pc, #484	; (adr r3, 800dcf0 <__ieee754_rem_pio2+0x320>)
 800db0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db10:	4629      	mov	r1, r5
 800db12:	f7f2 fd41 	bl	8000598 <__aeabi_dmul>
 800db16:	4b80      	ldr	r3, [pc, #512]	; (800dd18 <__ieee754_rem_pio2+0x348>)
 800db18:	2200      	movs	r2, #0
 800db1a:	f7f2 fb87 	bl	800022c <__adddf3>
 800db1e:	f7f2 ffeb 	bl	8000af8 <__aeabi_d2iz>
 800db22:	4683      	mov	fp, r0
 800db24:	f7f2 fcce 	bl	80004c4 <__aeabi_i2d>
 800db28:	4602      	mov	r2, r0
 800db2a:	460b      	mov	r3, r1
 800db2c:	ec43 2b18 	vmov	d8, r2, r3
 800db30:	a367      	add	r3, pc, #412	; (adr r3, 800dcd0 <__ieee754_rem_pio2+0x300>)
 800db32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db36:	f7f2 fd2f 	bl	8000598 <__aeabi_dmul>
 800db3a:	4602      	mov	r2, r0
 800db3c:	460b      	mov	r3, r1
 800db3e:	4620      	mov	r0, r4
 800db40:	4629      	mov	r1, r5
 800db42:	f7f2 fb71 	bl	8000228 <__aeabi_dsub>
 800db46:	a364      	add	r3, pc, #400	; (adr r3, 800dcd8 <__ieee754_rem_pio2+0x308>)
 800db48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4c:	4606      	mov	r6, r0
 800db4e:	460f      	mov	r7, r1
 800db50:	ec51 0b18 	vmov	r0, r1, d8
 800db54:	f7f2 fd20 	bl	8000598 <__aeabi_dmul>
 800db58:	f1bb 0f1f 	cmp.w	fp, #31
 800db5c:	4604      	mov	r4, r0
 800db5e:	460d      	mov	r5, r1
 800db60:	dc0d      	bgt.n	800db7e <__ieee754_rem_pio2+0x1ae>
 800db62:	4b6e      	ldr	r3, [pc, #440]	; (800dd1c <__ieee754_rem_pio2+0x34c>)
 800db64:	f10b 32ff 	add.w	r2, fp, #4294967295
 800db68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db6c:	4543      	cmp	r3, r8
 800db6e:	d006      	beq.n	800db7e <__ieee754_rem_pio2+0x1ae>
 800db70:	4622      	mov	r2, r4
 800db72:	462b      	mov	r3, r5
 800db74:	4630      	mov	r0, r6
 800db76:	4639      	mov	r1, r7
 800db78:	f7f2 fb56 	bl	8000228 <__aeabi_dsub>
 800db7c:	e00e      	b.n	800db9c <__ieee754_rem_pio2+0x1cc>
 800db7e:	462b      	mov	r3, r5
 800db80:	4622      	mov	r2, r4
 800db82:	4630      	mov	r0, r6
 800db84:	4639      	mov	r1, r7
 800db86:	f7f2 fb4f 	bl	8000228 <__aeabi_dsub>
 800db8a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800db8e:	9303      	str	r3, [sp, #12]
 800db90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800db94:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800db98:	2b10      	cmp	r3, #16
 800db9a:	dc02      	bgt.n	800dba2 <__ieee754_rem_pio2+0x1d2>
 800db9c:	e9ca 0100 	strd	r0, r1, [sl]
 800dba0:	e039      	b.n	800dc16 <__ieee754_rem_pio2+0x246>
 800dba2:	a34f      	add	r3, pc, #316	; (adr r3, 800dce0 <__ieee754_rem_pio2+0x310>)
 800dba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba8:	ec51 0b18 	vmov	r0, r1, d8
 800dbac:	f7f2 fcf4 	bl	8000598 <__aeabi_dmul>
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	460d      	mov	r5, r1
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	4630      	mov	r0, r6
 800dbba:	4639      	mov	r1, r7
 800dbbc:	f7f2 fb34 	bl	8000228 <__aeabi_dsub>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	4680      	mov	r8, r0
 800dbc6:	4689      	mov	r9, r1
 800dbc8:	4630      	mov	r0, r6
 800dbca:	4639      	mov	r1, r7
 800dbcc:	f7f2 fb2c 	bl	8000228 <__aeabi_dsub>
 800dbd0:	4622      	mov	r2, r4
 800dbd2:	462b      	mov	r3, r5
 800dbd4:	f7f2 fb28 	bl	8000228 <__aeabi_dsub>
 800dbd8:	a343      	add	r3, pc, #268	; (adr r3, 800dce8 <__ieee754_rem_pio2+0x318>)
 800dbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbde:	4604      	mov	r4, r0
 800dbe0:	460d      	mov	r5, r1
 800dbe2:	ec51 0b18 	vmov	r0, r1, d8
 800dbe6:	f7f2 fcd7 	bl	8000598 <__aeabi_dmul>
 800dbea:	4622      	mov	r2, r4
 800dbec:	462b      	mov	r3, r5
 800dbee:	f7f2 fb1b 	bl	8000228 <__aeabi_dsub>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	460d      	mov	r5, r1
 800dbfa:	4640      	mov	r0, r8
 800dbfc:	4649      	mov	r1, r9
 800dbfe:	f7f2 fb13 	bl	8000228 <__aeabi_dsub>
 800dc02:	9a03      	ldr	r2, [sp, #12]
 800dc04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc08:	1ad3      	subs	r3, r2, r3
 800dc0a:	2b31      	cmp	r3, #49	; 0x31
 800dc0c:	dc24      	bgt.n	800dc58 <__ieee754_rem_pio2+0x288>
 800dc0e:	e9ca 0100 	strd	r0, r1, [sl]
 800dc12:	4646      	mov	r6, r8
 800dc14:	464f      	mov	r7, r9
 800dc16:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	4642      	mov	r2, r8
 800dc1e:	464b      	mov	r3, r9
 800dc20:	4639      	mov	r1, r7
 800dc22:	f7f2 fb01 	bl	8000228 <__aeabi_dsub>
 800dc26:	462b      	mov	r3, r5
 800dc28:	4622      	mov	r2, r4
 800dc2a:	f7f2 fafd 	bl	8000228 <__aeabi_dsub>
 800dc2e:	9b02      	ldr	r3, [sp, #8]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dc36:	f6bf af0b 	bge.w	800da50 <__ieee754_rem_pio2+0x80>
 800dc3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dc3e:	f8ca 3004 	str.w	r3, [sl, #4]
 800dc42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc46:	f8ca 8000 	str.w	r8, [sl]
 800dc4a:	f8ca 0008 	str.w	r0, [sl, #8]
 800dc4e:	f8ca 300c 	str.w	r3, [sl, #12]
 800dc52:	f1cb 0b00 	rsb	fp, fp, #0
 800dc56:	e6fb      	b.n	800da50 <__ieee754_rem_pio2+0x80>
 800dc58:	a327      	add	r3, pc, #156	; (adr r3, 800dcf8 <__ieee754_rem_pio2+0x328>)
 800dc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5e:	ec51 0b18 	vmov	r0, r1, d8
 800dc62:	f7f2 fc99 	bl	8000598 <__aeabi_dmul>
 800dc66:	4604      	mov	r4, r0
 800dc68:	460d      	mov	r5, r1
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	4640      	mov	r0, r8
 800dc70:	4649      	mov	r1, r9
 800dc72:	f7f2 fad9 	bl	8000228 <__aeabi_dsub>
 800dc76:	4602      	mov	r2, r0
 800dc78:	460b      	mov	r3, r1
 800dc7a:	4606      	mov	r6, r0
 800dc7c:	460f      	mov	r7, r1
 800dc7e:	4640      	mov	r0, r8
 800dc80:	4649      	mov	r1, r9
 800dc82:	f7f2 fad1 	bl	8000228 <__aeabi_dsub>
 800dc86:	4622      	mov	r2, r4
 800dc88:	462b      	mov	r3, r5
 800dc8a:	f7f2 facd 	bl	8000228 <__aeabi_dsub>
 800dc8e:	a31c      	add	r3, pc, #112	; (adr r3, 800dd00 <__ieee754_rem_pio2+0x330>)
 800dc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc94:	4604      	mov	r4, r0
 800dc96:	460d      	mov	r5, r1
 800dc98:	ec51 0b18 	vmov	r0, r1, d8
 800dc9c:	f7f2 fc7c 	bl	8000598 <__aeabi_dmul>
 800dca0:	4622      	mov	r2, r4
 800dca2:	462b      	mov	r3, r5
 800dca4:	f7f2 fac0 	bl	8000228 <__aeabi_dsub>
 800dca8:	4604      	mov	r4, r0
 800dcaa:	460d      	mov	r5, r1
 800dcac:	e760      	b.n	800db70 <__ieee754_rem_pio2+0x1a0>
 800dcae:	4b1c      	ldr	r3, [pc, #112]	; (800dd20 <__ieee754_rem_pio2+0x350>)
 800dcb0:	4598      	cmp	r8, r3
 800dcb2:	dd37      	ble.n	800dd24 <__ieee754_rem_pio2+0x354>
 800dcb4:	ee10 2a10 	vmov	r2, s0
 800dcb8:	462b      	mov	r3, r5
 800dcba:	4620      	mov	r0, r4
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	f7f2 fab3 	bl	8000228 <__aeabi_dsub>
 800dcc2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dcc6:	e9ca 0100 	strd	r0, r1, [sl]
 800dcca:	e695      	b.n	800d9f8 <__ieee754_rem_pio2+0x28>
 800dccc:	f3af 8000 	nop.w
 800dcd0:	54400000 	.word	0x54400000
 800dcd4:	3ff921fb 	.word	0x3ff921fb
 800dcd8:	1a626331 	.word	0x1a626331
 800dcdc:	3dd0b461 	.word	0x3dd0b461
 800dce0:	1a600000 	.word	0x1a600000
 800dce4:	3dd0b461 	.word	0x3dd0b461
 800dce8:	2e037073 	.word	0x2e037073
 800dcec:	3ba3198a 	.word	0x3ba3198a
 800dcf0:	6dc9c883 	.word	0x6dc9c883
 800dcf4:	3fe45f30 	.word	0x3fe45f30
 800dcf8:	2e000000 	.word	0x2e000000
 800dcfc:	3ba3198a 	.word	0x3ba3198a
 800dd00:	252049c1 	.word	0x252049c1
 800dd04:	397b839a 	.word	0x397b839a
 800dd08:	3fe921fb 	.word	0x3fe921fb
 800dd0c:	4002d97b 	.word	0x4002d97b
 800dd10:	3ff921fb 	.word	0x3ff921fb
 800dd14:	413921fb 	.word	0x413921fb
 800dd18:	3fe00000 	.word	0x3fe00000
 800dd1c:	0800f238 	.word	0x0800f238
 800dd20:	7fefffff 	.word	0x7fefffff
 800dd24:	ea4f 5628 	mov.w	r6, r8, asr #20
 800dd28:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800dd2c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800dd30:	4620      	mov	r0, r4
 800dd32:	460d      	mov	r5, r1
 800dd34:	f7f2 fee0 	bl	8000af8 <__aeabi_d2iz>
 800dd38:	f7f2 fbc4 	bl	80004c4 <__aeabi_i2d>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	460b      	mov	r3, r1
 800dd40:	4620      	mov	r0, r4
 800dd42:	4629      	mov	r1, r5
 800dd44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dd48:	f7f2 fa6e 	bl	8000228 <__aeabi_dsub>
 800dd4c:	4b21      	ldr	r3, [pc, #132]	; (800ddd4 <__ieee754_rem_pio2+0x404>)
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f7f2 fc22 	bl	8000598 <__aeabi_dmul>
 800dd54:	460d      	mov	r5, r1
 800dd56:	4604      	mov	r4, r0
 800dd58:	f7f2 fece 	bl	8000af8 <__aeabi_d2iz>
 800dd5c:	f7f2 fbb2 	bl	80004c4 <__aeabi_i2d>
 800dd60:	4602      	mov	r2, r0
 800dd62:	460b      	mov	r3, r1
 800dd64:	4620      	mov	r0, r4
 800dd66:	4629      	mov	r1, r5
 800dd68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dd6c:	f7f2 fa5c 	bl	8000228 <__aeabi_dsub>
 800dd70:	4b18      	ldr	r3, [pc, #96]	; (800ddd4 <__ieee754_rem_pio2+0x404>)
 800dd72:	2200      	movs	r2, #0
 800dd74:	f7f2 fc10 	bl	8000598 <__aeabi_dmul>
 800dd78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dd7c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800dd80:	2703      	movs	r7, #3
 800dd82:	2400      	movs	r4, #0
 800dd84:	2500      	movs	r5, #0
 800dd86:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800dd8a:	4622      	mov	r2, r4
 800dd8c:	462b      	mov	r3, r5
 800dd8e:	46b9      	mov	r9, r7
 800dd90:	3f01      	subs	r7, #1
 800dd92:	f7f2 fe69 	bl	8000a68 <__aeabi_dcmpeq>
 800dd96:	2800      	cmp	r0, #0
 800dd98:	d1f5      	bne.n	800dd86 <__ieee754_rem_pio2+0x3b6>
 800dd9a:	4b0f      	ldr	r3, [pc, #60]	; (800ddd8 <__ieee754_rem_pio2+0x408>)
 800dd9c:	9301      	str	r3, [sp, #4]
 800dd9e:	2302      	movs	r3, #2
 800dda0:	9300      	str	r3, [sp, #0]
 800dda2:	4632      	mov	r2, r6
 800dda4:	464b      	mov	r3, r9
 800dda6:	4651      	mov	r1, sl
 800dda8:	a804      	add	r0, sp, #16
 800ddaa:	f000 f9c5 	bl	800e138 <__kernel_rem_pio2>
 800ddae:	9b02      	ldr	r3, [sp, #8]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	4683      	mov	fp, r0
 800ddb4:	f6bf ae4c 	bge.w	800da50 <__ieee754_rem_pio2+0x80>
 800ddb8:	e9da 2100 	ldrd	r2, r1, [sl]
 800ddbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddc0:	e9ca 2300 	strd	r2, r3, [sl]
 800ddc4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ddc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddcc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ddd0:	e73f      	b.n	800dc52 <__ieee754_rem_pio2+0x282>
 800ddd2:	bf00      	nop
 800ddd4:	41700000 	.word	0x41700000
 800ddd8:	0800f2b8 	.word	0x0800f2b8
 800dddc:	00000000 	.word	0x00000000

0800dde0 <atan>:
 800dde0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde4:	ec55 4b10 	vmov	r4, r5, d0
 800dde8:	4bc3      	ldr	r3, [pc, #780]	; (800e0f8 <atan+0x318>)
 800ddea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ddee:	429e      	cmp	r6, r3
 800ddf0:	46ab      	mov	fp, r5
 800ddf2:	dd18      	ble.n	800de26 <atan+0x46>
 800ddf4:	4bc1      	ldr	r3, [pc, #772]	; (800e0fc <atan+0x31c>)
 800ddf6:	429e      	cmp	r6, r3
 800ddf8:	dc01      	bgt.n	800ddfe <atan+0x1e>
 800ddfa:	d109      	bne.n	800de10 <atan+0x30>
 800ddfc:	b144      	cbz	r4, 800de10 <atan+0x30>
 800ddfe:	4622      	mov	r2, r4
 800de00:	462b      	mov	r3, r5
 800de02:	4620      	mov	r0, r4
 800de04:	4629      	mov	r1, r5
 800de06:	f7f2 fa11 	bl	800022c <__adddf3>
 800de0a:	4604      	mov	r4, r0
 800de0c:	460d      	mov	r5, r1
 800de0e:	e006      	b.n	800de1e <atan+0x3e>
 800de10:	f1bb 0f00 	cmp.w	fp, #0
 800de14:	f300 8131 	bgt.w	800e07a <atan+0x29a>
 800de18:	a59b      	add	r5, pc, #620	; (adr r5, 800e088 <atan+0x2a8>)
 800de1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800de1e:	ec45 4b10 	vmov	d0, r4, r5
 800de22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de26:	4bb6      	ldr	r3, [pc, #728]	; (800e100 <atan+0x320>)
 800de28:	429e      	cmp	r6, r3
 800de2a:	dc14      	bgt.n	800de56 <atan+0x76>
 800de2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800de30:	429e      	cmp	r6, r3
 800de32:	dc0d      	bgt.n	800de50 <atan+0x70>
 800de34:	a396      	add	r3, pc, #600	; (adr r3, 800e090 <atan+0x2b0>)
 800de36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3a:	ee10 0a10 	vmov	r0, s0
 800de3e:	4629      	mov	r1, r5
 800de40:	f7f2 f9f4 	bl	800022c <__adddf3>
 800de44:	4baf      	ldr	r3, [pc, #700]	; (800e104 <atan+0x324>)
 800de46:	2200      	movs	r2, #0
 800de48:	f7f2 fe36 	bl	8000ab8 <__aeabi_dcmpgt>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d1e6      	bne.n	800de1e <atan+0x3e>
 800de50:	f04f 3aff 	mov.w	sl, #4294967295
 800de54:	e02b      	b.n	800deae <atan+0xce>
 800de56:	f000 f963 	bl	800e120 <fabs>
 800de5a:	4bab      	ldr	r3, [pc, #684]	; (800e108 <atan+0x328>)
 800de5c:	429e      	cmp	r6, r3
 800de5e:	ec55 4b10 	vmov	r4, r5, d0
 800de62:	f300 80bf 	bgt.w	800dfe4 <atan+0x204>
 800de66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800de6a:	429e      	cmp	r6, r3
 800de6c:	f300 80a0 	bgt.w	800dfb0 <atan+0x1d0>
 800de70:	ee10 2a10 	vmov	r2, s0
 800de74:	ee10 0a10 	vmov	r0, s0
 800de78:	462b      	mov	r3, r5
 800de7a:	4629      	mov	r1, r5
 800de7c:	f7f2 f9d6 	bl	800022c <__adddf3>
 800de80:	4ba0      	ldr	r3, [pc, #640]	; (800e104 <atan+0x324>)
 800de82:	2200      	movs	r2, #0
 800de84:	f7f2 f9d0 	bl	8000228 <__aeabi_dsub>
 800de88:	2200      	movs	r2, #0
 800de8a:	4606      	mov	r6, r0
 800de8c:	460f      	mov	r7, r1
 800de8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de92:	4620      	mov	r0, r4
 800de94:	4629      	mov	r1, r5
 800de96:	f7f2 f9c9 	bl	800022c <__adddf3>
 800de9a:	4602      	mov	r2, r0
 800de9c:	460b      	mov	r3, r1
 800de9e:	4630      	mov	r0, r6
 800dea0:	4639      	mov	r1, r7
 800dea2:	f7f2 fca3 	bl	80007ec <__aeabi_ddiv>
 800dea6:	f04f 0a00 	mov.w	sl, #0
 800deaa:	4604      	mov	r4, r0
 800deac:	460d      	mov	r5, r1
 800deae:	4622      	mov	r2, r4
 800deb0:	462b      	mov	r3, r5
 800deb2:	4620      	mov	r0, r4
 800deb4:	4629      	mov	r1, r5
 800deb6:	f7f2 fb6f 	bl	8000598 <__aeabi_dmul>
 800deba:	4602      	mov	r2, r0
 800debc:	460b      	mov	r3, r1
 800debe:	4680      	mov	r8, r0
 800dec0:	4689      	mov	r9, r1
 800dec2:	f7f2 fb69 	bl	8000598 <__aeabi_dmul>
 800dec6:	a374      	add	r3, pc, #464	; (adr r3, 800e098 <atan+0x2b8>)
 800dec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800decc:	4606      	mov	r6, r0
 800dece:	460f      	mov	r7, r1
 800ded0:	f7f2 fb62 	bl	8000598 <__aeabi_dmul>
 800ded4:	a372      	add	r3, pc, #456	; (adr r3, 800e0a0 <atan+0x2c0>)
 800ded6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deda:	f7f2 f9a7 	bl	800022c <__adddf3>
 800dede:	4632      	mov	r2, r6
 800dee0:	463b      	mov	r3, r7
 800dee2:	f7f2 fb59 	bl	8000598 <__aeabi_dmul>
 800dee6:	a370      	add	r3, pc, #448	; (adr r3, 800e0a8 <atan+0x2c8>)
 800dee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deec:	f7f2 f99e 	bl	800022c <__adddf3>
 800def0:	4632      	mov	r2, r6
 800def2:	463b      	mov	r3, r7
 800def4:	f7f2 fb50 	bl	8000598 <__aeabi_dmul>
 800def8:	a36d      	add	r3, pc, #436	; (adr r3, 800e0b0 <atan+0x2d0>)
 800defa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defe:	f7f2 f995 	bl	800022c <__adddf3>
 800df02:	4632      	mov	r2, r6
 800df04:	463b      	mov	r3, r7
 800df06:	f7f2 fb47 	bl	8000598 <__aeabi_dmul>
 800df0a:	a36b      	add	r3, pc, #428	; (adr r3, 800e0b8 <atan+0x2d8>)
 800df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df10:	f7f2 f98c 	bl	800022c <__adddf3>
 800df14:	4632      	mov	r2, r6
 800df16:	463b      	mov	r3, r7
 800df18:	f7f2 fb3e 	bl	8000598 <__aeabi_dmul>
 800df1c:	a368      	add	r3, pc, #416	; (adr r3, 800e0c0 <atan+0x2e0>)
 800df1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df22:	f7f2 f983 	bl	800022c <__adddf3>
 800df26:	4642      	mov	r2, r8
 800df28:	464b      	mov	r3, r9
 800df2a:	f7f2 fb35 	bl	8000598 <__aeabi_dmul>
 800df2e:	a366      	add	r3, pc, #408	; (adr r3, 800e0c8 <atan+0x2e8>)
 800df30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df34:	4680      	mov	r8, r0
 800df36:	4689      	mov	r9, r1
 800df38:	4630      	mov	r0, r6
 800df3a:	4639      	mov	r1, r7
 800df3c:	f7f2 fb2c 	bl	8000598 <__aeabi_dmul>
 800df40:	a363      	add	r3, pc, #396	; (adr r3, 800e0d0 <atan+0x2f0>)
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	f7f2 f96f 	bl	8000228 <__aeabi_dsub>
 800df4a:	4632      	mov	r2, r6
 800df4c:	463b      	mov	r3, r7
 800df4e:	f7f2 fb23 	bl	8000598 <__aeabi_dmul>
 800df52:	a361      	add	r3, pc, #388	; (adr r3, 800e0d8 <atan+0x2f8>)
 800df54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df58:	f7f2 f966 	bl	8000228 <__aeabi_dsub>
 800df5c:	4632      	mov	r2, r6
 800df5e:	463b      	mov	r3, r7
 800df60:	f7f2 fb1a 	bl	8000598 <__aeabi_dmul>
 800df64:	a35e      	add	r3, pc, #376	; (adr r3, 800e0e0 <atan+0x300>)
 800df66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6a:	f7f2 f95d 	bl	8000228 <__aeabi_dsub>
 800df6e:	4632      	mov	r2, r6
 800df70:	463b      	mov	r3, r7
 800df72:	f7f2 fb11 	bl	8000598 <__aeabi_dmul>
 800df76:	a35c      	add	r3, pc, #368	; (adr r3, 800e0e8 <atan+0x308>)
 800df78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7c:	f7f2 f954 	bl	8000228 <__aeabi_dsub>
 800df80:	4632      	mov	r2, r6
 800df82:	463b      	mov	r3, r7
 800df84:	f7f2 fb08 	bl	8000598 <__aeabi_dmul>
 800df88:	4602      	mov	r2, r0
 800df8a:	460b      	mov	r3, r1
 800df8c:	4640      	mov	r0, r8
 800df8e:	4649      	mov	r1, r9
 800df90:	f7f2 f94c 	bl	800022c <__adddf3>
 800df94:	4622      	mov	r2, r4
 800df96:	462b      	mov	r3, r5
 800df98:	f7f2 fafe 	bl	8000598 <__aeabi_dmul>
 800df9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	460b      	mov	r3, r1
 800dfa4:	d14b      	bne.n	800e03e <atan+0x25e>
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	4629      	mov	r1, r5
 800dfaa:	f7f2 f93d 	bl	8000228 <__aeabi_dsub>
 800dfae:	e72c      	b.n	800de0a <atan+0x2a>
 800dfb0:	ee10 0a10 	vmov	r0, s0
 800dfb4:	4b53      	ldr	r3, [pc, #332]	; (800e104 <atan+0x324>)
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	4629      	mov	r1, r5
 800dfba:	f7f2 f935 	bl	8000228 <__aeabi_dsub>
 800dfbe:	4b51      	ldr	r3, [pc, #324]	; (800e104 <atan+0x324>)
 800dfc0:	4606      	mov	r6, r0
 800dfc2:	460f      	mov	r7, r1
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	4629      	mov	r1, r5
 800dfca:	f7f2 f92f 	bl	800022c <__adddf3>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	4639      	mov	r1, r7
 800dfd6:	f7f2 fc09 	bl	80007ec <__aeabi_ddiv>
 800dfda:	f04f 0a01 	mov.w	sl, #1
 800dfde:	4604      	mov	r4, r0
 800dfe0:	460d      	mov	r5, r1
 800dfe2:	e764      	b.n	800deae <atan+0xce>
 800dfe4:	4b49      	ldr	r3, [pc, #292]	; (800e10c <atan+0x32c>)
 800dfe6:	429e      	cmp	r6, r3
 800dfe8:	da1d      	bge.n	800e026 <atan+0x246>
 800dfea:	ee10 0a10 	vmov	r0, s0
 800dfee:	4b48      	ldr	r3, [pc, #288]	; (800e110 <atan+0x330>)
 800dff0:	2200      	movs	r2, #0
 800dff2:	4629      	mov	r1, r5
 800dff4:	f7f2 f918 	bl	8000228 <__aeabi_dsub>
 800dff8:	4b45      	ldr	r3, [pc, #276]	; (800e110 <atan+0x330>)
 800dffa:	4606      	mov	r6, r0
 800dffc:	460f      	mov	r7, r1
 800dffe:	2200      	movs	r2, #0
 800e000:	4620      	mov	r0, r4
 800e002:	4629      	mov	r1, r5
 800e004:	f7f2 fac8 	bl	8000598 <__aeabi_dmul>
 800e008:	4b3e      	ldr	r3, [pc, #248]	; (800e104 <atan+0x324>)
 800e00a:	2200      	movs	r2, #0
 800e00c:	f7f2 f90e 	bl	800022c <__adddf3>
 800e010:	4602      	mov	r2, r0
 800e012:	460b      	mov	r3, r1
 800e014:	4630      	mov	r0, r6
 800e016:	4639      	mov	r1, r7
 800e018:	f7f2 fbe8 	bl	80007ec <__aeabi_ddiv>
 800e01c:	f04f 0a02 	mov.w	sl, #2
 800e020:	4604      	mov	r4, r0
 800e022:	460d      	mov	r5, r1
 800e024:	e743      	b.n	800deae <atan+0xce>
 800e026:	462b      	mov	r3, r5
 800e028:	ee10 2a10 	vmov	r2, s0
 800e02c:	4939      	ldr	r1, [pc, #228]	; (800e114 <atan+0x334>)
 800e02e:	2000      	movs	r0, #0
 800e030:	f7f2 fbdc 	bl	80007ec <__aeabi_ddiv>
 800e034:	f04f 0a03 	mov.w	sl, #3
 800e038:	4604      	mov	r4, r0
 800e03a:	460d      	mov	r5, r1
 800e03c:	e737      	b.n	800deae <atan+0xce>
 800e03e:	4b36      	ldr	r3, [pc, #216]	; (800e118 <atan+0x338>)
 800e040:	4e36      	ldr	r6, [pc, #216]	; (800e11c <atan+0x33c>)
 800e042:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04a:	f7f2 f8ed 	bl	8000228 <__aeabi_dsub>
 800e04e:	4622      	mov	r2, r4
 800e050:	462b      	mov	r3, r5
 800e052:	f7f2 f8e9 	bl	8000228 <__aeabi_dsub>
 800e056:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e05a:	4602      	mov	r2, r0
 800e05c:	460b      	mov	r3, r1
 800e05e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e062:	f7f2 f8e1 	bl	8000228 <__aeabi_dsub>
 800e066:	f1bb 0f00 	cmp.w	fp, #0
 800e06a:	4604      	mov	r4, r0
 800e06c:	460d      	mov	r5, r1
 800e06e:	f6bf aed6 	bge.w	800de1e <atan+0x3e>
 800e072:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e076:	461d      	mov	r5, r3
 800e078:	e6d1      	b.n	800de1e <atan+0x3e>
 800e07a:	a51d      	add	r5, pc, #116	; (adr r5, 800e0f0 <atan+0x310>)
 800e07c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e080:	e6cd      	b.n	800de1e <atan+0x3e>
 800e082:	bf00      	nop
 800e084:	f3af 8000 	nop.w
 800e088:	54442d18 	.word	0x54442d18
 800e08c:	bff921fb 	.word	0xbff921fb
 800e090:	8800759c 	.word	0x8800759c
 800e094:	7e37e43c 	.word	0x7e37e43c
 800e098:	e322da11 	.word	0xe322da11
 800e09c:	3f90ad3a 	.word	0x3f90ad3a
 800e0a0:	24760deb 	.word	0x24760deb
 800e0a4:	3fa97b4b 	.word	0x3fa97b4b
 800e0a8:	a0d03d51 	.word	0xa0d03d51
 800e0ac:	3fb10d66 	.word	0x3fb10d66
 800e0b0:	c54c206e 	.word	0xc54c206e
 800e0b4:	3fb745cd 	.word	0x3fb745cd
 800e0b8:	920083ff 	.word	0x920083ff
 800e0bc:	3fc24924 	.word	0x3fc24924
 800e0c0:	5555550d 	.word	0x5555550d
 800e0c4:	3fd55555 	.word	0x3fd55555
 800e0c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800e0cc:	bfa2b444 	.word	0xbfa2b444
 800e0d0:	52defd9a 	.word	0x52defd9a
 800e0d4:	3fadde2d 	.word	0x3fadde2d
 800e0d8:	af749a6d 	.word	0xaf749a6d
 800e0dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800e0e0:	fe231671 	.word	0xfe231671
 800e0e4:	3fbc71c6 	.word	0x3fbc71c6
 800e0e8:	9998ebc4 	.word	0x9998ebc4
 800e0ec:	3fc99999 	.word	0x3fc99999
 800e0f0:	54442d18 	.word	0x54442d18
 800e0f4:	3ff921fb 	.word	0x3ff921fb
 800e0f8:	440fffff 	.word	0x440fffff
 800e0fc:	7ff00000 	.word	0x7ff00000
 800e100:	3fdbffff 	.word	0x3fdbffff
 800e104:	3ff00000 	.word	0x3ff00000
 800e108:	3ff2ffff 	.word	0x3ff2ffff
 800e10c:	40038000 	.word	0x40038000
 800e110:	3ff80000 	.word	0x3ff80000
 800e114:	bff00000 	.word	0xbff00000
 800e118:	0800f3e0 	.word	0x0800f3e0
 800e11c:	0800f3c0 	.word	0x0800f3c0

0800e120 <fabs>:
 800e120:	ec51 0b10 	vmov	r0, r1, d0
 800e124:	ee10 2a10 	vmov	r2, s0
 800e128:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e12c:	ec43 2b10 	vmov	d0, r2, r3
 800e130:	4770      	bx	lr
 800e132:	0000      	movs	r0, r0
 800e134:	0000      	movs	r0, r0
	...

0800e138 <__kernel_rem_pio2>:
 800e138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e13c:	ed2d 8b02 	vpush	{d8}
 800e140:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e144:	f112 0f14 	cmn.w	r2, #20
 800e148:	9306      	str	r3, [sp, #24]
 800e14a:	9104      	str	r1, [sp, #16]
 800e14c:	4bc2      	ldr	r3, [pc, #776]	; (800e458 <__kernel_rem_pio2+0x320>)
 800e14e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e150:	9009      	str	r0, [sp, #36]	; 0x24
 800e152:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	9b06      	ldr	r3, [sp, #24]
 800e15a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e15e:	bfa8      	it	ge
 800e160:	1ed4      	subge	r4, r2, #3
 800e162:	9305      	str	r3, [sp, #20]
 800e164:	bfb2      	itee	lt
 800e166:	2400      	movlt	r4, #0
 800e168:	2318      	movge	r3, #24
 800e16a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e16e:	f06f 0317 	mvn.w	r3, #23
 800e172:	fb04 3303 	mla	r3, r4, r3, r3
 800e176:	eb03 0a02 	add.w	sl, r3, r2
 800e17a:	9b00      	ldr	r3, [sp, #0]
 800e17c:	9a05      	ldr	r2, [sp, #20]
 800e17e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e448 <__kernel_rem_pio2+0x310>
 800e182:	eb03 0802 	add.w	r8, r3, r2
 800e186:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e188:	1aa7      	subs	r7, r4, r2
 800e18a:	ae20      	add	r6, sp, #128	; 0x80
 800e18c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e190:	2500      	movs	r5, #0
 800e192:	4545      	cmp	r5, r8
 800e194:	dd13      	ble.n	800e1be <__kernel_rem_pio2+0x86>
 800e196:	9b06      	ldr	r3, [sp, #24]
 800e198:	aa20      	add	r2, sp, #128	; 0x80
 800e19a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e19e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e1a2:	f04f 0800 	mov.w	r8, #0
 800e1a6:	9b00      	ldr	r3, [sp, #0]
 800e1a8:	4598      	cmp	r8, r3
 800e1aa:	dc31      	bgt.n	800e210 <__kernel_rem_pio2+0xd8>
 800e1ac:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e448 <__kernel_rem_pio2+0x310>
 800e1b0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e1b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e1b8:	462f      	mov	r7, r5
 800e1ba:	2600      	movs	r6, #0
 800e1bc:	e01b      	b.n	800e1f6 <__kernel_rem_pio2+0xbe>
 800e1be:	42ef      	cmn	r7, r5
 800e1c0:	d407      	bmi.n	800e1d2 <__kernel_rem_pio2+0x9a>
 800e1c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e1c6:	f7f2 f97d 	bl	80004c4 <__aeabi_i2d>
 800e1ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e1ce:	3501      	adds	r5, #1
 800e1d0:	e7df      	b.n	800e192 <__kernel_rem_pio2+0x5a>
 800e1d2:	ec51 0b18 	vmov	r0, r1, d8
 800e1d6:	e7f8      	b.n	800e1ca <__kernel_rem_pio2+0x92>
 800e1d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e1e0:	f7f2 f9da 	bl	8000598 <__aeabi_dmul>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	460b      	mov	r3, r1
 800e1e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1ec:	f7f2 f81e 	bl	800022c <__adddf3>
 800e1f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1f4:	3601      	adds	r6, #1
 800e1f6:	9b05      	ldr	r3, [sp, #20]
 800e1f8:	429e      	cmp	r6, r3
 800e1fa:	f1a7 0708 	sub.w	r7, r7, #8
 800e1fe:	ddeb      	ble.n	800e1d8 <__kernel_rem_pio2+0xa0>
 800e200:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e204:	f108 0801 	add.w	r8, r8, #1
 800e208:	ecab 7b02 	vstmia	fp!, {d7}
 800e20c:	3508      	adds	r5, #8
 800e20e:	e7ca      	b.n	800e1a6 <__kernel_rem_pio2+0x6e>
 800e210:	9b00      	ldr	r3, [sp, #0]
 800e212:	aa0c      	add	r2, sp, #48	; 0x30
 800e214:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e218:	930b      	str	r3, [sp, #44]	; 0x2c
 800e21a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e21c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e220:	9c00      	ldr	r4, [sp, #0]
 800e222:	930a      	str	r3, [sp, #40]	; 0x28
 800e224:	00e3      	lsls	r3, r4, #3
 800e226:	9308      	str	r3, [sp, #32]
 800e228:	ab98      	add	r3, sp, #608	; 0x260
 800e22a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e22e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e232:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e236:	ab70      	add	r3, sp, #448	; 0x1c0
 800e238:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e23c:	46c3      	mov	fp, r8
 800e23e:	46a1      	mov	r9, r4
 800e240:	f1b9 0f00 	cmp.w	r9, #0
 800e244:	f1a5 0508 	sub.w	r5, r5, #8
 800e248:	dc77      	bgt.n	800e33a <__kernel_rem_pio2+0x202>
 800e24a:	ec47 6b10 	vmov	d0, r6, r7
 800e24e:	4650      	mov	r0, sl
 800e250:	f000 fac2 	bl	800e7d8 <scalbn>
 800e254:	ec57 6b10 	vmov	r6, r7, d0
 800e258:	2200      	movs	r2, #0
 800e25a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e25e:	ee10 0a10 	vmov	r0, s0
 800e262:	4639      	mov	r1, r7
 800e264:	f7f2 f998 	bl	8000598 <__aeabi_dmul>
 800e268:	ec41 0b10 	vmov	d0, r0, r1
 800e26c:	f000 fb34 	bl	800e8d8 <floor>
 800e270:	4b7a      	ldr	r3, [pc, #488]	; (800e45c <__kernel_rem_pio2+0x324>)
 800e272:	ec51 0b10 	vmov	r0, r1, d0
 800e276:	2200      	movs	r2, #0
 800e278:	f7f2 f98e 	bl	8000598 <__aeabi_dmul>
 800e27c:	4602      	mov	r2, r0
 800e27e:	460b      	mov	r3, r1
 800e280:	4630      	mov	r0, r6
 800e282:	4639      	mov	r1, r7
 800e284:	f7f1 ffd0 	bl	8000228 <__aeabi_dsub>
 800e288:	460f      	mov	r7, r1
 800e28a:	4606      	mov	r6, r0
 800e28c:	f7f2 fc34 	bl	8000af8 <__aeabi_d2iz>
 800e290:	9002      	str	r0, [sp, #8]
 800e292:	f7f2 f917 	bl	80004c4 <__aeabi_i2d>
 800e296:	4602      	mov	r2, r0
 800e298:	460b      	mov	r3, r1
 800e29a:	4630      	mov	r0, r6
 800e29c:	4639      	mov	r1, r7
 800e29e:	f7f1 ffc3 	bl	8000228 <__aeabi_dsub>
 800e2a2:	f1ba 0f00 	cmp.w	sl, #0
 800e2a6:	4606      	mov	r6, r0
 800e2a8:	460f      	mov	r7, r1
 800e2aa:	dd6d      	ble.n	800e388 <__kernel_rem_pio2+0x250>
 800e2ac:	1e61      	subs	r1, r4, #1
 800e2ae:	ab0c      	add	r3, sp, #48	; 0x30
 800e2b0:	9d02      	ldr	r5, [sp, #8]
 800e2b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e2b6:	f1ca 0018 	rsb	r0, sl, #24
 800e2ba:	fa43 f200 	asr.w	r2, r3, r0
 800e2be:	4415      	add	r5, r2
 800e2c0:	4082      	lsls	r2, r0
 800e2c2:	1a9b      	subs	r3, r3, r2
 800e2c4:	aa0c      	add	r2, sp, #48	; 0x30
 800e2c6:	9502      	str	r5, [sp, #8]
 800e2c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e2cc:	f1ca 0217 	rsb	r2, sl, #23
 800e2d0:	fa43 fb02 	asr.w	fp, r3, r2
 800e2d4:	f1bb 0f00 	cmp.w	fp, #0
 800e2d8:	dd65      	ble.n	800e3a6 <__kernel_rem_pio2+0x26e>
 800e2da:	9b02      	ldr	r3, [sp, #8]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	3301      	adds	r3, #1
 800e2e0:	9302      	str	r3, [sp, #8]
 800e2e2:	4615      	mov	r5, r2
 800e2e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e2e8:	4294      	cmp	r4, r2
 800e2ea:	f300 809f 	bgt.w	800e42c <__kernel_rem_pio2+0x2f4>
 800e2ee:	f1ba 0f00 	cmp.w	sl, #0
 800e2f2:	dd07      	ble.n	800e304 <__kernel_rem_pio2+0x1cc>
 800e2f4:	f1ba 0f01 	cmp.w	sl, #1
 800e2f8:	f000 80c1 	beq.w	800e47e <__kernel_rem_pio2+0x346>
 800e2fc:	f1ba 0f02 	cmp.w	sl, #2
 800e300:	f000 80c7 	beq.w	800e492 <__kernel_rem_pio2+0x35a>
 800e304:	f1bb 0f02 	cmp.w	fp, #2
 800e308:	d14d      	bne.n	800e3a6 <__kernel_rem_pio2+0x26e>
 800e30a:	4632      	mov	r2, r6
 800e30c:	463b      	mov	r3, r7
 800e30e:	4954      	ldr	r1, [pc, #336]	; (800e460 <__kernel_rem_pio2+0x328>)
 800e310:	2000      	movs	r0, #0
 800e312:	f7f1 ff89 	bl	8000228 <__aeabi_dsub>
 800e316:	4606      	mov	r6, r0
 800e318:	460f      	mov	r7, r1
 800e31a:	2d00      	cmp	r5, #0
 800e31c:	d043      	beq.n	800e3a6 <__kernel_rem_pio2+0x26e>
 800e31e:	4650      	mov	r0, sl
 800e320:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e450 <__kernel_rem_pio2+0x318>
 800e324:	f000 fa58 	bl	800e7d8 <scalbn>
 800e328:	4630      	mov	r0, r6
 800e32a:	4639      	mov	r1, r7
 800e32c:	ec53 2b10 	vmov	r2, r3, d0
 800e330:	f7f1 ff7a 	bl	8000228 <__aeabi_dsub>
 800e334:	4606      	mov	r6, r0
 800e336:	460f      	mov	r7, r1
 800e338:	e035      	b.n	800e3a6 <__kernel_rem_pio2+0x26e>
 800e33a:	4b4a      	ldr	r3, [pc, #296]	; (800e464 <__kernel_rem_pio2+0x32c>)
 800e33c:	2200      	movs	r2, #0
 800e33e:	4630      	mov	r0, r6
 800e340:	4639      	mov	r1, r7
 800e342:	f7f2 f929 	bl	8000598 <__aeabi_dmul>
 800e346:	f7f2 fbd7 	bl	8000af8 <__aeabi_d2iz>
 800e34a:	f7f2 f8bb 	bl	80004c4 <__aeabi_i2d>
 800e34e:	4602      	mov	r2, r0
 800e350:	460b      	mov	r3, r1
 800e352:	ec43 2b18 	vmov	d8, r2, r3
 800e356:	4b44      	ldr	r3, [pc, #272]	; (800e468 <__kernel_rem_pio2+0x330>)
 800e358:	2200      	movs	r2, #0
 800e35a:	f7f2 f91d 	bl	8000598 <__aeabi_dmul>
 800e35e:	4602      	mov	r2, r0
 800e360:	460b      	mov	r3, r1
 800e362:	4630      	mov	r0, r6
 800e364:	4639      	mov	r1, r7
 800e366:	f7f1 ff5f 	bl	8000228 <__aeabi_dsub>
 800e36a:	f7f2 fbc5 	bl	8000af8 <__aeabi_d2iz>
 800e36e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e372:	f84b 0b04 	str.w	r0, [fp], #4
 800e376:	ec51 0b18 	vmov	r0, r1, d8
 800e37a:	f7f1 ff57 	bl	800022c <__adddf3>
 800e37e:	f109 39ff 	add.w	r9, r9, #4294967295
 800e382:	4606      	mov	r6, r0
 800e384:	460f      	mov	r7, r1
 800e386:	e75b      	b.n	800e240 <__kernel_rem_pio2+0x108>
 800e388:	d106      	bne.n	800e398 <__kernel_rem_pio2+0x260>
 800e38a:	1e63      	subs	r3, r4, #1
 800e38c:	aa0c      	add	r2, sp, #48	; 0x30
 800e38e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e392:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e396:	e79d      	b.n	800e2d4 <__kernel_rem_pio2+0x19c>
 800e398:	4b34      	ldr	r3, [pc, #208]	; (800e46c <__kernel_rem_pio2+0x334>)
 800e39a:	2200      	movs	r2, #0
 800e39c:	f7f2 fb82 	bl	8000aa4 <__aeabi_dcmpge>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d140      	bne.n	800e426 <__kernel_rem_pio2+0x2ee>
 800e3a4:	4683      	mov	fp, r0
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	4639      	mov	r1, r7
 800e3ae:	f7f2 fb5b 	bl	8000a68 <__aeabi_dcmpeq>
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	f000 80c1 	beq.w	800e53a <__kernel_rem_pio2+0x402>
 800e3b8:	1e65      	subs	r5, r4, #1
 800e3ba:	462b      	mov	r3, r5
 800e3bc:	2200      	movs	r2, #0
 800e3be:	9900      	ldr	r1, [sp, #0]
 800e3c0:	428b      	cmp	r3, r1
 800e3c2:	da6d      	bge.n	800e4a0 <__kernel_rem_pio2+0x368>
 800e3c4:	2a00      	cmp	r2, #0
 800e3c6:	f000 808a 	beq.w	800e4de <__kernel_rem_pio2+0x3a6>
 800e3ca:	ab0c      	add	r3, sp, #48	; 0x30
 800e3cc:	f1aa 0a18 	sub.w	sl, sl, #24
 800e3d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	f000 80ae 	beq.w	800e536 <__kernel_rem_pio2+0x3fe>
 800e3da:	4650      	mov	r0, sl
 800e3dc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e450 <__kernel_rem_pio2+0x318>
 800e3e0:	f000 f9fa 	bl	800e7d8 <scalbn>
 800e3e4:	1c6b      	adds	r3, r5, #1
 800e3e6:	00da      	lsls	r2, r3, #3
 800e3e8:	9205      	str	r2, [sp, #20]
 800e3ea:	ec57 6b10 	vmov	r6, r7, d0
 800e3ee:	aa70      	add	r2, sp, #448	; 0x1c0
 800e3f0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e464 <__kernel_rem_pio2+0x32c>
 800e3f4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e3f8:	462c      	mov	r4, r5
 800e3fa:	f04f 0800 	mov.w	r8, #0
 800e3fe:	2c00      	cmp	r4, #0
 800e400:	f280 80d4 	bge.w	800e5ac <__kernel_rem_pio2+0x474>
 800e404:	462c      	mov	r4, r5
 800e406:	2c00      	cmp	r4, #0
 800e408:	f2c0 8102 	blt.w	800e610 <__kernel_rem_pio2+0x4d8>
 800e40c:	4b18      	ldr	r3, [pc, #96]	; (800e470 <__kernel_rem_pio2+0x338>)
 800e40e:	461e      	mov	r6, r3
 800e410:	ab70      	add	r3, sp, #448	; 0x1c0
 800e412:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e416:	1b2b      	subs	r3, r5, r4
 800e418:	f04f 0900 	mov.w	r9, #0
 800e41c:	f04f 0a00 	mov.w	sl, #0
 800e420:	2700      	movs	r7, #0
 800e422:	9306      	str	r3, [sp, #24]
 800e424:	e0e6      	b.n	800e5f4 <__kernel_rem_pio2+0x4bc>
 800e426:	f04f 0b02 	mov.w	fp, #2
 800e42a:	e756      	b.n	800e2da <__kernel_rem_pio2+0x1a2>
 800e42c:	f8d8 3000 	ldr.w	r3, [r8]
 800e430:	bb05      	cbnz	r5, 800e474 <__kernel_rem_pio2+0x33c>
 800e432:	b123      	cbz	r3, 800e43e <__kernel_rem_pio2+0x306>
 800e434:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e438:	f8c8 3000 	str.w	r3, [r8]
 800e43c:	2301      	movs	r3, #1
 800e43e:	3201      	adds	r2, #1
 800e440:	f108 0804 	add.w	r8, r8, #4
 800e444:	461d      	mov	r5, r3
 800e446:	e74f      	b.n	800e2e8 <__kernel_rem_pio2+0x1b0>
	...
 800e454:	3ff00000 	.word	0x3ff00000
 800e458:	0800f440 	.word	0x0800f440
 800e45c:	40200000 	.word	0x40200000
 800e460:	3ff00000 	.word	0x3ff00000
 800e464:	3e700000 	.word	0x3e700000
 800e468:	41700000 	.word	0x41700000
 800e46c:	3fe00000 	.word	0x3fe00000
 800e470:	0800f400 	.word	0x0800f400
 800e474:	1acb      	subs	r3, r1, r3
 800e476:	f8c8 3000 	str.w	r3, [r8]
 800e47a:	462b      	mov	r3, r5
 800e47c:	e7df      	b.n	800e43e <__kernel_rem_pio2+0x306>
 800e47e:	1e62      	subs	r2, r4, #1
 800e480:	ab0c      	add	r3, sp, #48	; 0x30
 800e482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e486:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e48a:	a90c      	add	r1, sp, #48	; 0x30
 800e48c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e490:	e738      	b.n	800e304 <__kernel_rem_pio2+0x1cc>
 800e492:	1e62      	subs	r2, r4, #1
 800e494:	ab0c      	add	r3, sp, #48	; 0x30
 800e496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e49a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e49e:	e7f4      	b.n	800e48a <__kernel_rem_pio2+0x352>
 800e4a0:	a90c      	add	r1, sp, #48	; 0x30
 800e4a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	430a      	orrs	r2, r1
 800e4aa:	e788      	b.n	800e3be <__kernel_rem_pio2+0x286>
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e4b2:	2900      	cmp	r1, #0
 800e4b4:	d0fa      	beq.n	800e4ac <__kernel_rem_pio2+0x374>
 800e4b6:	9a08      	ldr	r2, [sp, #32]
 800e4b8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e4bc:	446a      	add	r2, sp
 800e4be:	3a98      	subs	r2, #152	; 0x98
 800e4c0:	9208      	str	r2, [sp, #32]
 800e4c2:	9a06      	ldr	r2, [sp, #24]
 800e4c4:	a920      	add	r1, sp, #128	; 0x80
 800e4c6:	18a2      	adds	r2, r4, r2
 800e4c8:	18e3      	adds	r3, r4, r3
 800e4ca:	f104 0801 	add.w	r8, r4, #1
 800e4ce:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e4d2:	9302      	str	r3, [sp, #8]
 800e4d4:	9b02      	ldr	r3, [sp, #8]
 800e4d6:	4543      	cmp	r3, r8
 800e4d8:	da04      	bge.n	800e4e4 <__kernel_rem_pio2+0x3ac>
 800e4da:	461c      	mov	r4, r3
 800e4dc:	e6a2      	b.n	800e224 <__kernel_rem_pio2+0xec>
 800e4de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	e7e4      	b.n	800e4ae <__kernel_rem_pio2+0x376>
 800e4e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4e6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e4ea:	f7f1 ffeb 	bl	80004c4 <__aeabi_i2d>
 800e4ee:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4f4:	46ab      	mov	fp, r5
 800e4f6:	461c      	mov	r4, r3
 800e4f8:	f04f 0900 	mov.w	r9, #0
 800e4fc:	2600      	movs	r6, #0
 800e4fe:	2700      	movs	r7, #0
 800e500:	9b05      	ldr	r3, [sp, #20]
 800e502:	4599      	cmp	r9, r3
 800e504:	dd06      	ble.n	800e514 <__kernel_rem_pio2+0x3dc>
 800e506:	9b08      	ldr	r3, [sp, #32]
 800e508:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e50c:	f108 0801 	add.w	r8, r8, #1
 800e510:	9308      	str	r3, [sp, #32]
 800e512:	e7df      	b.n	800e4d4 <__kernel_rem_pio2+0x39c>
 800e514:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e518:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e51c:	f7f2 f83c 	bl	8000598 <__aeabi_dmul>
 800e520:	4602      	mov	r2, r0
 800e522:	460b      	mov	r3, r1
 800e524:	4630      	mov	r0, r6
 800e526:	4639      	mov	r1, r7
 800e528:	f7f1 fe80 	bl	800022c <__adddf3>
 800e52c:	f109 0901 	add.w	r9, r9, #1
 800e530:	4606      	mov	r6, r0
 800e532:	460f      	mov	r7, r1
 800e534:	e7e4      	b.n	800e500 <__kernel_rem_pio2+0x3c8>
 800e536:	3d01      	subs	r5, #1
 800e538:	e747      	b.n	800e3ca <__kernel_rem_pio2+0x292>
 800e53a:	ec47 6b10 	vmov	d0, r6, r7
 800e53e:	f1ca 0000 	rsb	r0, sl, #0
 800e542:	f000 f949 	bl	800e7d8 <scalbn>
 800e546:	ec57 6b10 	vmov	r6, r7, d0
 800e54a:	4ba0      	ldr	r3, [pc, #640]	; (800e7cc <__kernel_rem_pio2+0x694>)
 800e54c:	ee10 0a10 	vmov	r0, s0
 800e550:	2200      	movs	r2, #0
 800e552:	4639      	mov	r1, r7
 800e554:	f7f2 faa6 	bl	8000aa4 <__aeabi_dcmpge>
 800e558:	b1f8      	cbz	r0, 800e59a <__kernel_rem_pio2+0x462>
 800e55a:	4b9d      	ldr	r3, [pc, #628]	; (800e7d0 <__kernel_rem_pio2+0x698>)
 800e55c:	2200      	movs	r2, #0
 800e55e:	4630      	mov	r0, r6
 800e560:	4639      	mov	r1, r7
 800e562:	f7f2 f819 	bl	8000598 <__aeabi_dmul>
 800e566:	f7f2 fac7 	bl	8000af8 <__aeabi_d2iz>
 800e56a:	4680      	mov	r8, r0
 800e56c:	f7f1 ffaa 	bl	80004c4 <__aeabi_i2d>
 800e570:	4b96      	ldr	r3, [pc, #600]	; (800e7cc <__kernel_rem_pio2+0x694>)
 800e572:	2200      	movs	r2, #0
 800e574:	f7f2 f810 	bl	8000598 <__aeabi_dmul>
 800e578:	460b      	mov	r3, r1
 800e57a:	4602      	mov	r2, r0
 800e57c:	4639      	mov	r1, r7
 800e57e:	4630      	mov	r0, r6
 800e580:	f7f1 fe52 	bl	8000228 <__aeabi_dsub>
 800e584:	f7f2 fab8 	bl	8000af8 <__aeabi_d2iz>
 800e588:	1c65      	adds	r5, r4, #1
 800e58a:	ab0c      	add	r3, sp, #48	; 0x30
 800e58c:	f10a 0a18 	add.w	sl, sl, #24
 800e590:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e594:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e598:	e71f      	b.n	800e3da <__kernel_rem_pio2+0x2a2>
 800e59a:	4630      	mov	r0, r6
 800e59c:	4639      	mov	r1, r7
 800e59e:	f7f2 faab 	bl	8000af8 <__aeabi_d2iz>
 800e5a2:	ab0c      	add	r3, sp, #48	; 0x30
 800e5a4:	4625      	mov	r5, r4
 800e5a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e5aa:	e716      	b.n	800e3da <__kernel_rem_pio2+0x2a2>
 800e5ac:	ab0c      	add	r3, sp, #48	; 0x30
 800e5ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e5b2:	f7f1 ff87 	bl	80004c4 <__aeabi_i2d>
 800e5b6:	4632      	mov	r2, r6
 800e5b8:	463b      	mov	r3, r7
 800e5ba:	f7f1 ffed 	bl	8000598 <__aeabi_dmul>
 800e5be:	4642      	mov	r2, r8
 800e5c0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e5c4:	464b      	mov	r3, r9
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	4639      	mov	r1, r7
 800e5ca:	f7f1 ffe5 	bl	8000598 <__aeabi_dmul>
 800e5ce:	3c01      	subs	r4, #1
 800e5d0:	4606      	mov	r6, r0
 800e5d2:	460f      	mov	r7, r1
 800e5d4:	e713      	b.n	800e3fe <__kernel_rem_pio2+0x2c6>
 800e5d6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e5da:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e5de:	f7f1 ffdb 	bl	8000598 <__aeabi_dmul>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	4648      	mov	r0, r9
 800e5e8:	4651      	mov	r1, sl
 800e5ea:	f7f1 fe1f 	bl	800022c <__adddf3>
 800e5ee:	3701      	adds	r7, #1
 800e5f0:	4681      	mov	r9, r0
 800e5f2:	468a      	mov	sl, r1
 800e5f4:	9b00      	ldr	r3, [sp, #0]
 800e5f6:	429f      	cmp	r7, r3
 800e5f8:	dc02      	bgt.n	800e600 <__kernel_rem_pio2+0x4c8>
 800e5fa:	9b06      	ldr	r3, [sp, #24]
 800e5fc:	429f      	cmp	r7, r3
 800e5fe:	ddea      	ble.n	800e5d6 <__kernel_rem_pio2+0x49e>
 800e600:	9a06      	ldr	r2, [sp, #24]
 800e602:	ab48      	add	r3, sp, #288	; 0x120
 800e604:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e608:	e9c6 9a00 	strd	r9, sl, [r6]
 800e60c:	3c01      	subs	r4, #1
 800e60e:	e6fa      	b.n	800e406 <__kernel_rem_pio2+0x2ce>
 800e610:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e612:	2b02      	cmp	r3, #2
 800e614:	dc0b      	bgt.n	800e62e <__kernel_rem_pio2+0x4f6>
 800e616:	2b00      	cmp	r3, #0
 800e618:	dc39      	bgt.n	800e68e <__kernel_rem_pio2+0x556>
 800e61a:	d05d      	beq.n	800e6d8 <__kernel_rem_pio2+0x5a0>
 800e61c:	9b02      	ldr	r3, [sp, #8]
 800e61e:	f003 0007 	and.w	r0, r3, #7
 800e622:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e626:	ecbd 8b02 	vpop	{d8}
 800e62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e62e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e630:	2b03      	cmp	r3, #3
 800e632:	d1f3      	bne.n	800e61c <__kernel_rem_pio2+0x4e4>
 800e634:	9b05      	ldr	r3, [sp, #20]
 800e636:	9500      	str	r5, [sp, #0]
 800e638:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e63c:	eb0d 0403 	add.w	r4, sp, r3
 800e640:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e644:	46a2      	mov	sl, r4
 800e646:	9b00      	ldr	r3, [sp, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f1aa 0a08 	sub.w	sl, sl, #8
 800e64e:	dc69      	bgt.n	800e724 <__kernel_rem_pio2+0x5ec>
 800e650:	46aa      	mov	sl, r5
 800e652:	f1ba 0f01 	cmp.w	sl, #1
 800e656:	f1a4 0408 	sub.w	r4, r4, #8
 800e65a:	f300 8083 	bgt.w	800e764 <__kernel_rem_pio2+0x62c>
 800e65e:	9c05      	ldr	r4, [sp, #20]
 800e660:	ab48      	add	r3, sp, #288	; 0x120
 800e662:	441c      	add	r4, r3
 800e664:	2000      	movs	r0, #0
 800e666:	2100      	movs	r1, #0
 800e668:	2d01      	cmp	r5, #1
 800e66a:	f300 809a 	bgt.w	800e7a2 <__kernel_rem_pio2+0x66a>
 800e66e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e672:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e676:	f1bb 0f00 	cmp.w	fp, #0
 800e67a:	f040 8098 	bne.w	800e7ae <__kernel_rem_pio2+0x676>
 800e67e:	9b04      	ldr	r3, [sp, #16]
 800e680:	e9c3 7800 	strd	r7, r8, [r3]
 800e684:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e688:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e68c:	e7c6      	b.n	800e61c <__kernel_rem_pio2+0x4e4>
 800e68e:	9e05      	ldr	r6, [sp, #20]
 800e690:	ab48      	add	r3, sp, #288	; 0x120
 800e692:	441e      	add	r6, r3
 800e694:	462c      	mov	r4, r5
 800e696:	2000      	movs	r0, #0
 800e698:	2100      	movs	r1, #0
 800e69a:	2c00      	cmp	r4, #0
 800e69c:	da33      	bge.n	800e706 <__kernel_rem_pio2+0x5ce>
 800e69e:	f1bb 0f00 	cmp.w	fp, #0
 800e6a2:	d036      	beq.n	800e712 <__kernel_rem_pio2+0x5da>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6aa:	9c04      	ldr	r4, [sp, #16]
 800e6ac:	e9c4 2300 	strd	r2, r3, [r4]
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	460b      	mov	r3, r1
 800e6b4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e6b8:	f7f1 fdb6 	bl	8000228 <__aeabi_dsub>
 800e6bc:	ae4a      	add	r6, sp, #296	; 0x128
 800e6be:	2401      	movs	r4, #1
 800e6c0:	42a5      	cmp	r5, r4
 800e6c2:	da29      	bge.n	800e718 <__kernel_rem_pio2+0x5e0>
 800e6c4:	f1bb 0f00 	cmp.w	fp, #0
 800e6c8:	d002      	beq.n	800e6d0 <__kernel_rem_pio2+0x598>
 800e6ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	9b04      	ldr	r3, [sp, #16]
 800e6d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e6d6:	e7a1      	b.n	800e61c <__kernel_rem_pio2+0x4e4>
 800e6d8:	9c05      	ldr	r4, [sp, #20]
 800e6da:	ab48      	add	r3, sp, #288	; 0x120
 800e6dc:	441c      	add	r4, r3
 800e6de:	2000      	movs	r0, #0
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	2d00      	cmp	r5, #0
 800e6e4:	da09      	bge.n	800e6fa <__kernel_rem_pio2+0x5c2>
 800e6e6:	f1bb 0f00 	cmp.w	fp, #0
 800e6ea:	d002      	beq.n	800e6f2 <__kernel_rem_pio2+0x5ba>
 800e6ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	9b04      	ldr	r3, [sp, #16]
 800e6f4:	e9c3 0100 	strd	r0, r1, [r3]
 800e6f8:	e790      	b.n	800e61c <__kernel_rem_pio2+0x4e4>
 800e6fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e6fe:	f7f1 fd95 	bl	800022c <__adddf3>
 800e702:	3d01      	subs	r5, #1
 800e704:	e7ed      	b.n	800e6e2 <__kernel_rem_pio2+0x5aa>
 800e706:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e70a:	f7f1 fd8f 	bl	800022c <__adddf3>
 800e70e:	3c01      	subs	r4, #1
 800e710:	e7c3      	b.n	800e69a <__kernel_rem_pio2+0x562>
 800e712:	4602      	mov	r2, r0
 800e714:	460b      	mov	r3, r1
 800e716:	e7c8      	b.n	800e6aa <__kernel_rem_pio2+0x572>
 800e718:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e71c:	f7f1 fd86 	bl	800022c <__adddf3>
 800e720:	3401      	adds	r4, #1
 800e722:	e7cd      	b.n	800e6c0 <__kernel_rem_pio2+0x588>
 800e724:	e9da 8900 	ldrd	r8, r9, [sl]
 800e728:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e72c:	9b00      	ldr	r3, [sp, #0]
 800e72e:	3b01      	subs	r3, #1
 800e730:	9300      	str	r3, [sp, #0]
 800e732:	4632      	mov	r2, r6
 800e734:	463b      	mov	r3, r7
 800e736:	4640      	mov	r0, r8
 800e738:	4649      	mov	r1, r9
 800e73a:	f7f1 fd77 	bl	800022c <__adddf3>
 800e73e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e742:	4602      	mov	r2, r0
 800e744:	460b      	mov	r3, r1
 800e746:	4640      	mov	r0, r8
 800e748:	4649      	mov	r1, r9
 800e74a:	f7f1 fd6d 	bl	8000228 <__aeabi_dsub>
 800e74e:	4632      	mov	r2, r6
 800e750:	463b      	mov	r3, r7
 800e752:	f7f1 fd6b 	bl	800022c <__adddf3>
 800e756:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e75a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e75e:	ed8a 7b00 	vstr	d7, [sl]
 800e762:	e770      	b.n	800e646 <__kernel_rem_pio2+0x50e>
 800e764:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e768:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e76c:	4640      	mov	r0, r8
 800e76e:	4632      	mov	r2, r6
 800e770:	463b      	mov	r3, r7
 800e772:	4649      	mov	r1, r9
 800e774:	f7f1 fd5a 	bl	800022c <__adddf3>
 800e778:	e9cd 0100 	strd	r0, r1, [sp]
 800e77c:	4602      	mov	r2, r0
 800e77e:	460b      	mov	r3, r1
 800e780:	4640      	mov	r0, r8
 800e782:	4649      	mov	r1, r9
 800e784:	f7f1 fd50 	bl	8000228 <__aeabi_dsub>
 800e788:	4632      	mov	r2, r6
 800e78a:	463b      	mov	r3, r7
 800e78c:	f7f1 fd4e 	bl	800022c <__adddf3>
 800e790:	ed9d 7b00 	vldr	d7, [sp]
 800e794:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e798:	ed84 7b00 	vstr	d7, [r4]
 800e79c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7a0:	e757      	b.n	800e652 <__kernel_rem_pio2+0x51a>
 800e7a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e7a6:	f7f1 fd41 	bl	800022c <__adddf3>
 800e7aa:	3d01      	subs	r5, #1
 800e7ac:	e75c      	b.n	800e668 <__kernel_rem_pio2+0x530>
 800e7ae:	9b04      	ldr	r3, [sp, #16]
 800e7b0:	9a04      	ldr	r2, [sp, #16]
 800e7b2:	601f      	str	r7, [r3, #0]
 800e7b4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e7b8:	605c      	str	r4, [r3, #4]
 800e7ba:	609d      	str	r5, [r3, #8]
 800e7bc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e7c0:	60d3      	str	r3, [r2, #12]
 800e7c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7c6:	6110      	str	r0, [r2, #16]
 800e7c8:	6153      	str	r3, [r2, #20]
 800e7ca:	e727      	b.n	800e61c <__kernel_rem_pio2+0x4e4>
 800e7cc:	41700000 	.word	0x41700000
 800e7d0:	3e700000 	.word	0x3e700000
 800e7d4:	00000000 	.word	0x00000000

0800e7d8 <scalbn>:
 800e7d8:	b570      	push	{r4, r5, r6, lr}
 800e7da:	ec55 4b10 	vmov	r4, r5, d0
 800e7de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e7e2:	4606      	mov	r6, r0
 800e7e4:	462b      	mov	r3, r5
 800e7e6:	b999      	cbnz	r1, 800e810 <scalbn+0x38>
 800e7e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e7ec:	4323      	orrs	r3, r4
 800e7ee:	d03f      	beq.n	800e870 <scalbn+0x98>
 800e7f0:	4b35      	ldr	r3, [pc, #212]	; (800e8c8 <scalbn+0xf0>)
 800e7f2:	4629      	mov	r1, r5
 800e7f4:	ee10 0a10 	vmov	r0, s0
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	f7f1 fecd 	bl	8000598 <__aeabi_dmul>
 800e7fe:	4b33      	ldr	r3, [pc, #204]	; (800e8cc <scalbn+0xf4>)
 800e800:	429e      	cmp	r6, r3
 800e802:	4604      	mov	r4, r0
 800e804:	460d      	mov	r5, r1
 800e806:	da10      	bge.n	800e82a <scalbn+0x52>
 800e808:	a327      	add	r3, pc, #156	; (adr r3, 800e8a8 <scalbn+0xd0>)
 800e80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80e:	e01f      	b.n	800e850 <scalbn+0x78>
 800e810:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e814:	4291      	cmp	r1, r2
 800e816:	d10c      	bne.n	800e832 <scalbn+0x5a>
 800e818:	ee10 2a10 	vmov	r2, s0
 800e81c:	4620      	mov	r0, r4
 800e81e:	4629      	mov	r1, r5
 800e820:	f7f1 fd04 	bl	800022c <__adddf3>
 800e824:	4604      	mov	r4, r0
 800e826:	460d      	mov	r5, r1
 800e828:	e022      	b.n	800e870 <scalbn+0x98>
 800e82a:	460b      	mov	r3, r1
 800e82c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e830:	3936      	subs	r1, #54	; 0x36
 800e832:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e836:	4296      	cmp	r6, r2
 800e838:	dd0d      	ble.n	800e856 <scalbn+0x7e>
 800e83a:	2d00      	cmp	r5, #0
 800e83c:	a11c      	add	r1, pc, #112	; (adr r1, 800e8b0 <scalbn+0xd8>)
 800e83e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e842:	da02      	bge.n	800e84a <scalbn+0x72>
 800e844:	a11c      	add	r1, pc, #112	; (adr r1, 800e8b8 <scalbn+0xe0>)
 800e846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e84a:	a319      	add	r3, pc, #100	; (adr r3, 800e8b0 <scalbn+0xd8>)
 800e84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e850:	f7f1 fea2 	bl	8000598 <__aeabi_dmul>
 800e854:	e7e6      	b.n	800e824 <scalbn+0x4c>
 800e856:	1872      	adds	r2, r6, r1
 800e858:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e85c:	428a      	cmp	r2, r1
 800e85e:	dcec      	bgt.n	800e83a <scalbn+0x62>
 800e860:	2a00      	cmp	r2, #0
 800e862:	dd08      	ble.n	800e876 <scalbn+0x9e>
 800e864:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e868:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e86c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e870:	ec45 4b10 	vmov	d0, r4, r5
 800e874:	bd70      	pop	{r4, r5, r6, pc}
 800e876:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e87a:	da08      	bge.n	800e88e <scalbn+0xb6>
 800e87c:	2d00      	cmp	r5, #0
 800e87e:	a10a      	add	r1, pc, #40	; (adr r1, 800e8a8 <scalbn+0xd0>)
 800e880:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e884:	dac0      	bge.n	800e808 <scalbn+0x30>
 800e886:	a10e      	add	r1, pc, #56	; (adr r1, 800e8c0 <scalbn+0xe8>)
 800e888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e88c:	e7bc      	b.n	800e808 <scalbn+0x30>
 800e88e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e892:	3236      	adds	r2, #54	; 0x36
 800e894:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e898:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e89c:	4620      	mov	r0, r4
 800e89e:	4b0c      	ldr	r3, [pc, #48]	; (800e8d0 <scalbn+0xf8>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	e7d5      	b.n	800e850 <scalbn+0x78>
 800e8a4:	f3af 8000 	nop.w
 800e8a8:	c2f8f359 	.word	0xc2f8f359
 800e8ac:	01a56e1f 	.word	0x01a56e1f
 800e8b0:	8800759c 	.word	0x8800759c
 800e8b4:	7e37e43c 	.word	0x7e37e43c
 800e8b8:	8800759c 	.word	0x8800759c
 800e8bc:	fe37e43c 	.word	0xfe37e43c
 800e8c0:	c2f8f359 	.word	0xc2f8f359
 800e8c4:	81a56e1f 	.word	0x81a56e1f
 800e8c8:	43500000 	.word	0x43500000
 800e8cc:	ffff3cb0 	.word	0xffff3cb0
 800e8d0:	3c900000 	.word	0x3c900000
 800e8d4:	00000000 	.word	0x00000000

0800e8d8 <floor>:
 800e8d8:	ec51 0b10 	vmov	r0, r1, d0
 800e8dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800e8e8:	2e13      	cmp	r6, #19
 800e8ea:	ee10 5a10 	vmov	r5, s0
 800e8ee:	ee10 8a10 	vmov	r8, s0
 800e8f2:	460c      	mov	r4, r1
 800e8f4:	dc31      	bgt.n	800e95a <floor+0x82>
 800e8f6:	2e00      	cmp	r6, #0
 800e8f8:	da14      	bge.n	800e924 <floor+0x4c>
 800e8fa:	a333      	add	r3, pc, #204	; (adr r3, 800e9c8 <floor+0xf0>)
 800e8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e900:	f7f1 fc94 	bl	800022c <__adddf3>
 800e904:	2200      	movs	r2, #0
 800e906:	2300      	movs	r3, #0
 800e908:	f7f2 f8d6 	bl	8000ab8 <__aeabi_dcmpgt>
 800e90c:	b138      	cbz	r0, 800e91e <floor+0x46>
 800e90e:	2c00      	cmp	r4, #0
 800e910:	da53      	bge.n	800e9ba <floor+0xe2>
 800e912:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e916:	4325      	orrs	r5, r4
 800e918:	d052      	beq.n	800e9c0 <floor+0xe8>
 800e91a:	4c2d      	ldr	r4, [pc, #180]	; (800e9d0 <floor+0xf8>)
 800e91c:	2500      	movs	r5, #0
 800e91e:	4621      	mov	r1, r4
 800e920:	4628      	mov	r0, r5
 800e922:	e024      	b.n	800e96e <floor+0x96>
 800e924:	4f2b      	ldr	r7, [pc, #172]	; (800e9d4 <floor+0xfc>)
 800e926:	4137      	asrs	r7, r6
 800e928:	ea01 0307 	and.w	r3, r1, r7
 800e92c:	4303      	orrs	r3, r0
 800e92e:	d01e      	beq.n	800e96e <floor+0x96>
 800e930:	a325      	add	r3, pc, #148	; (adr r3, 800e9c8 <floor+0xf0>)
 800e932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e936:	f7f1 fc79 	bl	800022c <__adddf3>
 800e93a:	2200      	movs	r2, #0
 800e93c:	2300      	movs	r3, #0
 800e93e:	f7f2 f8bb 	bl	8000ab8 <__aeabi_dcmpgt>
 800e942:	2800      	cmp	r0, #0
 800e944:	d0eb      	beq.n	800e91e <floor+0x46>
 800e946:	2c00      	cmp	r4, #0
 800e948:	bfbe      	ittt	lt
 800e94a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e94e:	4133      	asrlt	r3, r6
 800e950:	18e4      	addlt	r4, r4, r3
 800e952:	ea24 0407 	bic.w	r4, r4, r7
 800e956:	2500      	movs	r5, #0
 800e958:	e7e1      	b.n	800e91e <floor+0x46>
 800e95a:	2e33      	cmp	r6, #51	; 0x33
 800e95c:	dd0b      	ble.n	800e976 <floor+0x9e>
 800e95e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e962:	d104      	bne.n	800e96e <floor+0x96>
 800e964:	ee10 2a10 	vmov	r2, s0
 800e968:	460b      	mov	r3, r1
 800e96a:	f7f1 fc5f 	bl	800022c <__adddf3>
 800e96e:	ec41 0b10 	vmov	d0, r0, r1
 800e972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e976:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800e97a:	f04f 37ff 	mov.w	r7, #4294967295
 800e97e:	40df      	lsrs	r7, r3
 800e980:	4238      	tst	r0, r7
 800e982:	d0f4      	beq.n	800e96e <floor+0x96>
 800e984:	a310      	add	r3, pc, #64	; (adr r3, 800e9c8 <floor+0xf0>)
 800e986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98a:	f7f1 fc4f 	bl	800022c <__adddf3>
 800e98e:	2200      	movs	r2, #0
 800e990:	2300      	movs	r3, #0
 800e992:	f7f2 f891 	bl	8000ab8 <__aeabi_dcmpgt>
 800e996:	2800      	cmp	r0, #0
 800e998:	d0c1      	beq.n	800e91e <floor+0x46>
 800e99a:	2c00      	cmp	r4, #0
 800e99c:	da0a      	bge.n	800e9b4 <floor+0xdc>
 800e99e:	2e14      	cmp	r6, #20
 800e9a0:	d101      	bne.n	800e9a6 <floor+0xce>
 800e9a2:	3401      	adds	r4, #1
 800e9a4:	e006      	b.n	800e9b4 <floor+0xdc>
 800e9a6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	40b3      	lsls	r3, r6
 800e9ae:	441d      	add	r5, r3
 800e9b0:	45a8      	cmp	r8, r5
 800e9b2:	d8f6      	bhi.n	800e9a2 <floor+0xca>
 800e9b4:	ea25 0507 	bic.w	r5, r5, r7
 800e9b8:	e7b1      	b.n	800e91e <floor+0x46>
 800e9ba:	2500      	movs	r5, #0
 800e9bc:	462c      	mov	r4, r5
 800e9be:	e7ae      	b.n	800e91e <floor+0x46>
 800e9c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e9c4:	e7ab      	b.n	800e91e <floor+0x46>
 800e9c6:	bf00      	nop
 800e9c8:	8800759c 	.word	0x8800759c
 800e9cc:	7e37e43c 	.word	0x7e37e43c
 800e9d0:	bff00000 	.word	0xbff00000
 800e9d4:	000fffff 	.word	0x000fffff

0800e9d8 <realloc>:
 800e9d8:	4b02      	ldr	r3, [pc, #8]	; (800e9e4 <realloc+0xc>)
 800e9da:	460a      	mov	r2, r1
 800e9dc:	4601      	mov	r1, r0
 800e9de:	6818      	ldr	r0, [r3, #0]
 800e9e0:	f000 b802 	b.w	800e9e8 <_realloc_r>
 800e9e4:	20000084 	.word	0x20000084

0800e9e8 <_realloc_r>:
 800e9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ec:	4680      	mov	r8, r0
 800e9ee:	4614      	mov	r4, r2
 800e9f0:	460e      	mov	r6, r1
 800e9f2:	b921      	cbnz	r1, 800e9fe <_realloc_r+0x16>
 800e9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9f8:	4611      	mov	r1, r2
 800e9fa:	f000 b8d3 	b.w	800eba4 <_malloc_r>
 800e9fe:	b92a      	cbnz	r2, 800ea0c <_realloc_r+0x24>
 800ea00:	f000 f864 	bl	800eacc <_free_r>
 800ea04:	4625      	mov	r5, r4
 800ea06:	4628      	mov	r0, r5
 800ea08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea0c:	f000 f956 	bl	800ecbc <_malloc_usable_size_r>
 800ea10:	4284      	cmp	r4, r0
 800ea12:	4607      	mov	r7, r0
 800ea14:	d802      	bhi.n	800ea1c <_realloc_r+0x34>
 800ea16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea1a:	d812      	bhi.n	800ea42 <_realloc_r+0x5a>
 800ea1c:	4621      	mov	r1, r4
 800ea1e:	4640      	mov	r0, r8
 800ea20:	f000 f8c0 	bl	800eba4 <_malloc_r>
 800ea24:	4605      	mov	r5, r0
 800ea26:	2800      	cmp	r0, #0
 800ea28:	d0ed      	beq.n	800ea06 <_realloc_r+0x1e>
 800ea2a:	42bc      	cmp	r4, r7
 800ea2c:	4622      	mov	r2, r4
 800ea2e:	4631      	mov	r1, r6
 800ea30:	bf28      	it	cs
 800ea32:	463a      	movcs	r2, r7
 800ea34:	f000 f83c 	bl	800eab0 <memcpy>
 800ea38:	4631      	mov	r1, r6
 800ea3a:	4640      	mov	r0, r8
 800ea3c:	f000 f846 	bl	800eacc <_free_r>
 800ea40:	e7e1      	b.n	800ea06 <_realloc_r+0x1e>
 800ea42:	4635      	mov	r5, r6
 800ea44:	e7df      	b.n	800ea06 <_realloc_r+0x1e>

0800ea46 <memset>:
 800ea46:	4402      	add	r2, r0
 800ea48:	4603      	mov	r3, r0
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d100      	bne.n	800ea50 <memset+0xa>
 800ea4e:	4770      	bx	lr
 800ea50:	f803 1b01 	strb.w	r1, [r3], #1
 800ea54:	e7f9      	b.n	800ea4a <memset+0x4>
	...

0800ea58 <__errno>:
 800ea58:	4b01      	ldr	r3, [pc, #4]	; (800ea60 <__errno+0x8>)
 800ea5a:	6818      	ldr	r0, [r3, #0]
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	20000084 	.word	0x20000084

0800ea64 <__libc_init_array>:
 800ea64:	b570      	push	{r4, r5, r6, lr}
 800ea66:	4d0d      	ldr	r5, [pc, #52]	; (800ea9c <__libc_init_array+0x38>)
 800ea68:	4c0d      	ldr	r4, [pc, #52]	; (800eaa0 <__libc_init_array+0x3c>)
 800ea6a:	1b64      	subs	r4, r4, r5
 800ea6c:	10a4      	asrs	r4, r4, #2
 800ea6e:	2600      	movs	r6, #0
 800ea70:	42a6      	cmp	r6, r4
 800ea72:	d109      	bne.n	800ea88 <__libc_init_array+0x24>
 800ea74:	4d0b      	ldr	r5, [pc, #44]	; (800eaa4 <__libc_init_array+0x40>)
 800ea76:	4c0c      	ldr	r4, [pc, #48]	; (800eaa8 <__libc_init_array+0x44>)
 800ea78:	f000 f938 	bl	800ecec <_init>
 800ea7c:	1b64      	subs	r4, r4, r5
 800ea7e:	10a4      	asrs	r4, r4, #2
 800ea80:	2600      	movs	r6, #0
 800ea82:	42a6      	cmp	r6, r4
 800ea84:	d105      	bne.n	800ea92 <__libc_init_array+0x2e>
 800ea86:	bd70      	pop	{r4, r5, r6, pc}
 800ea88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea8c:	4798      	blx	r3
 800ea8e:	3601      	adds	r6, #1
 800ea90:	e7ee      	b.n	800ea70 <__libc_init_array+0xc>
 800ea92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea96:	4798      	blx	r3
 800ea98:	3601      	adds	r6, #1
 800ea9a:	e7f2      	b.n	800ea82 <__libc_init_array+0x1e>
 800ea9c:	0800f458 	.word	0x0800f458
 800eaa0:	0800f458 	.word	0x0800f458
 800eaa4:	0800f458 	.word	0x0800f458
 800eaa8:	0800f460 	.word	0x0800f460

0800eaac <__retarget_lock_acquire_recursive>:
 800eaac:	4770      	bx	lr

0800eaae <__retarget_lock_release_recursive>:
 800eaae:	4770      	bx	lr

0800eab0 <memcpy>:
 800eab0:	440a      	add	r2, r1
 800eab2:	4291      	cmp	r1, r2
 800eab4:	f100 33ff 	add.w	r3, r0, #4294967295
 800eab8:	d100      	bne.n	800eabc <memcpy+0xc>
 800eaba:	4770      	bx	lr
 800eabc:	b510      	push	{r4, lr}
 800eabe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eac6:	4291      	cmp	r1, r2
 800eac8:	d1f9      	bne.n	800eabe <memcpy+0xe>
 800eaca:	bd10      	pop	{r4, pc}

0800eacc <_free_r>:
 800eacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eace:	2900      	cmp	r1, #0
 800ead0:	d044      	beq.n	800eb5c <_free_r+0x90>
 800ead2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ead6:	9001      	str	r0, [sp, #4]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	f1a1 0404 	sub.w	r4, r1, #4
 800eade:	bfb8      	it	lt
 800eae0:	18e4      	addlt	r4, r4, r3
 800eae2:	f000 f8df 	bl	800eca4 <__malloc_lock>
 800eae6:	4a1e      	ldr	r2, [pc, #120]	; (800eb60 <_free_r+0x94>)
 800eae8:	9801      	ldr	r0, [sp, #4]
 800eaea:	6813      	ldr	r3, [r2, #0]
 800eaec:	b933      	cbnz	r3, 800eafc <_free_r+0x30>
 800eaee:	6063      	str	r3, [r4, #4]
 800eaf0:	6014      	str	r4, [r2, #0]
 800eaf2:	b003      	add	sp, #12
 800eaf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eaf8:	f000 b8da 	b.w	800ecb0 <__malloc_unlock>
 800eafc:	42a3      	cmp	r3, r4
 800eafe:	d908      	bls.n	800eb12 <_free_r+0x46>
 800eb00:	6825      	ldr	r5, [r4, #0]
 800eb02:	1961      	adds	r1, r4, r5
 800eb04:	428b      	cmp	r3, r1
 800eb06:	bf01      	itttt	eq
 800eb08:	6819      	ldreq	r1, [r3, #0]
 800eb0a:	685b      	ldreq	r3, [r3, #4]
 800eb0c:	1949      	addeq	r1, r1, r5
 800eb0e:	6021      	streq	r1, [r4, #0]
 800eb10:	e7ed      	b.n	800eaee <_free_r+0x22>
 800eb12:	461a      	mov	r2, r3
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	b10b      	cbz	r3, 800eb1c <_free_r+0x50>
 800eb18:	42a3      	cmp	r3, r4
 800eb1a:	d9fa      	bls.n	800eb12 <_free_r+0x46>
 800eb1c:	6811      	ldr	r1, [r2, #0]
 800eb1e:	1855      	adds	r5, r2, r1
 800eb20:	42a5      	cmp	r5, r4
 800eb22:	d10b      	bne.n	800eb3c <_free_r+0x70>
 800eb24:	6824      	ldr	r4, [r4, #0]
 800eb26:	4421      	add	r1, r4
 800eb28:	1854      	adds	r4, r2, r1
 800eb2a:	42a3      	cmp	r3, r4
 800eb2c:	6011      	str	r1, [r2, #0]
 800eb2e:	d1e0      	bne.n	800eaf2 <_free_r+0x26>
 800eb30:	681c      	ldr	r4, [r3, #0]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	6053      	str	r3, [r2, #4]
 800eb36:	440c      	add	r4, r1
 800eb38:	6014      	str	r4, [r2, #0]
 800eb3a:	e7da      	b.n	800eaf2 <_free_r+0x26>
 800eb3c:	d902      	bls.n	800eb44 <_free_r+0x78>
 800eb3e:	230c      	movs	r3, #12
 800eb40:	6003      	str	r3, [r0, #0]
 800eb42:	e7d6      	b.n	800eaf2 <_free_r+0x26>
 800eb44:	6825      	ldr	r5, [r4, #0]
 800eb46:	1961      	adds	r1, r4, r5
 800eb48:	428b      	cmp	r3, r1
 800eb4a:	bf04      	itt	eq
 800eb4c:	6819      	ldreq	r1, [r3, #0]
 800eb4e:	685b      	ldreq	r3, [r3, #4]
 800eb50:	6063      	str	r3, [r4, #4]
 800eb52:	bf04      	itt	eq
 800eb54:	1949      	addeq	r1, r1, r5
 800eb56:	6021      	streq	r1, [r4, #0]
 800eb58:	6054      	str	r4, [r2, #4]
 800eb5a:	e7ca      	b.n	800eaf2 <_free_r+0x26>
 800eb5c:	b003      	add	sp, #12
 800eb5e:	bd30      	pop	{r4, r5, pc}
 800eb60:	20005d2c 	.word	0x20005d2c

0800eb64 <sbrk_aligned>:
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	4e0e      	ldr	r6, [pc, #56]	; (800eba0 <sbrk_aligned+0x3c>)
 800eb68:	460c      	mov	r4, r1
 800eb6a:	6831      	ldr	r1, [r6, #0]
 800eb6c:	4605      	mov	r5, r0
 800eb6e:	b911      	cbnz	r1, 800eb76 <sbrk_aligned+0x12>
 800eb70:	f000 f8ac 	bl	800eccc <_sbrk_r>
 800eb74:	6030      	str	r0, [r6, #0]
 800eb76:	4621      	mov	r1, r4
 800eb78:	4628      	mov	r0, r5
 800eb7a:	f000 f8a7 	bl	800eccc <_sbrk_r>
 800eb7e:	1c43      	adds	r3, r0, #1
 800eb80:	d00a      	beq.n	800eb98 <sbrk_aligned+0x34>
 800eb82:	1cc4      	adds	r4, r0, #3
 800eb84:	f024 0403 	bic.w	r4, r4, #3
 800eb88:	42a0      	cmp	r0, r4
 800eb8a:	d007      	beq.n	800eb9c <sbrk_aligned+0x38>
 800eb8c:	1a21      	subs	r1, r4, r0
 800eb8e:	4628      	mov	r0, r5
 800eb90:	f000 f89c 	bl	800eccc <_sbrk_r>
 800eb94:	3001      	adds	r0, #1
 800eb96:	d101      	bne.n	800eb9c <sbrk_aligned+0x38>
 800eb98:	f04f 34ff 	mov.w	r4, #4294967295
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	bd70      	pop	{r4, r5, r6, pc}
 800eba0:	20005d30 	.word	0x20005d30

0800eba4 <_malloc_r>:
 800eba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eba8:	1ccd      	adds	r5, r1, #3
 800ebaa:	f025 0503 	bic.w	r5, r5, #3
 800ebae:	3508      	adds	r5, #8
 800ebb0:	2d0c      	cmp	r5, #12
 800ebb2:	bf38      	it	cc
 800ebb4:	250c      	movcc	r5, #12
 800ebb6:	2d00      	cmp	r5, #0
 800ebb8:	4607      	mov	r7, r0
 800ebba:	db01      	blt.n	800ebc0 <_malloc_r+0x1c>
 800ebbc:	42a9      	cmp	r1, r5
 800ebbe:	d905      	bls.n	800ebcc <_malloc_r+0x28>
 800ebc0:	230c      	movs	r3, #12
 800ebc2:	603b      	str	r3, [r7, #0]
 800ebc4:	2600      	movs	r6, #0
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800eca0 <_malloc_r+0xfc>
 800ebd0:	f000 f868 	bl	800eca4 <__malloc_lock>
 800ebd4:	f8d8 3000 	ldr.w	r3, [r8]
 800ebd8:	461c      	mov	r4, r3
 800ebda:	bb5c      	cbnz	r4, 800ec34 <_malloc_r+0x90>
 800ebdc:	4629      	mov	r1, r5
 800ebde:	4638      	mov	r0, r7
 800ebe0:	f7ff ffc0 	bl	800eb64 <sbrk_aligned>
 800ebe4:	1c43      	adds	r3, r0, #1
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	d155      	bne.n	800ec96 <_malloc_r+0xf2>
 800ebea:	f8d8 4000 	ldr.w	r4, [r8]
 800ebee:	4626      	mov	r6, r4
 800ebf0:	2e00      	cmp	r6, #0
 800ebf2:	d145      	bne.n	800ec80 <_malloc_r+0xdc>
 800ebf4:	2c00      	cmp	r4, #0
 800ebf6:	d048      	beq.n	800ec8a <_malloc_r+0xe6>
 800ebf8:	6823      	ldr	r3, [r4, #0]
 800ebfa:	4631      	mov	r1, r6
 800ebfc:	4638      	mov	r0, r7
 800ebfe:	eb04 0903 	add.w	r9, r4, r3
 800ec02:	f000 f863 	bl	800eccc <_sbrk_r>
 800ec06:	4581      	cmp	r9, r0
 800ec08:	d13f      	bne.n	800ec8a <_malloc_r+0xe6>
 800ec0a:	6821      	ldr	r1, [r4, #0]
 800ec0c:	1a6d      	subs	r5, r5, r1
 800ec0e:	4629      	mov	r1, r5
 800ec10:	4638      	mov	r0, r7
 800ec12:	f7ff ffa7 	bl	800eb64 <sbrk_aligned>
 800ec16:	3001      	adds	r0, #1
 800ec18:	d037      	beq.n	800ec8a <_malloc_r+0xe6>
 800ec1a:	6823      	ldr	r3, [r4, #0]
 800ec1c:	442b      	add	r3, r5
 800ec1e:	6023      	str	r3, [r4, #0]
 800ec20:	f8d8 3000 	ldr.w	r3, [r8]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d038      	beq.n	800ec9a <_malloc_r+0xf6>
 800ec28:	685a      	ldr	r2, [r3, #4]
 800ec2a:	42a2      	cmp	r2, r4
 800ec2c:	d12b      	bne.n	800ec86 <_malloc_r+0xe2>
 800ec2e:	2200      	movs	r2, #0
 800ec30:	605a      	str	r2, [r3, #4]
 800ec32:	e00f      	b.n	800ec54 <_malloc_r+0xb0>
 800ec34:	6822      	ldr	r2, [r4, #0]
 800ec36:	1b52      	subs	r2, r2, r5
 800ec38:	d41f      	bmi.n	800ec7a <_malloc_r+0xd6>
 800ec3a:	2a0b      	cmp	r2, #11
 800ec3c:	d917      	bls.n	800ec6e <_malloc_r+0xca>
 800ec3e:	1961      	adds	r1, r4, r5
 800ec40:	42a3      	cmp	r3, r4
 800ec42:	6025      	str	r5, [r4, #0]
 800ec44:	bf18      	it	ne
 800ec46:	6059      	strne	r1, [r3, #4]
 800ec48:	6863      	ldr	r3, [r4, #4]
 800ec4a:	bf08      	it	eq
 800ec4c:	f8c8 1000 	streq.w	r1, [r8]
 800ec50:	5162      	str	r2, [r4, r5]
 800ec52:	604b      	str	r3, [r1, #4]
 800ec54:	4638      	mov	r0, r7
 800ec56:	f104 060b 	add.w	r6, r4, #11
 800ec5a:	f000 f829 	bl	800ecb0 <__malloc_unlock>
 800ec5e:	f026 0607 	bic.w	r6, r6, #7
 800ec62:	1d23      	adds	r3, r4, #4
 800ec64:	1af2      	subs	r2, r6, r3
 800ec66:	d0ae      	beq.n	800ebc6 <_malloc_r+0x22>
 800ec68:	1b9b      	subs	r3, r3, r6
 800ec6a:	50a3      	str	r3, [r4, r2]
 800ec6c:	e7ab      	b.n	800ebc6 <_malloc_r+0x22>
 800ec6e:	42a3      	cmp	r3, r4
 800ec70:	6862      	ldr	r2, [r4, #4]
 800ec72:	d1dd      	bne.n	800ec30 <_malloc_r+0x8c>
 800ec74:	f8c8 2000 	str.w	r2, [r8]
 800ec78:	e7ec      	b.n	800ec54 <_malloc_r+0xb0>
 800ec7a:	4623      	mov	r3, r4
 800ec7c:	6864      	ldr	r4, [r4, #4]
 800ec7e:	e7ac      	b.n	800ebda <_malloc_r+0x36>
 800ec80:	4634      	mov	r4, r6
 800ec82:	6876      	ldr	r6, [r6, #4]
 800ec84:	e7b4      	b.n	800ebf0 <_malloc_r+0x4c>
 800ec86:	4613      	mov	r3, r2
 800ec88:	e7cc      	b.n	800ec24 <_malloc_r+0x80>
 800ec8a:	230c      	movs	r3, #12
 800ec8c:	603b      	str	r3, [r7, #0]
 800ec8e:	4638      	mov	r0, r7
 800ec90:	f000 f80e 	bl	800ecb0 <__malloc_unlock>
 800ec94:	e797      	b.n	800ebc6 <_malloc_r+0x22>
 800ec96:	6025      	str	r5, [r4, #0]
 800ec98:	e7dc      	b.n	800ec54 <_malloc_r+0xb0>
 800ec9a:	605b      	str	r3, [r3, #4]
 800ec9c:	deff      	udf	#255	; 0xff
 800ec9e:	bf00      	nop
 800eca0:	20005d2c 	.word	0x20005d2c

0800eca4 <__malloc_lock>:
 800eca4:	4801      	ldr	r0, [pc, #4]	; (800ecac <__malloc_lock+0x8>)
 800eca6:	f7ff bf01 	b.w	800eaac <__retarget_lock_acquire_recursive>
 800ecaa:	bf00      	nop
 800ecac:	20005d28 	.word	0x20005d28

0800ecb0 <__malloc_unlock>:
 800ecb0:	4801      	ldr	r0, [pc, #4]	; (800ecb8 <__malloc_unlock+0x8>)
 800ecb2:	f7ff befc 	b.w	800eaae <__retarget_lock_release_recursive>
 800ecb6:	bf00      	nop
 800ecb8:	20005d28 	.word	0x20005d28

0800ecbc <_malloc_usable_size_r>:
 800ecbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecc0:	1f18      	subs	r0, r3, #4
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	bfbc      	itt	lt
 800ecc6:	580b      	ldrlt	r3, [r1, r0]
 800ecc8:	18c0      	addlt	r0, r0, r3
 800ecca:	4770      	bx	lr

0800eccc <_sbrk_r>:
 800eccc:	b538      	push	{r3, r4, r5, lr}
 800ecce:	4d06      	ldr	r5, [pc, #24]	; (800ece8 <_sbrk_r+0x1c>)
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	4608      	mov	r0, r1
 800ecd6:	602b      	str	r3, [r5, #0]
 800ecd8:	f7f7 fec0 	bl	8006a5c <_sbrk>
 800ecdc:	1c43      	adds	r3, r0, #1
 800ecde:	d102      	bne.n	800ece6 <_sbrk_r+0x1a>
 800ece0:	682b      	ldr	r3, [r5, #0]
 800ece2:	b103      	cbz	r3, 800ece6 <_sbrk_r+0x1a>
 800ece4:	6023      	str	r3, [r4, #0]
 800ece6:	bd38      	pop	{r3, r4, r5, pc}
 800ece8:	20005d24 	.word	0x20005d24

0800ecec <_init>:
 800ecec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecee:	bf00      	nop
 800ecf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecf2:	bc08      	pop	{r3}
 800ecf4:	469e      	mov	lr, r3
 800ecf6:	4770      	bx	lr

0800ecf8 <_fini>:
 800ecf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecfa:	bf00      	nop
 800ecfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecfe:	bc08      	pop	{r3}
 800ed00:	469e      	mov	lr, r3
 800ed02:	4770      	bx	lr
